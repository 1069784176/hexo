{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/分类标签.txt","path":"分类标签.txt","modified":1,"renderable":0},{"_id":"source/about/about.txt","path":"about/about.txt","modified":1,"renderable":0},{"_id":"themes/hexo-theme-pure/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/favicon_bak.png","path":"favicon_bak.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/README.md","path":"fonts/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/application.js","path":"js/application.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/application.min.js","path":"js/application.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/alipay.jpg","path":"images/donate/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/weipay.jpg","path":"images/donate/weipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/weipayimg.png","path":"images/donate/weipayimg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/github-logo.png","path":"images/favatar/github-logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/itellyou.cn-logo.png","path":"images/favatar/itellyou.cn-logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/ali_bak.png","path":"images/donate/ali_bak.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/wx_bak.png","path":"images/donate/wx_bak.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/分类标签.txt","hash":"16dcd4512a2cbccafec5cad337833025193a6ca3","modified":1520786548312},{"_id":"source/标准.md","hash":"2d666faf97e994f2cda8f864eaead573813714a4","modified":1520774936132},{"_id":"themes/hexo-theme-pure/.gitignore","hash":"204766bf9e2d6fe1fce5b9b02b8edfac2d235830","modified":1520603579018},{"_id":"themes/hexo-theme-pure/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1520603579019},{"_id":"themes/hexo-theme-pure/README.cn.md","hash":"33aee65ea5b794cf660993cbec14939039e1c7cd","modified":1520603579020},{"_id":"themes/hexo-theme-pure/README.md","hash":"34de1a83ee508641a534d12f51eea9b31b491acb","modified":1520603579021},{"_id":"themes/hexo-theme-pure/_config.yml","hash":"edd24d0b06c206dace205e5755c483beaf5dbbfd","modified":1520774936146},{"_id":"themes/hexo-theme-pure/_config.yml.example","hash":"8188c5872beda57fd165bf5adcea3b648f7e6780","modified":1520603579024},{"_id":"themes/hexo-theme-pure/package.json","hash":"d5bad0f074925c46e8ee5a75d385346d2fcea850","modified":1520603579127},{"_id":"source/_data/gallery.yml","hash":"eef9b025c2a81fdc714967d0c7b21bed9d55cff5","modified":1520603578984},{"_id":"source/404/index.md","hash":"1205cc8564e2e824e7c2940045abca83d8e09f0d","modified":1520603578982},{"_id":"source/_data/links.yml","hash":"e103595a18044b5fe77f77b483df5e6aa81836e5","modified":1520603578985},{"_id":"source/_data/movies.yml","hash":"c2280235ab1e1b1cb9455bcdc7be7b37e95d27c2","modified":1520603578986},{"_id":"source/_posts/2015-03-09-c语言10-字符串和命名空间.md","hash":"7295de70a6c1d97afe724315a385930a8ab8a8e7","modified":1520786470291},{"_id":"source/_posts/2015-03-09-c语言11-进程空间-结构.md","hash":"7a29a4b182119090ff4ebb7dae8cb4cebf700a8a","modified":1520786475218},{"_id":"source/_posts/2015-03-09-c语言2-补码.md","hash":"c02eec982aae66042afb7fbd28bad64e7519ed37","modified":1520786404794},{"_id":"source/_posts/2015-03-09-c语言3-优先级.md","hash":"438b501d31eb90543b7a9ab7e7bb61dfa1fb451b","modified":1520786422047},{"_id":"source/_posts/2015-03-09-c语言4-程序的设计结构.md","hash":"0ad3851a1e694f01e3820d5302239519f9aa115d","modified":1520786454899},{"_id":"source/_posts/2015-03-09-c语言5-数组的二义性.md","hash":"923fac5ea06a0b0e66af9ffc4514c1da79e69307","modified":1520786457843},{"_id":"source/_posts/2015-03-09-c语言7-指针.md","hash":"72c07631b5584ad58b3b99d348b23bb902401770","modified":1520786460707},{"_id":"source/_posts/2015-03-09-c语言8-函数.md","hash":"4d41ec077e9addb5edd8895ee333f21087bedad4","modified":1520786463657},{"_id":"source/_posts/2015-03-09-c语言9-变量作用域及修饰符.md","hash":"72787db9c4c0e0e4b6193cbe028fd95f95a54fce","modified":1520786466143},{"_id":"source/_posts/2015-04-07-HEXO博客.md","hash":"bfde2a6c292584e33610ed67b805fc80cc4c40ef","modified":1520603578987},{"_id":"source/_posts/2015-04-07-HUGO博客.md","hash":"54cc05258ba3d2be1da67c1218a5b19f5adc9e48","modified":1520774936044},{"_id":"source/_posts/2018-03-08-HEXO文档中带文件.md","hash":"856949d435c62e867c08a62221589fe95d78df33","modified":1520603578989},{"_id":"source/_posts/2018-03-09-C++引用的理解.md","hash":"b89c7903db404f72e2c249b81e4ef7c4a891c1ff","modified":1520781265280},{"_id":"source/_posts/2018-03-09-Hexo-theme-pure主题books默认选择想读.md","hash":"675c89b73b9aac077ed208b572a40e0c7eafbe81","modified":1520774936070},{"_id":"source/_posts/2018-03-09-SBC大数据导入(代码).md","hash":"f8677bcde50e811dcf68e19599062802fce869d0","modified":1520786345356},{"_id":"source/_posts/2018-03-09-c语言1-进程空间,一维数组.md","hash":"0eaa5f2e813bc7ffb21a1d8cd9e9dd4903489f77","modified":1520786483544},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置.md","hash":"3fec99fdea82c31f09ded5e7933b58f2c999a298","modified":1520774936094},{"_id":"source/about/about.txt","hash":"daef9ba2281f1f4890f04634523d69a2d53bd0a5","modified":1520774936107},{"_id":"source/about/index.md","hash":"aaca16ab604336fd372f63230cea93cedd958d08","modified":1520774936122},{"_id":"source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1520603579013},{"_id":"source/categories/index.md","hash":"7f8ed4c8160c19d8417a928a0d0c9f4800f99c85","modified":1520603579014},{"_id":"source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1520603579015},{"_id":"source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1520603579016},{"_id":"source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1520603579017},{"_id":"themes/hexo-theme-pure/languages/default.yml","hash":"02aa73d72bc3c25462abec3ffff425bece2275b5","modified":1520603579034},{"_id":"themes/hexo-theme-pure/languages/en.yml","hash":"85fe624fee25fe9871c8d9f10feda77c9ca8b4a7","modified":1520603579035},{"_id":"themes/hexo-theme-pure/languages/zh-CN.yml","hash":"87776e661463902d0dd09fc1e8401d66bc14e950","modified":1520603579036},{"_id":"themes/hexo-theme-pure/languages/zh-TW.yml","hash":"2422a43236e5dad1c6d17e401e4e820a385e9666","modified":1520603579037},{"_id":"themes/hexo-theme-pure/layout/about.ejs","hash":"4b64515ccc801cc9eba637a1e1909c6c4dd203f6","modified":1520603579113},{"_id":"themes/hexo-theme-pure/layout/archive.ejs","hash":"90fa5b0d8f081d0bde33b2784f66e6a80e5b0dac","modified":1520603579115},{"_id":"themes/hexo-theme-pure/layout/books.ejs","hash":"75cbd31d3551c730e8a683bd5b08562881a95b51","modified":1520603579116},{"_id":"themes/hexo-theme-pure/layout/categories.ejs","hash":"2adc0847776437f583f5222195462ec54bb21abf","modified":1520603579117},{"_id":"themes/hexo-theme-pure/layout/category.ejs","hash":"6e7024e5099dff8bc803b327a5683a93e248460f","modified":1520603579118},{"_id":"themes/hexo-theme-pure/layout/index.ejs","hash":"44418dbf1fb82392b8e1e4cc910d16a383190433","modified":1520603579119},{"_id":"themes/hexo-theme-pure/layout/layout.ejs","hash":"46efc1b25a9950bf37220820230ba05e1da8b564","modified":1520603579120},{"_id":"themes/hexo-theme-pure/layout/links.ejs","hash":"ee90a5f2a9d19bc02682ea3a59177b947f7f7284","modified":1520603579121},{"_id":"themes/hexo-theme-pure/layout/page.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1520603579122},{"_id":"themes/hexo-theme-pure/layout/post.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1520603579123},{"_id":"themes/hexo-theme-pure/layout/repository.ejs","hash":"0ecad33b6c1ec741eb3b02bb47a3824ac3749d09","modified":1520603579124},{"_id":"themes/hexo-theme-pure/layout/tag.ejs","hash":"643b4edaf27dea7c3da262fe69c85e056a2c68ec","modified":1520603579124},{"_id":"themes/hexo-theme-pure/layout/tags.ejs","hash":"cade9f903fb1f47ff0c8ff2c42875a0af26cfd76","modified":1520603579127},{"_id":"themes/hexo-theme-pure/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1520603579155},{"_id":"themes/hexo-theme-pure/source/favicon.png","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520603579159},{"_id":"themes/hexo-theme-pure/source/favicon_bak.png","hash":"79a9b4f6161f153208b02246c326eecf3095e79d","modified":1520603579159},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1520603579131},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1520603579129},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1520603579133},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1520603579134},{"_id":"themes/hexo-theme-pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1520603579137},{"_id":"source/_posts/2015-03-09-c语言11-进程空间-结构/mystack.c","hash":"3aed17cf338ca7048be9a50f27d6c80afa686727","modified":1511881865897},{"_id":"source/_posts/2015-03-09-c语言2-补码/cpu对内存的读写操作详解.png","hash":"71d005bc4486533fe249cd6986137ed73413656a","modified":1511881870930},{"_id":"source/_posts/2015-03-09-c语言3-优先级/优先级.jpg","hash":"2e08109e36d7ca17c9f57796291742e0f380277d","modified":1511881864747},{"_id":"source/_posts/2015-03-09-c语言7-指针/指针偏移法.png","hash":"ef3174cec4850bda5e7df75c894215ffc6106b8b","modified":1511881864230},{"_id":"source/_posts/2015-03-09-c语言8-函数/公式结构和书写结构.png","hash":"fcf92d167a3e70b00df5568d2d5c50b0a84ba8bd","modified":1511881863250},{"_id":"source/_posts/2018-03-08-HEXO文档中带文件/avatar.jpg","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520603578991},{"_id":"source/_posts/2018-03-09-c语言1-进程空间,一维数组/1.c","hash":"2726b133cb2e002e7bc072cc0277fd1852d35140","modified":1520603578998},{"_id":"source/_posts/2018-03-09-c语言1-进程空间,一维数组/1.jpg","hash":"8aaf0bf15112435aced6baf63b28a79b0cca665e","modified":1520603579002},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png","hash":"e2eb9f4687fcf27e18e21fc66c8fba6cfffb0db5","modified":1520603579005},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png","hash":"10e7e1165feeb3b847962f92cd3f640d8c09dfa6","modified":1520603579007},{"_id":"themes/hexo-theme-pure/_source/_data/gallery.yml","hash":"eef9b025c2a81fdc714967d0c7b21bed9d55cff5","modified":1520603579027},{"_id":"themes/hexo-theme-pure/_source/404/index.md","hash":"1205cc8564e2e824e7c2940045abca83d8e09f0d","modified":1520603579026},{"_id":"themes/hexo-theme-pure/_source/_data/links.yml","hash":"a5e31f35ebb8e1e8811f2e3d957cf4d4835aa2f9","modified":1520603579028},{"_id":"themes/hexo-theme-pure/_source/about/index.md","hash":"361c018ed3403a61151aaaf3228da94d66714cf2","modified":1520603579029},{"_id":"themes/hexo-theme-pure/_source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1520603579030},{"_id":"themes/hexo-theme-pure/_source/categories/index.md","hash":"b0006184ce9570766e7c7507d20fede1079f4992","modified":1520603579030},{"_id":"themes/hexo-theme-pure/_source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1520603579031},{"_id":"themes/hexo-theme-pure/_source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1520603579032},{"_id":"themes/hexo-theme-pure/_source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1520603579033},{"_id":"themes/hexo-theme-pure/layout/_common/footer.ejs","hash":"caec54ce31577207e1fd31aefa017bde99a8027c","modified":1520603579040},{"_id":"themes/hexo-theme-pure/layout/_common/head.ejs","hash":"ebe13105099db22d00b43350467065841af82134","modified":1520603579041},{"_id":"themes/hexo-theme-pure/layout/_common/header.ejs","hash":"1dbc6e7532a17981d7e28f86e2aae932f7c15961","modified":1520603579042},{"_id":"themes/hexo-theme-pure/layout/_common/plugin.ejs","hash":"eaeb2f1f16a6e48c9c8d5f62af8891173d82c30d","modified":1520603579043},{"_id":"themes/hexo-theme-pure/layout/_common/script.ejs","hash":"5cf5129affc7c5d0c5d5d5fba6d84ac8f9f86422","modified":1520603579044},{"_id":"themes/hexo-theme-pure/layout/_common/social.ejs","hash":"2bcdc7b0ee3905e724b01c2efa1ca6b47a846e1f","modified":1520603579045},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-book.ejs","hash":"6c1b8c517c9fee9c35385b978bdddd748b52d436","modified":1520603579047},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-category.ejs","hash":"4be88eec64fd40c7e1b74df8ccb6c8cdfa3e7a17","modified":1520603579048},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-link.ejs","hash":"a8a387f9e7289a6524cf46d7ab76c34fff37f4bf","modified":1520603579049},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-list.ejs","hash":"e4810f8e03986d5a8afdf4c0932814a3d0db9ffe","modified":1520603579050},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-post.ejs","hash":"513892fae41de4e68963c95a9358285714274bb4","modified":1520603579052},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-repository.ejs","hash":"6408e37ec1a8ee868cf36d5b0e020d5d97ea2f27","modified":1520603579056},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-tag.ejs","hash":"db8cba32bf6655a8d21fe8c8ccd0695b049e1d4c","modified":1520603579057},{"_id":"themes/hexo-theme-pure/layout/_partial/archive.ejs","hash":"c196b54f92eff017a48e02bacc029dd82edc8cf9","modified":1520603579058},{"_id":"themes/hexo-theme-pure/layout/_partial/article-about.ejs","hash":"47bbb53fe9cca05928c45782c6897c8a94d597ff","modified":1520603579060},{"_id":"themes/hexo-theme-pure/layout/_partial/article.ejs","hash":"4fa4587a0fd8687ecc7a8e3ff9b12a607b3b7c29","modified":1520603579061},{"_id":"themes/hexo-theme-pure/layout/_partial/item-post.ejs","hash":"402962ba1da10865045d8bc61d1a05f28af29b5b","modified":1520603579062},{"_id":"themes/hexo-theme-pure/layout/_partial/pagination.ejs","hash":"9105ff88a6fa026e78541e608ebc02e355be26f5","modified":1520603579063},{"_id":"themes/hexo-theme-pure/layout/_partial/sidebar-about.ejs","hash":"be30d7eb0b391759ac329b8a7b410d758ff8b032","modified":1520603579080},{"_id":"themes/hexo-theme-pure/layout/_partial/sidebar-toc.ejs","hash":"335a906404dada013d83508244e992c7a26fa879","modified":1520603579081},{"_id":"themes/hexo-theme-pure/layout/_partial/sidebar.ejs","hash":"a6662f79f7fd6f1cc9b5180672ba8e1d0192fbe2","modified":1520603579082},{"_id":"themes/hexo-theme-pure/layout/_script/douban.ejs","hash":"294fb340018eb460212d5f9ab9a4367af7caf834","modified":1520603579096},{"_id":"themes/hexo-theme-pure/layout/_script/mathjax.ejs","hash":"7a64d98212769423425102a441fca52eb6930fff","modified":1520603579097},{"_id":"themes/hexo-theme-pure/layout/_script/pv.ejs","hash":"b67f5d87bd9d53bc1a43da89b3bc32cc7d3d42d8","modified":1520603579098},{"_id":"themes/hexo-theme-pure/layout/_script/repository.ejs","hash":"6b5cc1ef09d1602a526d67ad7a8ba1c995fbb597","modified":1520603579099},{"_id":"themes/hexo-theme-pure/layout/_search/baidu.ejs","hash":"89848cc8e0190ca76cc26d42c6880a23e370702e","modified":1520603579101},{"_id":"themes/hexo-theme-pure/layout/_search/index-mobile.ejs","hash":"5e9a5cc9bdc05fabf939db494c3937cc0df48a72","modified":1520603579102},{"_id":"themes/hexo-theme-pure/layout/_search/index.ejs","hash":"2c1f06dac5710e5fd073f3e5739545f3f6a0a56f","modified":1520603579102},{"_id":"themes/hexo-theme-pure/layout/_search/insight.ejs","hash":"14b1ec0bdb911ab6d92046c78d371264afc4fb19","modified":1520603579103},{"_id":"themes/hexo-theme-pure/layout/_search/swiftype.ejs","hash":"dc548a83c33b5a598683bf2e1cb723bc3be4a76b","modified":1520603579105},{"_id":"themes/hexo-theme-pure/layout/_widget/archive.ejs","hash":"b250fb0f63286f9648cd8bf428bed6a88901b481","modified":1520603579106},{"_id":"themes/hexo-theme-pure/layout/_widget/board.ejs","hash":"28c1059e922407051de9f369d09fe72b49915a3b","modified":1520603579107},{"_id":"themes/hexo-theme-pure/layout/_widget/category.ejs","hash":"83c8ce4b099951d58b2be5006f6963afbbe7d4e9","modified":1520603579108},{"_id":"themes/hexo-theme-pure/layout/_widget/recent_posts.ejs","hash":"8932ce5283a7e6a356c6840104a7d6984f2ea986","modified":1520603579109},{"_id":"themes/hexo-theme-pure/layout/_widget/tag.ejs","hash":"24823a881a6c15fd846c7f4780eb90fe869a813b","modified":1520603579110},{"_id":"themes/hexo-theme-pure/layout/_widget/tagcloud.ejs","hash":"e6967ec160b93a5f466a73a36745833e644d04c0","modified":1520603579111},{"_id":"themes/hexo-theme-pure/source/fonts/README.md","hash":"b5b2aac1b36a86dac2217d242d650e026c5a3b0c","modified":1520603579160},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.eot","hash":"6c0c276a9ce023d569208e69e642583562745810","modified":1520603579162},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.ttf","hash":"c27cba6f2d2710c677f79fbe59480ec0c3535875","modified":1520603579166},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.woff","hash":"9e4123792f885b8e61c916b0a8f5e6176f916945","modified":1520603579168},{"_id":"themes/hexo-theme-pure/source/images/avatar.jpg","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520603579170},{"_id":"themes/hexo-theme-pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1520603579179},{"_id":"themes/hexo-theme-pure/source/js/application.js","hash":"637128440b40ceac55c74850f0e2648c647cd487","modified":1520603579181},{"_id":"themes/hexo-theme-pure/source/js/application.min.js","hash":"e5ae432339928ee0166ec444bcc5e12065944f3d","modified":1520603579181},{"_id":"themes/hexo-theme-pure/source/js/insight.js","hash":"a1b773d9ce470bf0e2f8fdca1b6fac2ac3d31aeb","modified":1520603579182},{"_id":"source/_posts/2015-03-09-c语言10-字符串和命名空间/数组指针传递以及二级指针接收的流程概括.png","hash":"7e64b13467a8c6651b407e0d20d1b4322ad7b97d","modified":1511881867739},{"_id":"source/_posts/2015-03-09-c语言11-进程空间-结构/内存对齐.png","hash":"09da2091dbe00315a96201e8097816765496047e","modified":1511881865880},{"_id":"source/_posts/2015-03-09-c语言2-补码/补码求原.png","hash":"d4eb11d2f7237d6ccb0b172e5acb2d4cda4f31ac","modified":1511881870934},{"_id":"themes/hexo-theme-pure/source/js/jquery.min.js","hash":"dacc1f76630a9708add066819b1aabf8dce01056","modified":1520603579184},{"_id":"themes/hexo-theme-pure/source/js/plugin.min.js","hash":"f41176dfdd685f68de6cba66fe500014a5342ce1","modified":1520603579185},{"_id":"themes/hexo-theme-pure/layout/_partial/post/category.ejs","hash":"20ef0d47ec3d2de7d94db9778ddac092dc2bd4b5","modified":1520603579065},{"_id":"themes/hexo-theme-pure/layout/_partial/post/comment.ejs","hash":"426855ae330ba403818170fac6e4ba89cc7f4c77","modified":1520603579066},{"_id":"themes/hexo-theme-pure/layout/_partial/post/copyright.ejs","hash":"e2180ba37bd5ec5d774e50e49e48daf086676db6","modified":1520603579067},{"_id":"themes/hexo-theme-pure/layout/_partial/post/date.ejs","hash":"8cbaef422bd7f3d1581d1198dd1c36e4c0e1e46e","modified":1520603579068},{"_id":"themes/hexo-theme-pure/layout/_partial/post/donate.ejs","hash":"2c5ec5785f4abc08e081123848531c4912c65fd8","modified":1520603579070},{"_id":"themes/hexo-theme-pure/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1520603579071},{"_id":"themes/hexo-theme-pure/layout/_partial/post/nav.ejs","hash":"db441deadb5628c82bc5796e3238da9c77ba36ae","modified":1520603579073},{"_id":"themes/hexo-theme-pure/layout/_partial/post/pv.ejs","hash":"29fa1058465c5e7ef5e707c2a85f874c95c07a84","modified":1520603579074},{"_id":"themes/hexo-theme-pure/layout/_partial/post/tag.ejs","hash":"8fd470b8d52606a90d475f7da9dbbed32742b1c9","modified":1520603579075},{"_id":"themes/hexo-theme-pure/layout/_partial/post/thumbnail.ejs","hash":"0d8b9a3aeaed95b74e292c593f0a8225711bfdca","modified":1520603579076},{"_id":"themes/hexo-theme-pure/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1520603579077},{"_id":"themes/hexo-theme-pure/layout/_partial/post/wordcount.ejs","hash":"81e9a89734505f54fef83dc74d2e277dab1bfa75","modified":1520603579079},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"829778c19025882fe73cf1b297a36a9d0eff39a1","modified":1520603579083},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/google-analytics.ejs","hash":"4557389e499b89982eb005a821208fdd3dbac627","modified":1520603579084},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/script.ejs","hash":"9d8afb9316326dd4f2dc8d0489907a8c17887e34","modified":1520603579085},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"b425f8c174e8cc0853d6f9c095cf3c5ffcddb37e","modified":1520603579086},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/disqus.ejs","hash":"ef355fd33e4f2fa230769acb42c307fad0fffade","modified":1520603579087},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/gitment.ejs","hash":"4977930e0982a396c08a6712f19d2579ad2503dd","modified":1520603579089},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/livere.ejs","hash":"de7d9de6e7785a6ca9d00997a03a49d4752b5bb7","modified":1520603579090},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/script.ejs","hash":"f81d2f4c93ce7ade17a3978b6b0cf2c8e1d80609","modified":1520603579091},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/youyan.ejs","hash":"68ad92beaaffd863a473fea316cd2848561b5e9e","modified":1520603579092},{"_id":"themes/hexo-theme-pure/layout/_script/_search/baidu.ejs","hash":"72b48dcaab830b615c71f6e810e96100b715c682","modified":1520603579093},{"_id":"themes/hexo-theme-pure/layout/_script/_search/insight.ejs","hash":"f95c3289c03fa084afce64e3c399cb5127707f56","modified":1520603579094},{"_id":"themes/hexo-theme-pure/source/css/style.css","hash":"e38bec7953baf6dbb4016b1a36368f5820720ee8","modified":1520774936160},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.svg","hash":"ea6a275273d7632734b320a55c825181fbfea81a","modified":1520603579165},{"_id":"themes/hexo-theme-pure/source/images/donate/alipay.jpg","hash":"8a5b2c72ddb7396adb709771a35ef50b8cf5485e","modified":1520603579172},{"_id":"themes/hexo-theme-pure/source/images/donate/alipayimg.png","hash":"fc1a582a4e303069e73454e6ea1581f9dfeaa13e","modified":1520605296104},{"_id":"themes/hexo-theme-pure/source/images/donate/weipay.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1520603579174},{"_id":"themes/hexo-theme-pure/source/images/donate/weipayimg.png","hash":"c8a135510379bfe5ba35bfe2bac2f0e5aa893aae","modified":1520605489904},{"_id":"themes/hexo-theme-pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1520603579176},{"_id":"themes/hexo-theme-pure/source/images/favatar/github-logo.png","hash":"0f4b8ec7206eea1e2582e79ab3e236c89ad81c43","modified":1520603579176},{"_id":"themes/hexo-theme-pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1520603579178},{"_id":"themes/hexo-theme-pure/source/images/favatar/itellyou.cn-logo.png","hash":"ea4db346a8c9dbcdb378648534fc375ad48a234e","modified":1520603579178},{"_id":"themes/hexo-theme-pure/source/images/donate/ali_bak.png","hash":"a467830116946b225614028f3d27ab23e99a22d9","modified":1520605577891},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png","hash":"45182eb2bf9b4bb31d7391388ef5556be7d03f12","modified":1520603579011},{"_id":"themes/hexo-theme-pure/source/images/donate/wx_bak.png","hash":"aa7513282fa935e576eba7830e4b5f5db185cefe","modified":1520605596513},{"_id":"themes/hexo-theme-pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1520603579153}],"Category":[{"name":"技术","_id":"cjeoevjcc00056stwuk5grlsy"}],"Data":[{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}},{"_id":"links","data":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}},{"_id":"movies","data":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}],"Page":[{"_content":"## 标题标准\n标题默认从##开始，","source":"标准.md","raw":"## 标题标准\n标题默认从##开始，","date":"2018-03-11T13:28:56.132Z","updated":"2018-03-11T13:28:56.132Z","path":"标准.html","title":"","comments":1,"layout":"page","_id":"cjeoevjb100006stwalxaoilr","content":"<h2 id=\"标题标准\"><a href=\"#标题标准\" class=\"headerlink\" title=\"标题标准\"></a>标题标准</h2><p>标题默认从##开始，</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"标题标准\"><a href=\"#标题标准\" class=\"headerlink\" title=\"标题标准\"></a>标题标准</h2><p>标题默认从##开始，</p>\n"},{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://blog.cofess.com\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://blog.cofess.com\" homePageName=\"回到我的主页\"></script>\n","date":"2018-03-09T14:01:53.567Z","updated":"2018-03-09T13:52:58.982Z","path":"/404.html","layout":"page","_id":"cjeoevjby00016stwcwyhxg4t","content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://blog.cofess.com\" homepagename=\"回到我的主页\"></script>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://blog.cofess.com\" homepagename=\"回到我的主页\"></script>\n"},{"title":"关于/留言","layout":"about","comments":1,"sidebar":"custom","_content":"\n```csharp\n{\n  name: '阿兴',\n  address: '广东省广州市',\n  QQ: 1069784176\n  github: 'https://github.com/GuoXingGitHub',\n  blog: 'https://GuoXingGitHub.github.io',\n  email: '15692413487@163.com',\n  description: 'hahaha...',\n\n  skills: [\n    ['C', 'C++', 'C#', '.Net', 'Sql', 'Js'],\n    ['Linux', 'Qt'],\n    ['网站开发', '游戏服务器'],\n    ['数据库'], \n  ]\n}\n```\n\n\n\n\n ","source":"about/index.md","raw":"---\ntitle: 关于/留言\nlayout: about\ncomments: true\nsidebar: custom\n---\n\n```csharp\n{\n  name: '阿兴',\n  address: '广东省广州市',\n  QQ: 1069784176\n  github: 'https://github.com/GuoXingGitHub',\n  blog: 'https://GuoXingGitHub.github.io',\n  email: '15692413487@163.com',\n  description: 'hahaha...',\n\n  skills: [\n    ['C', 'C++', 'C#', '.Net', 'Sql', 'Js'],\n    ['Linux', 'Qt'],\n    ['网站开发', '游戏服务器'],\n    ['数据库'], \n  ]\n}\n```\n\n\n\n\n ","date":"2018-03-11T13:28:56.122Z","updated":"2018-03-11T13:28:56.122Z","path":"about/index.html","_id":"cjeoevjc700036stwxbl6elq6","content":"<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'阿兴'</span>,</span><br><span class=\"line\">  address: <span class=\"string\">'广东省广州市'</span>,</span><br><span class=\"line\">  QQ: <span class=\"number\">1069784176</span></span><br><span class=\"line\">  github: <span class=\"string\">'https://github.com/GuoXingGitHub'</span>,</span><br><span class=\"line\">  blog: <span class=\"string\">'https://GuoXingGitHub.github.io'</span>,</span><br><span class=\"line\">  email: <span class=\"string\">'15692413487@163.com'</span>,</span><br><span class=\"line\">  description: <span class=\"string\">'hahaha...'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  skills: [</span><br><span class=\"line\">    [<span class=\"meta\">'C', 'C++', 'C#', '.Net', 'Sql', 'Js'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'Linux', 'Qt'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'网站开发', '游戏服务器'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'数据库'</span>], </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'阿兴'</span>,</span><br><span class=\"line\">  address: <span class=\"string\">'广东省广州市'</span>,</span><br><span class=\"line\">  QQ: <span class=\"number\">1069784176</span></span><br><span class=\"line\">  github: <span class=\"string\">'https://github.com/GuoXingGitHub'</span>,</span><br><span class=\"line\">  blog: <span class=\"string\">'https://GuoXingGitHub.github.io'</span>,</span><br><span class=\"line\">  email: <span class=\"string\">'15692413487@163.com'</span>,</span><br><span class=\"line\">  description: <span class=\"string\">'hahaha...'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  skills: [</span><br><span class=\"line\">    [<span class=\"meta\">'C', 'C++', 'C#', '.Net', 'Sql', 'Js'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'Linux', 'Qt'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'网站开发', '游戏服务器'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'数据库'</span>], </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---","date":"2018-03-09T14:01:53.568Z","updated":"2018-03-09T13:52:59.013Z","path":"books/index.html","_id":"cjeoevjcf00076stwmm1kclkc","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"分类","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\n#HUGO 随笔\n---\n","date":"2018-03-09T14:01:53.569Z","updated":"2018-03-09T13:52:59.014Z","path":"categories/index.html","_id":"cjeoevjef001z6stwm1txhuao","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2018-03-09T14:01:53.570Z","updated":"2018-03-09T13:52:59.015Z","path":"links/index.html","_id":"cjeoevjeh00206stwxlp1d5rj","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2018-03-09T14:01:53.570Z","updated":"2018-03-09T13:52:59.016Z","path":"repository/index.html","_id":"cjeoevjei00216stwospjz7kq","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\n---\n","date":"2018-03-09T14:01:53.571Z","updated":"2018-03-09T13:52:59.017Z","path":"tags/index.html","_id":"cjeoevjel00226stwvkjuzro3","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""}],"Post":[{"title":"c语言10-字符串和命名空间","date":"2018-03-11T16:04:29.000Z","_content":"\n## c语言里面的字符串\n理解:1:因为c语言中没有字符串类型，所以只能用char类型的数组来代替，\n          2:在编译阶段，系统会将字符串编译加载到data空间的只读区域，以字符数组的方式存放，并且字符串就相当于是数组名（字符串元素的首地址）【常量不能修改】\n          3:注意:字符串的首地址是个常量，不能修改和移动的，因为如果修改了首地址的话，后面的其他元素也就找不到了，如果我们要修改的化，可以将首元素的地址复制到一个新的char*类型变量中，然后根据这个新的指针变量来进行修改操作\n          4:一串字符的结束标识是'\\0'ascii码为0，我们正常输入的字符的ascii码范围为32~127，我们常用这个作为验证字符串是否结束\n          5:没有'\\0'的字符串不能称为字符串，只能称作字符数组   \n          6:用char数组来申明字符串的时候，我们可以利用数组可以省阅长度的特点来申明变量   \n          7:c语言中对字符串进行排序是先比较长度，如果长度相同再将其转换为ascii码单个字符进行比较的，所以strmp就是这样实现的\n\nc语言中常用的字符串标准库函数:头文件string.h\n```c\ngets:可以获取到屏幕中的字符串，在遇到回车才会停止，遇到空格也会加载（scanf遇到空格会结束自动加上\\0）\nputs:往屏幕追加字符\nstrlen（求字符串长度）:size_t strlen ( const char * str );\nstrcat（将两个字符串叠加）:char * strcat ( char * dest, const char * src );\nstrcpy（将字符串完全复制到一个新的字符数组中）:char * strcpy ( char * dest, const char * src );\nstrcmp（比较两个字符串的大小）:int strcmp ( const char * str1, const char * str2 );\n```\n\n## 多文件编程\n注意:我们需要在头文件加上#ifndefCP_H #defineCP_H  #endif//CP_H  的作用是防止头文件冲突\n\n## 指针数组\n理解:指针数组的本质就是数组，只不过里面存储的是指针（字符数组名），当我们要传递指针数组时，形参和实参的类型应该为二级指针\n\n## 内存空间\n理解:1:我们说的内存空间不是我们说的内存条，而是虚拟内存（总的内存=系统内核空间+用户空间）的用户空间部分\n          2:我们开发中常用的两部分内存，栈空间和堆空间:栈空间:自上向下发展，先申请的为高位，后申请的为低位\n3:我们每运行一个程序都会开辟一个新的进程空间，每个进程空间现在可以理解为独立的\n特点:随用随开，用完即销；堆空间:自下向上发展:先申请的为低位，后申请的为高位，对于栈来说，无限大，但在实际开发中，受限于是否连续空间\nc语言中申请内存空间的函数:头文件  stdlib.h\n特点:申请的都是堆空间\n注意:每次申请都要记得释放\nmalloc:void * malloc(size_t _Size);\ncalloc:void *calloc(size_t nmemb, size_t size);:开辟nmemb个size大小的空间\nrealloc:void *realloc(void *ptr, size_t size); :根据原有空间来扩容，先直接在原有空间后面找，看是否有size大小的空间，如果有就直接创建，如果没有，会去其他地方找，找到后会将原空间的内容复制进去，并且返回新的地址    \nfree:void free(void *p);\n\n## 数组指针传递以及二级指针接收的流程概括\n![数组指针传递以及二级指针接收的流程概括](数组指针传递以及二级指针接收的流程概括.png)\n\n\n## 自实现c语言常用字符函数\n```c\n//1:myStrlen:\nvoid myStrLen( char*str1 )\n{\n\tint num = 0;\n\twhile (*str1++) /* 验证完了再加加如果符合才进 */\n\t{\n\t\tnum++;\n\t}\n\tprintf( \"%d\\n\", num );\n}\n//2:myStrCat:\nvoid myStrCat( char*str1, char*str2 )\n{\n/* 首先将首空间的地址储存 */\n\tchar*newStr = str1;\n/* 将首空间的地址移动到空间的最后 */\n\tfor (; *str1; str1++ );\n/* 将要追加的内容进行追加 */\n\tfor (; *str1 = *str2; str1++, str2++ );\n\tprintf( \"%s\", newStr );\n}\n//3:myStrCmp\nint myStrCmp( char*str1, intnum1, char*str2, intnum2 )\n{\n\tif(num1>num2)\n\t\treturn 1;\n\telse if(num1 < num2 )\n\t{\n\t\treturn(-1);\n\t}else {\n\t\twhile ( 1 )\n\t\t{\n\t\t\tif ( *str1 > *str2 )\n\t\t\t\treturn1;\n\t\t\telse if( *str1 == *str2 && *str1 == '\\0' && *str2 == '\\0' )\n\t\t\t    return0;\n\t\t\telse if( *str1 < *str2 )\n\t\t\t    return(-1);\n\t\t\tstr1++; str2++;\n\t\t}\n\t}\n}\n//4:myStrCopy:\nvoid myStrCpy( char*str1, char*str2 )\n{\n\tchar * newStr = str2;\n\tfor (;*str2 = *str1; str1++, str2++ );\n\tprintf( \"%s\\n\", newStr );\n}\n//5:对字 符 串 数组进行排序:\nvoid myStrSort( char**str1, intnum )\n{\n\tfor ( inti = 0; i < num; i++ )\n\t{\n\t\tfor ( intj = 0; j < num - i - 1; j++ )\n\t\t{\n\t\t\tif ( strcmp( *(str1 + j), *(str1 + j + 1) ) > 0 )\n\t\t\t{\n\t\t\t\tchar*temp = *(str1 + j);\n\t\t\t\t*(str1 + j)\t= *(str1 + j + 1);\n\t\t\t\t*(str1 + j + 1) = *(str1 + j);\n\t\t\t}\n\t\t}\n\t}\n\tfor ( inti = 0; i < num; i++ )\n\t\tprintf(\"%s\\n\", *(str1 + i));\n}\n\n```","source":"_posts/2015-03-09-c语言10-字符串和命名空间.md","raw":"---\ntitle: c语言10-字符串和命名空间\ndate: 2018-03-12 00:04:29\ncategories: 技术\ntags: c语言\n---\n\n## c语言里面的字符串\n理解:1:因为c语言中没有字符串类型，所以只能用char类型的数组来代替，\n          2:在编译阶段，系统会将字符串编译加载到data空间的只读区域，以字符数组的方式存放，并且字符串就相当于是数组名（字符串元素的首地址）【常量不能修改】\n          3:注意:字符串的首地址是个常量，不能修改和移动的，因为如果修改了首地址的话，后面的其他元素也就找不到了，如果我们要修改的化，可以将首元素的地址复制到一个新的char*类型变量中，然后根据这个新的指针变量来进行修改操作\n          4:一串字符的结束标识是'\\0'ascii码为0，我们正常输入的字符的ascii码范围为32~127，我们常用这个作为验证字符串是否结束\n          5:没有'\\0'的字符串不能称为字符串，只能称作字符数组   \n          6:用char数组来申明字符串的时候，我们可以利用数组可以省阅长度的特点来申明变量   \n          7:c语言中对字符串进行排序是先比较长度，如果长度相同再将其转换为ascii码单个字符进行比较的，所以strmp就是这样实现的\n\nc语言中常用的字符串标准库函数:头文件string.h\n```c\ngets:可以获取到屏幕中的字符串，在遇到回车才会停止，遇到空格也会加载（scanf遇到空格会结束自动加上\\0）\nputs:往屏幕追加字符\nstrlen（求字符串长度）:size_t strlen ( const char * str );\nstrcat（将两个字符串叠加）:char * strcat ( char * dest, const char * src );\nstrcpy（将字符串完全复制到一个新的字符数组中）:char * strcpy ( char * dest, const char * src );\nstrcmp（比较两个字符串的大小）:int strcmp ( const char * str1, const char * str2 );\n```\n\n## 多文件编程\n注意:我们需要在头文件加上#ifndefCP_H #defineCP_H  #endif//CP_H  的作用是防止头文件冲突\n\n## 指针数组\n理解:指针数组的本质就是数组，只不过里面存储的是指针（字符数组名），当我们要传递指针数组时，形参和实参的类型应该为二级指针\n\n## 内存空间\n理解:1:我们说的内存空间不是我们说的内存条，而是虚拟内存（总的内存=系统内核空间+用户空间）的用户空间部分\n          2:我们开发中常用的两部分内存，栈空间和堆空间:栈空间:自上向下发展，先申请的为高位，后申请的为低位\n3:我们每运行一个程序都会开辟一个新的进程空间，每个进程空间现在可以理解为独立的\n特点:随用随开，用完即销；堆空间:自下向上发展:先申请的为低位，后申请的为高位，对于栈来说，无限大，但在实际开发中，受限于是否连续空间\nc语言中申请内存空间的函数:头文件  stdlib.h\n特点:申请的都是堆空间\n注意:每次申请都要记得释放\nmalloc:void * malloc(size_t _Size);\ncalloc:void *calloc(size_t nmemb, size_t size);:开辟nmemb个size大小的空间\nrealloc:void *realloc(void *ptr, size_t size); :根据原有空间来扩容，先直接在原有空间后面找，看是否有size大小的空间，如果有就直接创建，如果没有，会去其他地方找，找到后会将原空间的内容复制进去，并且返回新的地址    \nfree:void free(void *p);\n\n## 数组指针传递以及二级指针接收的流程概括\n![数组指针传递以及二级指针接收的流程概括](数组指针传递以及二级指针接收的流程概括.png)\n\n\n## 自实现c语言常用字符函数\n```c\n//1:myStrlen:\nvoid myStrLen( char*str1 )\n{\n\tint num = 0;\n\twhile (*str1++) /* 验证完了再加加如果符合才进 */\n\t{\n\t\tnum++;\n\t}\n\tprintf( \"%d\\n\", num );\n}\n//2:myStrCat:\nvoid myStrCat( char*str1, char*str2 )\n{\n/* 首先将首空间的地址储存 */\n\tchar*newStr = str1;\n/* 将首空间的地址移动到空间的最后 */\n\tfor (; *str1; str1++ );\n/* 将要追加的内容进行追加 */\n\tfor (; *str1 = *str2; str1++, str2++ );\n\tprintf( \"%s\", newStr );\n}\n//3:myStrCmp\nint myStrCmp( char*str1, intnum1, char*str2, intnum2 )\n{\n\tif(num1>num2)\n\t\treturn 1;\n\telse if(num1 < num2 )\n\t{\n\t\treturn(-1);\n\t}else {\n\t\twhile ( 1 )\n\t\t{\n\t\t\tif ( *str1 > *str2 )\n\t\t\t\treturn1;\n\t\t\telse if( *str1 == *str2 && *str1 == '\\0' && *str2 == '\\0' )\n\t\t\t    return0;\n\t\t\telse if( *str1 < *str2 )\n\t\t\t    return(-1);\n\t\t\tstr1++; str2++;\n\t\t}\n\t}\n}\n//4:myStrCopy:\nvoid myStrCpy( char*str1, char*str2 )\n{\n\tchar * newStr = str2;\n\tfor (;*str2 = *str1; str1++, str2++ );\n\tprintf( \"%s\\n\", newStr );\n}\n//5:对字 符 串 数组进行排序:\nvoid myStrSort( char**str1, intnum )\n{\n\tfor ( inti = 0; i < num; i++ )\n\t{\n\t\tfor ( intj = 0; j < num - i - 1; j++ )\n\t\t{\n\t\t\tif ( strcmp( *(str1 + j), *(str1 + j + 1) ) > 0 )\n\t\t\t{\n\t\t\t\tchar*temp = *(str1 + j);\n\t\t\t\t*(str1 + j)\t= *(str1 + j + 1);\n\t\t\t\t*(str1 + j + 1) = *(str1 + j);\n\t\t\t}\n\t\t}\n\t}\n\tfor ( inti = 0; i < num; i++ )\n\t\tprintf(\"%s\\n\", *(str1 + i));\n}\n\n```","slug":"2015-03-09-c语言10-字符串和命名空间","published":1,"updated":"2018-03-11T16:41:10.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjc000026stwv7fcsd3t","content":"<h2 id=\"c语言里面的字符串\"><a href=\"#c语言里面的字符串\" class=\"headerlink\" title=\"c语言里面的字符串\"></a>c语言里面的字符串</h2><p>理解:1:因为c语言中没有字符串类型，所以只能用char类型的数组来代替，<br>          2:在编译阶段，系统会将字符串编译加载到data空间的只读区域，以字符数组的方式存放，并且字符串就相当于是数组名（字符串元素的首地址）【常量不能修改】<br>          3:注意:字符串的首地址是个常量，不能修改和移动的，因为如果修改了首地址的话，后面的其他元素也就找不到了，如果我们要修改的化，可以将首元素的地址复制到一个新的char*类型变量中，然后根据这个新的指针变量来进行修改操作<br>          4:一串字符的结束标识是’\\0’ascii码为0，我们正常输入的字符的ascii码范围为32~127，我们常用这个作为验证字符串是否结束<br>          5:没有’\\0’的字符串不能称为字符串，只能称作字符数组<br>          6:用char数组来申明字符串的时候，我们可以利用数组可以省阅长度的特点来申明变量<br>          7:c语言中对字符串进行排序是先比较长度，如果长度相同再将其转换为ascii码单个字符进行比较的，所以strmp就是这样实现的</p>\n<p>c语言中常用的字符串标准库函数:头文件string.h<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gets:可以获取到屏幕中的字符串，在遇到回车才会停止，遇到空格也会加载（<span class=\"built_in\">scanf</span>遇到空格会结束自动加上\\<span class=\"number\">0</span>）</span><br><span class=\"line\"><span class=\"built_in\">puts</span>:往屏幕追加字符</span><br><span class=\"line\"><span class=\"built_in\">strlen</span>（求字符串长度）:<span class=\"keyword\">size_t</span> <span class=\"built_in\">strlen</span> ( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * str );</span><br><span class=\"line\"><span class=\"built_in\">strcat</span>（将两个字符串叠加）:<span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">strcat</span> <span class=\"params\">( <span class=\"keyword\">char</span> * dest, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src )</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>（将字符串完全复制到一个新的字符数组中）:<span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">strcpy</span> <span class=\"params\">( <span class=\"keyword\">char</span> * dest, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src )</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">strcmp</span>（比较两个字符串的大小）:<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">strcmp</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * str1, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * str2 )</span></span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多文件编程\"><a href=\"#多文件编程\" class=\"headerlink\" title=\"多文件编程\"></a>多文件编程</h2><p>注意:我们需要在头文件加上#ifndefCP_H #defineCP_H  #endif//CP_H  的作用是防止头文件冲突</p>\n<h2 id=\"指针数组\"><a href=\"#指针数组\" class=\"headerlink\" title=\"指针数组\"></a>指针数组</h2><p>理解:指针数组的本质就是数组，只不过里面存储的是指针（字符数组名），当我们要传递指针数组时，形参和实参的类型应该为二级指针</p>\n<h2 id=\"内存空间\"><a href=\"#内存空间\" class=\"headerlink\" title=\"内存空间\"></a>内存空间</h2><p>理解:1:我们说的内存空间不是我们说的内存条，而是虚拟内存（总的内存=系统内核空间+用户空间）的用户空间部分<br>          2:我们开发中常用的两部分内存，栈空间和堆空间:栈空间:自上向下发展，先申请的为高位，后申请的为低位<br>3:我们每运行一个程序都会开辟一个新的进程空间，每个进程空间现在可以理解为独立的<br>特点:随用随开，用完即销；堆空间:自下向上发展:先申请的为低位，后申请的为高位，对于栈来说，无限大，但在实际开发中，受限于是否连续空间<br>c语言中申请内存空间的函数:头文件  stdlib.h<br>特点:申请的都是堆空间<br>注意:每次申请都要记得释放<br>malloc:void <em> malloc(size_t _Size);<br>calloc:void </em>calloc(size_t nmemb, size_t size);:开辟nmemb个size大小的空间<br>realloc:void <em>realloc(void </em>ptr, size_t size); :根据原有空间来扩容，先直接在原有空间后面找，看是否有size大小的空间，如果有就直接创建，如果没有，会去其他地方找，找到后会将原空间的内容复制进去，并且返回新的地址<br>free:void free(void *p);</p>\n<h2 id=\"数组指针传递以及二级指针接收的流程概括\"><a href=\"#数组指针传递以及二级指针接收的流程概括\" class=\"headerlink\" title=\"数组指针传递以及二级指针接收的流程概括\"></a>数组指针传递以及二级指针接收的流程概括</h2><p><img src=\"/2018/03/12/2015-03-09-c语言10-字符串和命名空间/数组指针传递以及二级指针接收的流程概括.png\" alt=\"数组指针传递以及二级指针接收的流程概括\"></p>\n<h2 id=\"自实现c语言常用字符函数\"><a href=\"#自实现c语言常用字符函数\" class=\"headerlink\" title=\"自实现c语言常用字符函数\"></a>自实现c语言常用字符函数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1:myStrlen:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrLen</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (*str1++) <span class=\"comment\">/* 验证完了再加加如果符合才进 */</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnum++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%d\\n\"</span>, num );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2:myStrCat:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrCat</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1, <span class=\"keyword\">char</span>*str2 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/* 首先将首空间的地址储存 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>*newStr = str1;</span><br><span class=\"line\"><span class=\"comment\">/* 将首空间的地址移动到空间的最后 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; *str1; str1++ );</span><br><span class=\"line\"><span class=\"comment\">/* 将要追加的内容进行追加 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; *str1 = *str2; str1++, str2++ );</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\"</span>, newStr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3:myStrCmp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">myStrCmp</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1, intnum1, <span class=\"keyword\">char</span>*str2, intnum2 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num1&gt;num2)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num1 &lt; num2 )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( *str1 &gt; *str2 )</span><br><span class=\"line\">\t\t\t\treturn1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( *str1 == *str2 &amp;&amp; *str1 == <span class=\"string\">'\\0'</span> &amp;&amp; *str2 == <span class=\"string\">'\\0'</span> )</span><br><span class=\"line\">\t\t\t    return0;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( *str1 &lt; *str2 )</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">return</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\tstr1++; str2++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//4:myStrCopy:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrCpy</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1, <span class=\"keyword\">char</span>*str2 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * newStr = str2;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;*str2 = *str1; str1++, str2++ );</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\\n\"</span>, newStr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//5:对字 符 串 数组进行排序:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrSort</span><span class=\"params\">( <span class=\"keyword\">char</span>**str1, intnum )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ( inti = <span class=\"number\">0</span>; i &lt; num; i++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ( intj = <span class=\"number\">0</span>; j &lt; num - i - <span class=\"number\">1</span>; j++ )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( <span class=\"built_in\">strcmp</span>( *(str1 + j), *(str1 + j + <span class=\"number\">1</span>) ) &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">char</span>*temp = *(str1 + j);</span><br><span class=\"line\">\t\t\t\t*(str1 + j)\t= *(str1 + j + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t*(str1 + j + <span class=\"number\">1</span>) = *(str1 + j);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ( inti = <span class=\"number\">0</span>; i &lt; num; i++ )</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, *(str1 + i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"c语言里面的字符串\"><a href=\"#c语言里面的字符串\" class=\"headerlink\" title=\"c语言里面的字符串\"></a>c语言里面的字符串</h2><p>理解:1:因为c语言中没有字符串类型，所以只能用char类型的数组来代替，<br>          2:在编译阶段，系统会将字符串编译加载到data空间的只读区域，以字符数组的方式存放，并且字符串就相当于是数组名（字符串元素的首地址）【常量不能修改】<br>          3:注意:字符串的首地址是个常量，不能修改和移动的，因为如果修改了首地址的话，后面的其他元素也就找不到了，如果我们要修改的化，可以将首元素的地址复制到一个新的char*类型变量中，然后根据这个新的指针变量来进行修改操作<br>          4:一串字符的结束标识是’\\0’ascii码为0，我们正常输入的字符的ascii码范围为32~127，我们常用这个作为验证字符串是否结束<br>          5:没有’\\0’的字符串不能称为字符串，只能称作字符数组<br>          6:用char数组来申明字符串的时候，我们可以利用数组可以省阅长度的特点来申明变量<br>          7:c语言中对字符串进行排序是先比较长度，如果长度相同再将其转换为ascii码单个字符进行比较的，所以strmp就是这样实现的</p>\n<p>c语言中常用的字符串标准库函数:头文件string.h<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gets:可以获取到屏幕中的字符串，在遇到回车才会停止，遇到空格也会加载（<span class=\"built_in\">scanf</span>遇到空格会结束自动加上\\<span class=\"number\">0</span>）</span><br><span class=\"line\"><span class=\"built_in\">puts</span>:往屏幕追加字符</span><br><span class=\"line\"><span class=\"built_in\">strlen</span>（求字符串长度）:<span class=\"keyword\">size_t</span> <span class=\"built_in\">strlen</span> ( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * str );</span><br><span class=\"line\"><span class=\"built_in\">strcat</span>（将两个字符串叠加）:<span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">strcat</span> <span class=\"params\">( <span class=\"keyword\">char</span> * dest, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src )</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>（将字符串完全复制到一个新的字符数组中）:<span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">strcpy</span> <span class=\"params\">( <span class=\"keyword\">char</span> * dest, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src )</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">strcmp</span>（比较两个字符串的大小）:<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">strcmp</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * str1, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * str2 )</span></span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多文件编程\"><a href=\"#多文件编程\" class=\"headerlink\" title=\"多文件编程\"></a>多文件编程</h2><p>注意:我们需要在头文件加上#ifndefCP_H #defineCP_H  #endif//CP_H  的作用是防止头文件冲突</p>\n<h2 id=\"指针数组\"><a href=\"#指针数组\" class=\"headerlink\" title=\"指针数组\"></a>指针数组</h2><p>理解:指针数组的本质就是数组，只不过里面存储的是指针（字符数组名），当我们要传递指针数组时，形参和实参的类型应该为二级指针</p>\n<h2 id=\"内存空间\"><a href=\"#内存空间\" class=\"headerlink\" title=\"内存空间\"></a>内存空间</h2><p>理解:1:我们说的内存空间不是我们说的内存条，而是虚拟内存（总的内存=系统内核空间+用户空间）的用户空间部分<br>          2:我们开发中常用的两部分内存，栈空间和堆空间:栈空间:自上向下发展，先申请的为高位，后申请的为低位<br>3:我们每运行一个程序都会开辟一个新的进程空间，每个进程空间现在可以理解为独立的<br>特点:随用随开，用完即销；堆空间:自下向上发展:先申请的为低位，后申请的为高位，对于栈来说，无限大，但在实际开发中，受限于是否连续空间<br>c语言中申请内存空间的函数:头文件  stdlib.h<br>特点:申请的都是堆空间<br>注意:每次申请都要记得释放<br>malloc:void <em> malloc(size_t _Size);<br>calloc:void </em>calloc(size_t nmemb, size_t size);:开辟nmemb个size大小的空间<br>realloc:void <em>realloc(void </em>ptr, size_t size); :根据原有空间来扩容，先直接在原有空间后面找，看是否有size大小的空间，如果有就直接创建，如果没有，会去其他地方找，找到后会将原空间的内容复制进去，并且返回新的地址<br>free:void free(void *p);</p>\n<h2 id=\"数组指针传递以及二级指针接收的流程概括\"><a href=\"#数组指针传递以及二级指针接收的流程概括\" class=\"headerlink\" title=\"数组指针传递以及二级指针接收的流程概括\"></a>数组指针传递以及二级指针接收的流程概括</h2><p><img src=\"/2018/03/12/2015-03-09-c语言10-字符串和命名空间/数组指针传递以及二级指针接收的流程概括.png\" alt=\"数组指针传递以及二级指针接收的流程概括\"></p>\n<h2 id=\"自实现c语言常用字符函数\"><a href=\"#自实现c语言常用字符函数\" class=\"headerlink\" title=\"自实现c语言常用字符函数\"></a>自实现c语言常用字符函数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1:myStrlen:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrLen</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (*str1++) <span class=\"comment\">/* 验证完了再加加如果符合才进 */</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnum++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%d\\n\"</span>, num );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2:myStrCat:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrCat</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1, <span class=\"keyword\">char</span>*str2 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/* 首先将首空间的地址储存 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>*newStr = str1;</span><br><span class=\"line\"><span class=\"comment\">/* 将首空间的地址移动到空间的最后 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; *str1; str1++ );</span><br><span class=\"line\"><span class=\"comment\">/* 将要追加的内容进行追加 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; *str1 = *str2; str1++, str2++ );</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\"</span>, newStr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3:myStrCmp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">myStrCmp</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1, intnum1, <span class=\"keyword\">char</span>*str2, intnum2 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num1&gt;num2)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num1 &lt; num2 )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( *str1 &gt; *str2 )</span><br><span class=\"line\">\t\t\t\treturn1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( *str1 == *str2 &amp;&amp; *str1 == <span class=\"string\">'\\0'</span> &amp;&amp; *str2 == <span class=\"string\">'\\0'</span> )</span><br><span class=\"line\">\t\t\t    return0;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( *str1 &lt; *str2 )</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">return</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\tstr1++; str2++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//4:myStrCopy:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrCpy</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1, <span class=\"keyword\">char</span>*str2 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * newStr = str2;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;*str2 = *str1; str1++, str2++ );</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\\n\"</span>, newStr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//5:对字 符 串 数组进行排序:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrSort</span><span class=\"params\">( <span class=\"keyword\">char</span>**str1, intnum )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ( inti = <span class=\"number\">0</span>; i &lt; num; i++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ( intj = <span class=\"number\">0</span>; j &lt; num - i - <span class=\"number\">1</span>; j++ )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( <span class=\"built_in\">strcmp</span>( *(str1 + j), *(str1 + j + <span class=\"number\">1</span>) ) &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">char</span>*temp = *(str1 + j);</span><br><span class=\"line\">\t\t\t\t*(str1 + j)\t= *(str1 + j + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t*(str1 + j + <span class=\"number\">1</span>) = *(str1 + j);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ( inti = <span class=\"number\">0</span>; i &lt; num; i++ )</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, *(str1 + i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"c语言11-进程空间,结构","date":"2018-03-11T16:16:12.000Z","_content":"## 进程空间\nree:释放空间的时候  保存指针的变量还是不变的，释放的只是保存数据的空间，所以我们还可以通过该指针变量来访问数据，可能该空间重新保存了别的数据，所以释放后我们也需要将指针变量设置为NULL，避免通过该指针非法访问导致系统崩溃\n\n申请，判空，使用，释放，置NULL\n\n在自定义方法里面申请栈空间返回地址时特别注意:栈里的空间不能返回，也就是说不能通过返回栈空间的地址的方式访问栈空间，但是堆空间是可以返回的，也就是说可以通过堆空间返回的地址来操作堆空间\n\n## 内存泄漏\n申请返回的指针，是我们操作堆空间唯一的标识，如果该标识丢了，那么就会造成内存泄漏\n\nmalloc和free:\n1. malloc的个数大雨free导致内存泄漏\n2. free大于malloc出现double free\n3. free和malloc必须配对使用  \n\n## 进程空间和程序之间的关系\n每个程序启动都会开辟一个新的进程空间，所以进程空间和程序是一对一的关系\n\n## 申请内存时易犯错的三点\n### malloc申请内存判断是否申请失败\n```c\nchar * ch=(char*)malloc(100);              \nif(NULL==ch)                               \n    return -1;                             \nfree(ch);     \n```\n\n### 服务器模型:未释放内存空间，重新开辟新的空间，导致内存泄漏\nwhile(1)\n{\n    char*ch=(char*)malloc(100);\n    printf(\"xxxxxxxxxxxxxxxx\\n\");\n    printf(\"xxxxxxxxxxxxxxxx\\n\");\n    printf(\"xxxxxxxxxxxxxxxx\\n\");\n    ch=(char*)malloc(100);//中途忘记已经是申请了导致重新开辟了一个新的空间\n    free(ch);//每次循环都只是释放了一个空间还剩下一个空间没有释放导致越来越多的内存泄漏（没有释放）\n}\n\n### 内存空间最好谁申请谁释放(非绝对)\n\n## 自实现栈空间模型的代码\n```c\n#include <stdio.h>\n\n//FILO  LIFO\n\n#define N   100\n\nstruct Stack\n{\n    char space[N];\n    int top;\n};\n\nstruct Stack  st = {{0},0};\n\nint isFull()  //满返真\n{\n    if(st.top == 100)\n        return 1;\n    else\n        return 0;\n}\n\nint isEmpty()     //空返真\n{\n    if(st.top == 0)\n        return 1;\n    else\n        return 0;\n}\n\nvoid push(char ch)\n{\n    st.space[st.top] = ch;\n    st.top++;\n}\n\nint pop()\n{\n    st.top--;\n    return st.space[st.top];\n}\n\nint main(void)\n{\n    char ch = 'a';\n    for(int i=0; i<26; i++)\n    {\n        if(!isFull())\n            push(ch++);\n    }\n\n    while(!isEmpty())\n        putchar(pop());\n\n    return 0;\n}\n```\n\n## 结构体\n### 使用情景\n结构体设计出来就是为了处理我们在一个情况下需要处理多种不同类型而设计出来的，可以自定义类型的方法\n\n### 内存对齐\n![内存对齐](内存对齐.png)\n\n### 结构体的几种定义方式\n1.无名构造体:\nstruct{}stu;:仅在本地使用，并且申明的时候必须带上变量名\n2.有名构造体:\nstruct 结构体名{}stu; 申明变量:struct 结构体名 变量名\n3.别名构造体类型:\ntypedef struct 结构体名{} 别名; 以后 别名=struct 结构体名\n\n## 小结\n1:我们定义的新类型，只要没有申明变量是步占空间的\n2:结构体的类型是 struct+结构体名，struct不能省悦\n3:凡是基本类型都可以先申明后初始化，或者直接在申明的时候初始化,凡是构造类型必须在申明的时候初始化，或者先申明然后对单独的每个“元素”单独初始化，例如:如果是二级数组在先申明后初始化应该对[][]的每个元素单独初始化\n4:切记，数组名是数组元素的首地址，是个常量，不能修改，所以我们对字符数组进行赋值的时候不能直接将字符串用=的符号进行复赋值（接收数据的变量是个指针（字符数组首元素的指针（常量）），应该用strcpy进行赋值操作\n5:结构体做形参，实参，返回值，接收值时，都是用结构体类型\n6:typedef:申明别名的方法  例:typedef 类型  别名（别名我们一般用大写，和系统的类型进行区分）\n7:结构体数组如果未初始化，不设值的会默认为0（整形的为0，字符型的为'\\0'，ascii码为0）\n8:如果结构体中有数组的话需要把数组散开看，再来拿出最大值，不能把整个数组一起看","source":"_posts/2015-03-09-c语言11-进程空间-结构.md","raw":"---\ntitle: c语言11-进程空间,结构\ndate: 2018-03-12 00:16:12\ncategories: 技术\ntags: c语言\n---\n## 进程空间\nree:释放空间的时候  保存指针的变量还是不变的，释放的只是保存数据的空间，所以我们还可以通过该指针变量来访问数据，可能该空间重新保存了别的数据，所以释放后我们也需要将指针变量设置为NULL，避免通过该指针非法访问导致系统崩溃\n\n申请，判空，使用，释放，置NULL\n\n在自定义方法里面申请栈空间返回地址时特别注意:栈里的空间不能返回，也就是说不能通过返回栈空间的地址的方式访问栈空间，但是堆空间是可以返回的，也就是说可以通过堆空间返回的地址来操作堆空间\n\n## 内存泄漏\n申请返回的指针，是我们操作堆空间唯一的标识，如果该标识丢了，那么就会造成内存泄漏\n\nmalloc和free:\n1. malloc的个数大雨free导致内存泄漏\n2. free大于malloc出现double free\n3. free和malloc必须配对使用  \n\n## 进程空间和程序之间的关系\n每个程序启动都会开辟一个新的进程空间，所以进程空间和程序是一对一的关系\n\n## 申请内存时易犯错的三点\n### malloc申请内存判断是否申请失败\n```c\nchar * ch=(char*)malloc(100);              \nif(NULL==ch)                               \n    return -1;                             \nfree(ch);     \n```\n\n### 服务器模型:未释放内存空间，重新开辟新的空间，导致内存泄漏\nwhile(1)\n{\n    char*ch=(char*)malloc(100);\n    printf(\"xxxxxxxxxxxxxxxx\\n\");\n    printf(\"xxxxxxxxxxxxxxxx\\n\");\n    printf(\"xxxxxxxxxxxxxxxx\\n\");\n    ch=(char*)malloc(100);//中途忘记已经是申请了导致重新开辟了一个新的空间\n    free(ch);//每次循环都只是释放了一个空间还剩下一个空间没有释放导致越来越多的内存泄漏（没有释放）\n}\n\n### 内存空间最好谁申请谁释放(非绝对)\n\n## 自实现栈空间模型的代码\n```c\n#include <stdio.h>\n\n//FILO  LIFO\n\n#define N   100\n\nstruct Stack\n{\n    char space[N];\n    int top;\n};\n\nstruct Stack  st = {{0},0};\n\nint isFull()  //满返真\n{\n    if(st.top == 100)\n        return 1;\n    else\n        return 0;\n}\n\nint isEmpty()     //空返真\n{\n    if(st.top == 0)\n        return 1;\n    else\n        return 0;\n}\n\nvoid push(char ch)\n{\n    st.space[st.top] = ch;\n    st.top++;\n}\n\nint pop()\n{\n    st.top--;\n    return st.space[st.top];\n}\n\nint main(void)\n{\n    char ch = 'a';\n    for(int i=0; i<26; i++)\n    {\n        if(!isFull())\n            push(ch++);\n    }\n\n    while(!isEmpty())\n        putchar(pop());\n\n    return 0;\n}\n```\n\n## 结构体\n### 使用情景\n结构体设计出来就是为了处理我们在一个情况下需要处理多种不同类型而设计出来的，可以自定义类型的方法\n\n### 内存对齐\n![内存对齐](内存对齐.png)\n\n### 结构体的几种定义方式\n1.无名构造体:\nstruct{}stu;:仅在本地使用，并且申明的时候必须带上变量名\n2.有名构造体:\nstruct 结构体名{}stu; 申明变量:struct 结构体名 变量名\n3.别名构造体类型:\ntypedef struct 结构体名{} 别名; 以后 别名=struct 结构体名\n\n## 小结\n1:我们定义的新类型，只要没有申明变量是步占空间的\n2:结构体的类型是 struct+结构体名，struct不能省悦\n3:凡是基本类型都可以先申明后初始化，或者直接在申明的时候初始化,凡是构造类型必须在申明的时候初始化，或者先申明然后对单独的每个“元素”单独初始化，例如:如果是二级数组在先申明后初始化应该对[][]的每个元素单独初始化\n4:切记，数组名是数组元素的首地址，是个常量，不能修改，所以我们对字符数组进行赋值的时候不能直接将字符串用=的符号进行复赋值（接收数据的变量是个指针（字符数组首元素的指针（常量）），应该用strcpy进行赋值操作\n5:结构体做形参，实参，返回值，接收值时，都是用结构体类型\n6:typedef:申明别名的方法  例:typedef 类型  别名（别名我们一般用大写，和系统的类型进行区分）\n7:结构体数组如果未初始化，不设值的会默认为0（整形的为0，字符型的为'\\0'，ascii码为0）\n8:如果结构体中有数组的话需要把数组散开看，再来拿出最大值，不能把整个数组一起看","slug":"2015-03-09-c语言11-进程空间-结构","published":1,"updated":"2018-03-11T16:41:15.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjc800046stwatysa9if","content":"<h2 id=\"进程空间\"><a href=\"#进程空间\" class=\"headerlink\" title=\"进程空间\"></a>进程空间</h2><p>ree:释放空间的时候  保存指针的变量还是不变的，释放的只是保存数据的空间，所以我们还可以通过该指针变量来访问数据，可能该空间重新保存了别的数据，所以释放后我们也需要将指针变量设置为NULL，避免通过该指针非法访问导致系统崩溃</p>\n<p>申请，判空，使用，释放，置NULL</p>\n<p>在自定义方法里面申请栈空间返回地址时特别注意:栈里的空间不能返回，也就是说不能通过返回栈空间的地址的方式访问栈空间，但是堆空间是可以返回的，也就是说可以通过堆空间返回的地址来操作堆空间</p>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>申请返回的指针，是我们操作堆空间唯一的标识，如果该标识丢了，那么就会造成内存泄漏</p>\n<p>malloc和free:</p>\n<ol>\n<li>malloc的个数大雨free导致内存泄漏</li>\n<li>free大于malloc出现double free</li>\n<li>free和malloc必须配对使用  </li>\n</ol>\n<h2 id=\"进程空间和程序之间的关系\"><a href=\"#进程空间和程序之间的关系\" class=\"headerlink\" title=\"进程空间和程序之间的关系\"></a>进程空间和程序之间的关系</h2><p>每个程序启动都会开辟一个新的进程空间，所以进程空间和程序是一对一的关系</p>\n<h2 id=\"申请内存时易犯错的三点\"><a href=\"#申请内存时易犯错的三点\" class=\"headerlink\" title=\"申请内存时易犯错的三点\"></a>申请内存时易犯错的三点</h2><h3 id=\"malloc申请内存判断是否申请失败\"><a href=\"#malloc申请内存判断是否申请失败\" class=\"headerlink\" title=\"malloc申请内存判断是否申请失败\"></a>malloc申请内存判断是否申请失败</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> * ch=(<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);              </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span>==ch)                               </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;                             </span><br><span class=\"line\"><span class=\"built_in\">free</span>(ch);</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务器模型-未释放内存空间，重新开辟新的空间，导致内存泄漏\"><a href=\"#服务器模型-未释放内存空间，重新开辟新的空间，导致内存泄漏\" class=\"headerlink\" title=\"服务器模型:未释放内存空间，重新开辟新的空间，导致内存泄漏\"></a>服务器模型:未释放内存空间，重新开辟新的空间，导致内存泄漏</h3><p>while(1)<br>{<br>    char<em>ch=(char</em>)malloc(100);<br>    printf(“xxxxxxxxxxxxxxxx\\n”);<br>    printf(“xxxxxxxxxxxxxxxx\\n”);<br>    printf(“xxxxxxxxxxxxxxxx\\n”);<br>    ch=(char*)malloc(100);//中途忘记已经是申请了导致重新开辟了一个新的空间<br>    free(ch);//每次循环都只是释放了一个空间还剩下一个空间没有释放导致越来越多的内存泄漏（没有释放）<br>}</p>\n<h3 id=\"内存空间最好谁申请谁释放-非绝对\"><a href=\"#内存空间最好谁申请谁释放-非绝对\" class=\"headerlink\" title=\"内存空间最好谁申请谁释放(非绝对)\"></a>内存空间最好谁申请谁释放(非绝对)</h3><h2 id=\"自实现栈空间模型的代码\"><a href=\"#自实现栈空间模型的代码\" class=\"headerlink\" title=\"自实现栈空间模型的代码\"></a>自实现栈空间模型的代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//FILO  LIFO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N   100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> space[N];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>  <span class=\"title\">st</span> = &#123;</span>&#123;<span class=\"number\">0</span>&#125;,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isFull</span><span class=\"params\">()</span>  <span class=\"comment\">//满返真</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(st.top == <span class=\"number\">100</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span>     <span class=\"comment\">//空返真</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(st.top == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st.space[st.top] = ch;</span><br><span class=\"line\">    st.top++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st.top--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> st.space[st.top];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">26</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isFull())</span><br><span class=\"line\">            push(ch++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!isEmpty())</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(pop());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><h3 id=\"使用情景\"><a href=\"#使用情景\" class=\"headerlink\" title=\"使用情景\"></a>使用情景</h3><p>结构体设计出来就是为了处理我们在一个情况下需要处理多种不同类型而设计出来的，可以自定义类型的方法</p>\n<h3 id=\"内存对齐\"><a href=\"#内存对齐\" class=\"headerlink\" title=\"内存对齐\"></a>内存对齐</h3><p><img src=\"/2018/03/12/2015-03-09-c语言11-进程空间-结构/内存对齐.png\" alt=\"内存对齐\"></p>\n<h3 id=\"结构体的几种定义方式\"><a href=\"#结构体的几种定义方式\" class=\"headerlink\" title=\"结构体的几种定义方式\"></a>结构体的几种定义方式</h3><p>1.无名构造体:<br>struct{}stu;:仅在本地使用，并且申明的时候必须带上变量名<br>2.有名构造体:<br>struct 结构体名{}stu; 申明变量:struct 结构体名 变量名<br>3.别名构造体类型:<br>typedef struct 结构体名{} 别名; 以后 别名=struct 结构体名</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>1:我们定义的新类型，只要没有申明变量是步占空间的<br>2:结构体的类型是 struct+结构体名，struct不能省悦<br>3:凡是基本类型都可以先申明后初始化，或者直接在申明的时候初始化,凡是构造类型必须在申明的时候初始化，或者先申明然后对单独的每个“元素”单独初始化，例如:如果是二级数组在先申明后初始化应该对[][]的每个元素单独初始化<br>4:切记，数组名是数组元素的首地址，是个常量，不能修改，所以我们对字符数组进行赋值的时候不能直接将字符串用=的符号进行复赋值（接收数据的变量是个指针（字符数组首元素的指针（常量）），应该用strcpy进行赋值操作<br>5:结构体做形参，实参，返回值，接收值时，都是用结构体类型<br>6:typedef:申明别名的方法  例:typedef 类型  别名（别名我们一般用大写，和系统的类型进行区分）<br>7:结构体数组如果未初始化，不设值的会默认为0（整形的为0，字符型的为’\\0’，ascii码为0）<br>8:如果结构体中有数组的话需要把数组散开看，再来拿出最大值，不能把整个数组一起看</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"进程空间\"><a href=\"#进程空间\" class=\"headerlink\" title=\"进程空间\"></a>进程空间</h2><p>ree:释放空间的时候  保存指针的变量还是不变的，释放的只是保存数据的空间，所以我们还可以通过该指针变量来访问数据，可能该空间重新保存了别的数据，所以释放后我们也需要将指针变量设置为NULL，避免通过该指针非法访问导致系统崩溃</p>\n<p>申请，判空，使用，释放，置NULL</p>\n<p>在自定义方法里面申请栈空间返回地址时特别注意:栈里的空间不能返回，也就是说不能通过返回栈空间的地址的方式访问栈空间，但是堆空间是可以返回的，也就是说可以通过堆空间返回的地址来操作堆空间</p>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>申请返回的指针，是我们操作堆空间唯一的标识，如果该标识丢了，那么就会造成内存泄漏</p>\n<p>malloc和free:</p>\n<ol>\n<li>malloc的个数大雨free导致内存泄漏</li>\n<li>free大于malloc出现double free</li>\n<li>free和malloc必须配对使用  </li>\n</ol>\n<h2 id=\"进程空间和程序之间的关系\"><a href=\"#进程空间和程序之间的关系\" class=\"headerlink\" title=\"进程空间和程序之间的关系\"></a>进程空间和程序之间的关系</h2><p>每个程序启动都会开辟一个新的进程空间，所以进程空间和程序是一对一的关系</p>\n<h2 id=\"申请内存时易犯错的三点\"><a href=\"#申请内存时易犯错的三点\" class=\"headerlink\" title=\"申请内存时易犯错的三点\"></a>申请内存时易犯错的三点</h2><h3 id=\"malloc申请内存判断是否申请失败\"><a href=\"#malloc申请内存判断是否申请失败\" class=\"headerlink\" title=\"malloc申请内存判断是否申请失败\"></a>malloc申请内存判断是否申请失败</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> * ch=(<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);              </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span>==ch)                               </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;                             </span><br><span class=\"line\"><span class=\"built_in\">free</span>(ch);</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务器模型-未释放内存空间，重新开辟新的空间，导致内存泄漏\"><a href=\"#服务器模型-未释放内存空间，重新开辟新的空间，导致内存泄漏\" class=\"headerlink\" title=\"服务器模型:未释放内存空间，重新开辟新的空间，导致内存泄漏\"></a>服务器模型:未释放内存空间，重新开辟新的空间，导致内存泄漏</h3><p>while(1)<br>{<br>    char<em>ch=(char</em>)malloc(100);<br>    printf(“xxxxxxxxxxxxxxxx\\n”);<br>    printf(“xxxxxxxxxxxxxxxx\\n”);<br>    printf(“xxxxxxxxxxxxxxxx\\n”);<br>    ch=(char*)malloc(100);//中途忘记已经是申请了导致重新开辟了一个新的空间<br>    free(ch);//每次循环都只是释放了一个空间还剩下一个空间没有释放导致越来越多的内存泄漏（没有释放）<br>}</p>\n<h3 id=\"内存空间最好谁申请谁释放-非绝对\"><a href=\"#内存空间最好谁申请谁释放-非绝对\" class=\"headerlink\" title=\"内存空间最好谁申请谁释放(非绝对)\"></a>内存空间最好谁申请谁释放(非绝对)</h3><h2 id=\"自实现栈空间模型的代码\"><a href=\"#自实现栈空间模型的代码\" class=\"headerlink\" title=\"自实现栈空间模型的代码\"></a>自实现栈空间模型的代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//FILO  LIFO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N   100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> space[N];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>  <span class=\"title\">st</span> = &#123;</span>&#123;<span class=\"number\">0</span>&#125;,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isFull</span><span class=\"params\">()</span>  <span class=\"comment\">//满返真</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(st.top == <span class=\"number\">100</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span>     <span class=\"comment\">//空返真</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(st.top == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st.space[st.top] = ch;</span><br><span class=\"line\">    st.top++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st.top--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> st.space[st.top];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">26</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isFull())</span><br><span class=\"line\">            push(ch++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!isEmpty())</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(pop());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><h3 id=\"使用情景\"><a href=\"#使用情景\" class=\"headerlink\" title=\"使用情景\"></a>使用情景</h3><p>结构体设计出来就是为了处理我们在一个情况下需要处理多种不同类型而设计出来的，可以自定义类型的方法</p>\n<h3 id=\"内存对齐\"><a href=\"#内存对齐\" class=\"headerlink\" title=\"内存对齐\"></a>内存对齐</h3><p><img src=\"/2018/03/12/2015-03-09-c语言11-进程空间-结构/内存对齐.png\" alt=\"内存对齐\"></p>\n<h3 id=\"结构体的几种定义方式\"><a href=\"#结构体的几种定义方式\" class=\"headerlink\" title=\"结构体的几种定义方式\"></a>结构体的几种定义方式</h3><p>1.无名构造体:<br>struct{}stu;:仅在本地使用，并且申明的时候必须带上变量名<br>2.有名构造体:<br>struct 结构体名{}stu; 申明变量:struct 结构体名 变量名<br>3.别名构造体类型:<br>typedef struct 结构体名{} 别名; 以后 别名=struct 结构体名</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>1:我们定义的新类型，只要没有申明变量是步占空间的<br>2:结构体的类型是 struct+结构体名，struct不能省悦<br>3:凡是基本类型都可以先申明后初始化，或者直接在申明的时候初始化,凡是构造类型必须在申明的时候初始化，或者先申明然后对单独的每个“元素”单独初始化，例如:如果是二级数组在先申明后初始化应该对[][]的每个元素单独初始化<br>4:切记，数组名是数组元素的首地址，是个常量，不能修改，所以我们对字符数组进行赋值的时候不能直接将字符串用=的符号进行复赋值（接收数据的变量是个指针（字符数组首元素的指针（常量）），应该用strcpy进行赋值操作<br>5:结构体做形参，实参，返回值，接收值时，都是用结构体类型<br>6:typedef:申明别名的方法  例:typedef 类型  别名（别名我们一般用大写，和系统的类型进行区分）<br>7:结构体数组如果未初始化，不设值的会默认为0（整形的为0，字符型的为’\\0’，ascii码为0）<br>8:如果结构体中有数组的话需要把数组散开看，再来拿出最大值，不能把整个数组一起看</p>\n"},{"title":"c语言3-优先级","date":"2018-03-11T15:32:22.000Z","_content":"\n## 运算表达式\n常让人混淆的表达式：\n1. 所有的常量表达式都是可以做判断的\n2. 3==3==3；得到的是0 就是两个判断\n3. 无论在if的时候判断的表达式有多长，判断的都是最左边的变量是为0还是1\n\n![优先级](优先级.jpg)\n\n\n## 例题: 判断是否是回文数\n```c\nlong long var;\nprintf(\"pls input num:\\n\");\nscanf(\"%lld\", &var);\n\nlong long sum = 0;\nlong long m = var;\n//倒置var循环12321   1 1232  12 123  3\nwhile (m) {\n    sum = m%10 + sum*10;\n    m /= 10;  // 循环条件\n}\nif(var == sum) // 判断输入var与倒置sum是否相等\n{\n    printf(\"%d是回文\\n\", var);\n}else {\n    printf(\"%d不是回文\\n\", var);\n}\n```","source":"_posts/2015-03-09-c语言3-优先级.md","raw":"---\ntitle: c语言3-优先级\ndate: 2018-03-11 23:32:22\ncategories: 技术\ntags: c语言\n---\n\n## 运算表达式\n常让人混淆的表达式：\n1. 所有的常量表达式都是可以做判断的\n2. 3==3==3；得到的是0 就是两个判断\n3. 无论在if的时候判断的表达式有多长，判断的都是最左边的变量是为0还是1\n\n![优先级](优先级.jpg)\n\n\n## 例题: 判断是否是回文数\n```c\nlong long var;\nprintf(\"pls input num:\\n\");\nscanf(\"%lld\", &var);\n\nlong long sum = 0;\nlong long m = var;\n//倒置var循环12321   1 1232  12 123  3\nwhile (m) {\n    sum = m%10 + sum*10;\n    m /= 10;  // 循环条件\n}\nif(var == sum) // 判断输入var与倒置sum是否相等\n{\n    printf(\"%d是回文\\n\", var);\n}else {\n    printf(\"%d不是回文\\n\", var);\n}\n```","slug":"2015-03-09-c语言3-优先级","published":1,"updated":"2018-03-11T16:40:22.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjcg00086stw7ukzgnoo","content":"<h2 id=\"运算表达式\"><a href=\"#运算表达式\" class=\"headerlink\" title=\"运算表达式\"></a>运算表达式</h2><p>常让人混淆的表达式：</p>\n<ol>\n<li>所有的常量表达式都是可以做判断的</li>\n<li>3==3==3；得到的是0 就是两个判断</li>\n<li>无论在if的时候判断的表达式有多长，判断的都是最左边的变量是为0还是1</li>\n</ol>\n<p><img src=\"/2018/03/11/2015-03-09-c语言3-优先级/优先级.jpg\" alt=\"优先级\"></p>\n<h2 id=\"例题-判断是否是回文数\"><a href=\"#例题-判断是否是回文数\" class=\"headerlink\" title=\"例题: 判断是否是回文数\"></a>例题: 判断是否是回文数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> var;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"pls input num:\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>, &amp;var);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> m = var;</span><br><span class=\"line\"><span class=\"comment\">//倒置var循环12321   1 1232  12 123  3</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (m) &#123;</span><br><span class=\"line\">    sum = m%<span class=\"number\">10</span> + sum*<span class=\"number\">10</span>;</span><br><span class=\"line\">    m /= <span class=\"number\">10</span>;  <span class=\"comment\">// 循环条件</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(var == sum) <span class=\"comment\">// 判断输入var与倒置sum是否相等</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d是回文\\n\"</span>, var);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d不是回文\\n\"</span>, var);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"运算表达式\"><a href=\"#运算表达式\" class=\"headerlink\" title=\"运算表达式\"></a>运算表达式</h2><p>常让人混淆的表达式：</p>\n<ol>\n<li>所有的常量表达式都是可以做判断的</li>\n<li>3==3==3；得到的是0 就是两个判断</li>\n<li>无论在if的时候判断的表达式有多长，判断的都是最左边的变量是为0还是1</li>\n</ol>\n<p><img src=\"/2018/03/11/2015-03-09-c语言3-优先级/优先级.jpg\" alt=\"优先级\"></p>\n<h2 id=\"例题-判断是否是回文数\"><a href=\"#例题-判断是否是回文数\" class=\"headerlink\" title=\"例题: 判断是否是回文数\"></a>例题: 判断是否是回文数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> var;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"pls input num:\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>, &amp;var);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> m = var;</span><br><span class=\"line\"><span class=\"comment\">//倒置var循环12321   1 1232  12 123  3</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (m) &#123;</span><br><span class=\"line\">    sum = m%<span class=\"number\">10</span> + sum*<span class=\"number\">10</span>;</span><br><span class=\"line\">    m /= <span class=\"number\">10</span>;  <span class=\"comment\">// 循环条件</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(var == sum) <span class=\"comment\">// 判断输入var与倒置sum是否相等</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d是回文\\n\"</span>, var);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d不是回文\\n\"</span>, var);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"c语言2-补码","date":"2018-03-11T15:16:39.000Z","_content":"\n## 流程图简要\n椭圆：开始/结束\n平行四边行：输入\n陵行：判断\n矩行：操作\n\n\n## 类型介绍\n备注：为什么正数数值范围都是2的多少次方减1：因为由于补码规则可知，同一个补码可能表示一个正数也可能表示一个负数，所以为了避免这种歧义，就规定了补码的最高位为符号位，这样以来一个补码就对应一个正数了，但是+0和-0都是0\n          比如：八位二进制的正数最大值是 1111 1111 = 2^8-1 (数列) 0111 1111 2^7-1\n\n\n## 命名规范\n\n## 物理基础\n1. cpu在运作时，读取内存数据，首先要指定存储单元的地址，就是要确定读写哪段数据。即要明确三件事\na. 存储单元地址（地址信息）\nb. 器件的选择，读or写（控制信息）\nc. 读写的数据（数据信息）\n2. 地址总线：cpu通过地址总线告诉内存我们需要操作指定的空间 \n3. 数据总线：cpu 通过数据总线实现与内存的数据交互\n4. 控制总线：cpu对其他硬件设备发出需要对其进行的操作（读/写）的命令\n\n![cpu对内存的读写操作详解](cpu对内存的读写操作详解.png)\n\n\n\n## 补码\n概念：在计算机系统中，数值一律用补码来表述或者存储，原因在于，可以将符号和数值域统一处理；同时加法和减法也可以统一处理此外，补码和原码的运算过程是相同的，不需要额外的硬件电路\n\n备注：\n1. 补码都是二进制，以及计算机下面的所有储存地址还是数据都是补码，为什么我们看到的不同，是因为我们的ide或者cpu进行过特殊处理，因为如果全部用二进制显示会得到一串我们很难分析的字符\n2. 原码都是十进制，所以将补码转化为源码其实就是将二进制转化为十进制\n3. 正数的源码就是他本身，负数的源码是”求反加一“，负数的源码求反码也是如此\n4. 补码解决了三件事情：\na. 解决了正负零的问题\nb. 解决了符号参加运算的问题\nc. 实现了减法，乘法，除法都变加法的问题\n\n![补码求原](补码求原.png)\n\n## ASCII码\nascii码的显示效果就是cpu操作显卡的结果\n例如:97是a的asscii码，转换成ascii码的时候需要先将97转换为补码(二进制)\n\n\n## 16进制\n我们保存16进制数据时其实是直接将16进制的数据保存到了内存中，不像十进制会进行补码操作，%x因为输出的是16进制，所以每次输出都要满4个字节，如果前面的数据为0他是省略的，但是并不表示他是没有的，如果前面位数不够，会根据符号位来进行补位操作，如果符号位是0就把前面的都补0知道补满为止\n例子： short类型  0x8756   用%x输出是ffff8756\n理解：1：首先我们需要确认数据的类型，因为数据的类型是short，（如果是int就没必要补位了，因为肯定是正数，最高位（符号位）是第32位，是0，省略了） ，所以我们取到short的最高的符号位（第16位/2个字节），就是8的补码的最高位，1000，所以前面是1那么前面全部补1，知道补满32位 然后每四个1就是一个f（因为是16进制输出），所以就得到\n1111 1111 1111  1111 所以就得到ffff8756\n\n## 总结\n根据十六进制来保存数据时，其实是直接将16进制保存到内存中，不像10进制会进行补码操作\n补位补位步骤:\n1. 确定类型\n2. 根据类型确定最高位（符号位）\n3. 根据符号位来进行补位，知道补满（根据我们是要输出16进制还是8进制还是10进制来判断）为止（如果是1则补1，如果是0则补0）","source":"_posts/2015-03-09-c语言2-补码.md","raw":"---\ntitle: c语言2-补码\ndate: 2018-03-11 23:16:39\ncategories: 技术\ntags: c语言\n---\n\n## 流程图简要\n椭圆：开始/结束\n平行四边行：输入\n陵行：判断\n矩行：操作\n\n\n## 类型介绍\n备注：为什么正数数值范围都是2的多少次方减1：因为由于补码规则可知，同一个补码可能表示一个正数也可能表示一个负数，所以为了避免这种歧义，就规定了补码的最高位为符号位，这样以来一个补码就对应一个正数了，但是+0和-0都是0\n          比如：八位二进制的正数最大值是 1111 1111 = 2^8-1 (数列) 0111 1111 2^7-1\n\n\n## 命名规范\n\n## 物理基础\n1. cpu在运作时，读取内存数据，首先要指定存储单元的地址，就是要确定读写哪段数据。即要明确三件事\na. 存储单元地址（地址信息）\nb. 器件的选择，读or写（控制信息）\nc. 读写的数据（数据信息）\n2. 地址总线：cpu通过地址总线告诉内存我们需要操作指定的空间 \n3. 数据总线：cpu 通过数据总线实现与内存的数据交互\n4. 控制总线：cpu对其他硬件设备发出需要对其进行的操作（读/写）的命令\n\n![cpu对内存的读写操作详解](cpu对内存的读写操作详解.png)\n\n\n\n## 补码\n概念：在计算机系统中，数值一律用补码来表述或者存储，原因在于，可以将符号和数值域统一处理；同时加法和减法也可以统一处理此外，补码和原码的运算过程是相同的，不需要额外的硬件电路\n\n备注：\n1. 补码都是二进制，以及计算机下面的所有储存地址还是数据都是补码，为什么我们看到的不同，是因为我们的ide或者cpu进行过特殊处理，因为如果全部用二进制显示会得到一串我们很难分析的字符\n2. 原码都是十进制，所以将补码转化为源码其实就是将二进制转化为十进制\n3. 正数的源码就是他本身，负数的源码是”求反加一“，负数的源码求反码也是如此\n4. 补码解决了三件事情：\na. 解决了正负零的问题\nb. 解决了符号参加运算的问题\nc. 实现了减法，乘法，除法都变加法的问题\n\n![补码求原](补码求原.png)\n\n## ASCII码\nascii码的显示效果就是cpu操作显卡的结果\n例如:97是a的asscii码，转换成ascii码的时候需要先将97转换为补码(二进制)\n\n\n## 16进制\n我们保存16进制数据时其实是直接将16进制的数据保存到了内存中，不像十进制会进行补码操作，%x因为输出的是16进制，所以每次输出都要满4个字节，如果前面的数据为0他是省略的，但是并不表示他是没有的，如果前面位数不够，会根据符号位来进行补位操作，如果符号位是0就把前面的都补0知道补满为止\n例子： short类型  0x8756   用%x输出是ffff8756\n理解：1：首先我们需要确认数据的类型，因为数据的类型是short，（如果是int就没必要补位了，因为肯定是正数，最高位（符号位）是第32位，是0，省略了） ，所以我们取到short的最高的符号位（第16位/2个字节），就是8的补码的最高位，1000，所以前面是1那么前面全部补1，知道补满32位 然后每四个1就是一个f（因为是16进制输出），所以就得到\n1111 1111 1111  1111 所以就得到ffff8756\n\n## 总结\n根据十六进制来保存数据时，其实是直接将16进制保存到内存中，不像10进制会进行补码操作\n补位补位步骤:\n1. 确定类型\n2. 根据类型确定最高位（符号位）\n3. 根据符号位来进行补位，知道补满（根据我们是要输出16进制还是8进制还是10进制来判断）为止（如果是1则补1，如果是0则补0）","slug":"2015-03-09-c语言2-补码","published":1,"updated":"2018-03-11T16:40:04.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjci00096stwqifdd7gj","content":"<h2 id=\"流程图简要\"><a href=\"#流程图简要\" class=\"headerlink\" title=\"流程图简要\"></a>流程图简要</h2><p>椭圆：开始/结束<br>平行四边行：输入<br>陵行：判断<br>矩行：操作</p>\n<h2 id=\"类型介绍\"><a href=\"#类型介绍\" class=\"headerlink\" title=\"类型介绍\"></a>类型介绍</h2><p>备注：为什么正数数值范围都是2的多少次方减1：因为由于补码规则可知，同一个补码可能表示一个正数也可能表示一个负数，所以为了避免这种歧义，就规定了补码的最高位为符号位，这样以来一个补码就对应一个正数了，但是+0和-0都是0<br>          比如：八位二进制的正数最大值是 1111 1111 = 2^8-1 (数列) 0111 1111 2^7-1</p>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><h2 id=\"物理基础\"><a href=\"#物理基础\" class=\"headerlink\" title=\"物理基础\"></a>物理基础</h2><ol>\n<li>cpu在运作时，读取内存数据，首先要指定存储单元的地址，就是要确定读写哪段数据。即要明确三件事<br>a. 存储单元地址（地址信息）<br>b. 器件的选择，读or写（控制信息）<br>c. 读写的数据（数据信息）</li>\n<li>地址总线：cpu通过地址总线告诉内存我们需要操作指定的空间 </li>\n<li>数据总线：cpu 通过数据总线实现与内存的数据交互</li>\n<li>控制总线：cpu对其他硬件设备发出需要对其进行的操作（读/写）的命令</li>\n</ol>\n<p><img src=\"/2018/03/11/2015-03-09-c语言2-补码/cpu对内存的读写操作详解.png\" alt=\"cpu对内存的读写操作详解\"></p>\n<h2 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h2><p>概念：在计算机系统中，数值一律用补码来表述或者存储，原因在于，可以将符号和数值域统一处理；同时加法和减法也可以统一处理此外，补码和原码的运算过程是相同的，不需要额外的硬件电路</p>\n<p>备注：</p>\n<ol>\n<li>补码都是二进制，以及计算机下面的所有储存地址还是数据都是补码，为什么我们看到的不同，是因为我们的ide或者cpu进行过特殊处理，因为如果全部用二进制显示会得到一串我们很难分析的字符</li>\n<li>原码都是十进制，所以将补码转化为源码其实就是将二进制转化为十进制</li>\n<li>正数的源码就是他本身，负数的源码是”求反加一“，负数的源码求反码也是如此</li>\n<li>补码解决了三件事情：<br>a. 解决了正负零的问题<br>b. 解决了符号参加运算的问题<br>c. 实现了减法，乘法，除法都变加法的问题</li>\n</ol>\n<p><img src=\"/2018/03/11/2015-03-09-c语言2-补码/补码求原.png\" alt=\"补码求原\"></p>\n<h2 id=\"ASCII码\"><a href=\"#ASCII码\" class=\"headerlink\" title=\"ASCII码\"></a>ASCII码</h2><p>ascii码的显示效果就是cpu操作显卡的结果<br>例如:97是a的asscii码，转换成ascii码的时候需要先将97转换为补码(二进制)</p>\n<h2 id=\"16进制\"><a href=\"#16进制\" class=\"headerlink\" title=\"16进制\"></a>16进制</h2><p>我们保存16进制数据时其实是直接将16进制的数据保存到了内存中，不像十进制会进行补码操作，%x因为输出的是16进制，所以每次输出都要满4个字节，如果前面的数据为0他是省略的，但是并不表示他是没有的，如果前面位数不够，会根据符号位来进行补位操作，如果符号位是0就把前面的都补0知道补满为止<br>例子： short类型  0x8756   用%x输出是ffff8756<br>理解：1：首先我们需要确认数据的类型，因为数据的类型是short，（如果是int就没必要补位了，因为肯定是正数，最高位（符号位）是第32位，是0，省略了） ，所以我们取到short的最高的符号位（第16位/2个字节），就是8的补码的最高位，1000，所以前面是1那么前面全部补1，知道补满32位 然后每四个1就是一个f（因为是16进制输出），所以就得到<br>1111 1111 1111  1111 所以就得到ffff8756</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>根据十六进制来保存数据时，其实是直接将16进制保存到内存中，不像10进制会进行补码操作<br>补位补位步骤:</p>\n<ol>\n<li>确定类型</li>\n<li>根据类型确定最高位（符号位）</li>\n<li>根据符号位来进行补位，知道补满（根据我们是要输出16进制还是8进制还是10进制来判断）为止（如果是1则补1，如果是0则补0）</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"流程图简要\"><a href=\"#流程图简要\" class=\"headerlink\" title=\"流程图简要\"></a>流程图简要</h2><p>椭圆：开始/结束<br>平行四边行：输入<br>陵行：判断<br>矩行：操作</p>\n<h2 id=\"类型介绍\"><a href=\"#类型介绍\" class=\"headerlink\" title=\"类型介绍\"></a>类型介绍</h2><p>备注：为什么正数数值范围都是2的多少次方减1：因为由于补码规则可知，同一个补码可能表示一个正数也可能表示一个负数，所以为了避免这种歧义，就规定了补码的最高位为符号位，这样以来一个补码就对应一个正数了，但是+0和-0都是0<br>          比如：八位二进制的正数最大值是 1111 1111 = 2^8-1 (数列) 0111 1111 2^7-1</p>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><h2 id=\"物理基础\"><a href=\"#物理基础\" class=\"headerlink\" title=\"物理基础\"></a>物理基础</h2><ol>\n<li>cpu在运作时，读取内存数据，首先要指定存储单元的地址，就是要确定读写哪段数据。即要明确三件事<br>a. 存储单元地址（地址信息）<br>b. 器件的选择，读or写（控制信息）<br>c. 读写的数据（数据信息）</li>\n<li>地址总线：cpu通过地址总线告诉内存我们需要操作指定的空间 </li>\n<li>数据总线：cpu 通过数据总线实现与内存的数据交互</li>\n<li>控制总线：cpu对其他硬件设备发出需要对其进行的操作（读/写）的命令</li>\n</ol>\n<p><img src=\"/2018/03/11/2015-03-09-c语言2-补码/cpu对内存的读写操作详解.png\" alt=\"cpu对内存的读写操作详解\"></p>\n<h2 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h2><p>概念：在计算机系统中，数值一律用补码来表述或者存储，原因在于，可以将符号和数值域统一处理；同时加法和减法也可以统一处理此外，补码和原码的运算过程是相同的，不需要额外的硬件电路</p>\n<p>备注：</p>\n<ol>\n<li>补码都是二进制，以及计算机下面的所有储存地址还是数据都是补码，为什么我们看到的不同，是因为我们的ide或者cpu进行过特殊处理，因为如果全部用二进制显示会得到一串我们很难分析的字符</li>\n<li>原码都是十进制，所以将补码转化为源码其实就是将二进制转化为十进制</li>\n<li>正数的源码就是他本身，负数的源码是”求反加一“，负数的源码求反码也是如此</li>\n<li>补码解决了三件事情：<br>a. 解决了正负零的问题<br>b. 解决了符号参加运算的问题<br>c. 实现了减法，乘法，除法都变加法的问题</li>\n</ol>\n<p><img src=\"/2018/03/11/2015-03-09-c语言2-补码/补码求原.png\" alt=\"补码求原\"></p>\n<h2 id=\"ASCII码\"><a href=\"#ASCII码\" class=\"headerlink\" title=\"ASCII码\"></a>ASCII码</h2><p>ascii码的显示效果就是cpu操作显卡的结果<br>例如:97是a的asscii码，转换成ascii码的时候需要先将97转换为补码(二进制)</p>\n<h2 id=\"16进制\"><a href=\"#16进制\" class=\"headerlink\" title=\"16进制\"></a>16进制</h2><p>我们保存16进制数据时其实是直接将16进制的数据保存到了内存中，不像十进制会进行补码操作，%x因为输出的是16进制，所以每次输出都要满4个字节，如果前面的数据为0他是省略的，但是并不表示他是没有的，如果前面位数不够，会根据符号位来进行补位操作，如果符号位是0就把前面的都补0知道补满为止<br>例子： short类型  0x8756   用%x输出是ffff8756<br>理解：1：首先我们需要确认数据的类型，因为数据的类型是short，（如果是int就没必要补位了，因为肯定是正数，最高位（符号位）是第32位，是0，省略了） ，所以我们取到short的最高的符号位（第16位/2个字节），就是8的补码的最高位，1000，所以前面是1那么前面全部补1，知道补满32位 然后每四个1就是一个f（因为是16进制输出），所以就得到<br>1111 1111 1111  1111 所以就得到ffff8756</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>根据十六进制来保存数据时，其实是直接将16进制保存到内存中，不像10进制会进行补码操作<br>补位补位步骤:</p>\n<ol>\n<li>确定类型</li>\n<li>根据类型确定最高位（符号位）</li>\n<li>根据符号位来进行补位，知道补满（根据我们是要输出16进制还是8进制还是10进制来判断）为止（如果是1则补1，如果是0则补0）</li>\n</ol>\n"},{"title":"c语言4-程序的设计结构","date":"2018-03-11T15:41:56.000Z","_content":"\n## 程序的设计结构\ndo while的特点：先做处理再判断，常用于登录的一系列验证\nfor的特点：先加加索引在判断\nbreak：结束当前循环（相对break最里面的）\ncontinue：跳出当前循环的这次循环（相对于continue最里面的）\nreturn：结束所有循环，以及释放该方法所占的空间（表示所处的函数结束）\n","source":"_posts/2015-03-09-c语言4-程序的设计结构.md","raw":"---\ntitle: c语言4-程序的设计结构\ndate: 2018-03-11 23:41:56\ncategories: 技术\ntags: c语言\n---\n\n## 程序的设计结构\ndo while的特点：先做处理再判断，常用于登录的一系列验证\nfor的特点：先加加索引在判断\nbreak：结束当前循环（相对break最里面的）\ncontinue：跳出当前循环的这次循环（相对于continue最里面的）\nreturn：结束所有循环，以及释放该方法所占的空间（表示所处的函数结束）\n","slug":"2015-03-09-c语言4-程序的设计结构","published":1,"updated":"2018-03-11T16:40:54.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjck000a6stwz45jxww2","content":"<h2 id=\"程序的设计结构\"><a href=\"#程序的设计结构\" class=\"headerlink\" title=\"程序的设计结构\"></a>程序的设计结构</h2><p>do while的特点：先做处理再判断，常用于登录的一系列验证<br>for的特点：先加加索引在判断<br>break：结束当前循环（相对break最里面的）<br>continue：跳出当前循环的这次循环（相对于continue最里面的）<br>return：结束所有循环，以及释放该方法所占的空间（表示所处的函数结束）</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"程序的设计结构\"><a href=\"#程序的设计结构\" class=\"headerlink\" title=\"程序的设计结构\"></a>程序的设计结构</h2><p>do while的特点：先做处理再判断，常用于登录的一系列验证<br>for的特点：先加加索引在判断<br>break：结束当前循环（相对break最里面的）<br>continue：跳出当前循环的这次循环（相对于continue最里面的）<br>return：结束所有循环，以及释放该方法所占的空间（表示所处的函数结束）</p>\n"},{"title":"c语言7-指针","date":"2018-03-11T15:41:56.000Z","_content":"\n## 内存\n我们计算机的所有内存都是线性的，不管是一维数组还是二维数组在内存中都是线性的，内存线性是物理基础（不要问我）\n\n机器的不同，导致指针类型的大小不同，32位机的指针类型是4个字节，64位机的指针大小是8个字节，而位数的多少又影响到地址总线的宽度，导致最大支持的内存大小（内存条），所以32位机支持的最大的内存条是4g，并且4g有一部分被其他硬件占用，所以剩3g多来给用户使用，地址总线越宽，同一时间传输的地址数据就越多，从而达到同一时间可以让跟多的软件来访问内存，起到同一时间可以运行更多的软件\n\n## 十六进制的解释\n一个十六进制位数表示4个二进制位数，我们为一个变量赋一个16进制数和一个10进制数的表达方式是一样的，只不过打出的数据不同，\n十六进制的读操作：\n因为我们的电脑是4个二进制对应一位16进制的数，所以我们内存里的一个存储单元可以存储两位16进制的数，并且我们根据指针读数据都是从低位向高位读取，并且每个变量保存的都是首地址，所以:\n```c\ninta=0x0355;\nint*a1=(int*)&a;//355\nchar*a2=(char*)&a;//55  拿到低位地址 根据类型（寻址能力）向上找到数据后用数据总线返回cpu\nshort*a3=(short*)&a;//355\n```\n0会被忽略\n\n## 从大类型转换为小类型数据截取的解释\n我们的数据在内存条中都是线性存储的并且占时的内存大小是从大到小的  但是我们此时的首地址是不变的，只是寻址能能力变化了  例如  int  a=0x12345678 char p=(char)a   printf(\"p=%x\"); p=78\n\n## 指针和地址的区别\n指针是一个有类型的地址，所以我们可以根据地址来设置地址偏移来获取数据\n备注:我们变量保存的都是首地址（当前数据空间最小的地址），然后根据数据类型来去从首地址拿指定个数的空间数据（因为现在我首地址和类型（空间个数）和每个空间的大小（8位）都确定了 所以我们可以按照规律取出数据）\n\n*：根据地址取内容  前提要有地址 \n&：根据变量取地址，如果对象是数组的话我们根据他取到的是数组的整体\n\n## 自定义地址(危险)\n直接为一个指针变量赋一个我们自己写的值的画很危险，因为我们随机写的地址可能是系统内核占用的，所以可能影响到系统，所以我们申请内存一般都是需要系统帮我申请，而不是自己随机写地址，一般4g的内存的话 0~3g为用户内存，3g~4g为系统内存，所以3g~4g的地址我们是不能申请的\n\n## 同类型数据加减的问题\n同类型相减等于相隔空格数，基本类型除外\n\n## 数组和指针的关系\n数组名是个常量  不能修改 不能进行加减计算\n*p++ 先算++ 再去值\n一级数组和指针的关系：a+1表示\n\n## 数组的首地址和数组元素的首地址之间的关系\n\"指针\"加数值，加的是该对象对应的数组的步长\n数组的整体和元素性：对数组加上&就是表述数组的整体性\n```c\nintarr[3][4]={1,2,3,4,10,20,30,40,100,200,300,400}; //T arr[3]\nprintf(\"arr=%p\\n\",arr+1);//arr的数组的步长为int[4]所以加的是int[4]的字节大小\nprintf(\"&arr=%p\\n\",&arr+1);//表示数组的整体，所以步长为整个数组，所以加的是整个数组的长度\nprintf(\"&arr[0]=%p\\n\",arr[0]+1);//arr[0]这里不是表示地址 而是取值 不考虑\nprintf(\"&arr[0]=%p\\n\",&arr[0]+1);//&arr的数组的步长为int[4]，所以加的是int[4]的字节大小\nintarr[5]={10,20,30,40,50}; \nprintf(\"arr[0]=%p\\n\",arr[0]);//这里是直接取值  不是指针 不考虑 直接加一\nprintf(\"&arr[0]=%p\\n\",&arr[0]);//&arr的数组的步长为int所以加上int类型大小\nprintf(\"arr[0]+1=%p\\n\",arr[0]+1);//\n这里是直接取值  不是指针 不考虑 直接加一\nprintf(\"&arr[0]+1=%p\\n\",&arr[0]+1);//\n&arr的数组的步长为int所以加上int类型大小\nprintf(\"&arr+1=%p\\n\",&arr+1);//&考虑的是整体性 直接加上int[5]的类型大小\nprintf(\"&arr[0]=%p\\n\",&arr[0]);//&arr[0]的数组的步长为int 所以直接加int\nprintf(\"&arr+1=%p\\n\",&arr+1);//整体  直接加int[4]\n```\n\n## 指针类型变量的二义性\n```c\nint * p1=&a;   //p1：表示的是a的地址；&p1表示的是p1变量本身的地址\n```\n\n## 根据指针偏移遍历集合的方法\n```c\nint arr[5]={10,20,30,40,50};\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",arr[i]);\nprintf(\"--------------\\n\");\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",i[arr]);\nprintf(\"--------------\\n\");\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",*(arr+i));//arr+iarr的类型为int所以偏移int的i位\nprintf(\"--------------\\n\");\nint*p=&arr;\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",*p++);//先算p++结果为*p后++\n```\na[i]=*(a+i)\n\n*也起到降级别的能力\n\n![指针偏移法](指针偏移法.png)","source":"_posts/2015-03-09-c语言7-指针.md","raw":"---\ntitle: c语言7-指针\ndate: 2018-03-11 23:41:56\ncategories: 技术\ntags: c语言\n---\n\n## 内存\n我们计算机的所有内存都是线性的，不管是一维数组还是二维数组在内存中都是线性的，内存线性是物理基础（不要问我）\n\n机器的不同，导致指针类型的大小不同，32位机的指针类型是4个字节，64位机的指针大小是8个字节，而位数的多少又影响到地址总线的宽度，导致最大支持的内存大小（内存条），所以32位机支持的最大的内存条是4g，并且4g有一部分被其他硬件占用，所以剩3g多来给用户使用，地址总线越宽，同一时间传输的地址数据就越多，从而达到同一时间可以让跟多的软件来访问内存，起到同一时间可以运行更多的软件\n\n## 十六进制的解释\n一个十六进制位数表示4个二进制位数，我们为一个变量赋一个16进制数和一个10进制数的表达方式是一样的，只不过打出的数据不同，\n十六进制的读操作：\n因为我们的电脑是4个二进制对应一位16进制的数，所以我们内存里的一个存储单元可以存储两位16进制的数，并且我们根据指针读数据都是从低位向高位读取，并且每个变量保存的都是首地址，所以:\n```c\ninta=0x0355;\nint*a1=(int*)&a;//355\nchar*a2=(char*)&a;//55  拿到低位地址 根据类型（寻址能力）向上找到数据后用数据总线返回cpu\nshort*a3=(short*)&a;//355\n```\n0会被忽略\n\n## 从大类型转换为小类型数据截取的解释\n我们的数据在内存条中都是线性存储的并且占时的内存大小是从大到小的  但是我们此时的首地址是不变的，只是寻址能能力变化了  例如  int  a=0x12345678 char p=(char)a   printf(\"p=%x\"); p=78\n\n## 指针和地址的区别\n指针是一个有类型的地址，所以我们可以根据地址来设置地址偏移来获取数据\n备注:我们变量保存的都是首地址（当前数据空间最小的地址），然后根据数据类型来去从首地址拿指定个数的空间数据（因为现在我首地址和类型（空间个数）和每个空间的大小（8位）都确定了 所以我们可以按照规律取出数据）\n\n*：根据地址取内容  前提要有地址 \n&：根据变量取地址，如果对象是数组的话我们根据他取到的是数组的整体\n\n## 自定义地址(危险)\n直接为一个指针变量赋一个我们自己写的值的画很危险，因为我们随机写的地址可能是系统内核占用的，所以可能影响到系统，所以我们申请内存一般都是需要系统帮我申请，而不是自己随机写地址，一般4g的内存的话 0~3g为用户内存，3g~4g为系统内存，所以3g~4g的地址我们是不能申请的\n\n## 同类型数据加减的问题\n同类型相减等于相隔空格数，基本类型除外\n\n## 数组和指针的关系\n数组名是个常量  不能修改 不能进行加减计算\n*p++ 先算++ 再去值\n一级数组和指针的关系：a+1表示\n\n## 数组的首地址和数组元素的首地址之间的关系\n\"指针\"加数值，加的是该对象对应的数组的步长\n数组的整体和元素性：对数组加上&就是表述数组的整体性\n```c\nintarr[3][4]={1,2,3,4,10,20,30,40,100,200,300,400}; //T arr[3]\nprintf(\"arr=%p\\n\",arr+1);//arr的数组的步长为int[4]所以加的是int[4]的字节大小\nprintf(\"&arr=%p\\n\",&arr+1);//表示数组的整体，所以步长为整个数组，所以加的是整个数组的长度\nprintf(\"&arr[0]=%p\\n\",arr[0]+1);//arr[0]这里不是表示地址 而是取值 不考虑\nprintf(\"&arr[0]=%p\\n\",&arr[0]+1);//&arr的数组的步长为int[4]，所以加的是int[4]的字节大小\nintarr[5]={10,20,30,40,50}; \nprintf(\"arr[0]=%p\\n\",arr[0]);//这里是直接取值  不是指针 不考虑 直接加一\nprintf(\"&arr[0]=%p\\n\",&arr[0]);//&arr的数组的步长为int所以加上int类型大小\nprintf(\"arr[0]+1=%p\\n\",arr[0]+1);//\n这里是直接取值  不是指针 不考虑 直接加一\nprintf(\"&arr[0]+1=%p\\n\",&arr[0]+1);//\n&arr的数组的步长为int所以加上int类型大小\nprintf(\"&arr+1=%p\\n\",&arr+1);//&考虑的是整体性 直接加上int[5]的类型大小\nprintf(\"&arr[0]=%p\\n\",&arr[0]);//&arr[0]的数组的步长为int 所以直接加int\nprintf(\"&arr+1=%p\\n\",&arr+1);//整体  直接加int[4]\n```\n\n## 指针类型变量的二义性\n```c\nint * p1=&a;   //p1：表示的是a的地址；&p1表示的是p1变量本身的地址\n```\n\n## 根据指针偏移遍历集合的方法\n```c\nint arr[5]={10,20,30,40,50};\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",arr[i]);\nprintf(\"--------------\\n\");\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",i[arr]);\nprintf(\"--------------\\n\");\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",*(arr+i));//arr+iarr的类型为int所以偏移int的i位\nprintf(\"--------------\\n\");\nint*p=&arr;\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",*p++);//先算p++结果为*p后++\n```\na[i]=*(a+i)\n\n*也起到降级别的能力\n\n![指针偏移法](指针偏移法.png)","slug":"2015-03-09-c语言7-指针","published":1,"updated":"2018-03-11T16:41:00.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjcs000e6stwo6u6mvsv","content":"<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h2><p>我们计算机的所有内存都是线性的，不管是一维数组还是二维数组在内存中都是线性的，内存线性是物理基础（不要问我）</p>\n<p>机器的不同，导致指针类型的大小不同，32位机的指针类型是4个字节，64位机的指针大小是8个字节，而位数的多少又影响到地址总线的宽度，导致最大支持的内存大小（内存条），所以32位机支持的最大的内存条是4g，并且4g有一部分被其他硬件占用，所以剩3g多来给用户使用，地址总线越宽，同一时间传输的地址数据就越多，从而达到同一时间可以让跟多的软件来访问内存，起到同一时间可以运行更多的软件</p>\n<h2 id=\"十六进制的解释\"><a href=\"#十六进制的解释\" class=\"headerlink\" title=\"十六进制的解释\"></a>十六进制的解释</h2><p>一个十六进制位数表示4个二进制位数，我们为一个变量赋一个16进制数和一个10进制数的表达方式是一样的，只不过打出的数据不同，<br>十六进制的读操作：<br>因为我们的电脑是4个二进制对应一位16进制的数，所以我们内存里的一个存储单元可以存储两位16进制的数，并且我们根据指针读数据都是从低位向高位读取，并且每个变量保存的都是首地址，所以:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inta=<span class=\"number\">0x0355</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>*a1=(<span class=\"keyword\">int</span>*)&amp;a;<span class=\"comment\">//355</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>*a2=(<span class=\"keyword\">char</span>*)&amp;a;<span class=\"comment\">//55  拿到低位地址 根据类型（寻址能力）向上找到数据后用数据总线返回cpu</span></span><br><span class=\"line\"><span class=\"keyword\">short</span>*a3=(<span class=\"keyword\">short</span>*)&amp;a;<span class=\"comment\">//355</span></span><br></pre></td></tr></table></figure></p>\n<p>0会被忽略</p>\n<h2 id=\"从大类型转换为小类型数据截取的解释\"><a href=\"#从大类型转换为小类型数据截取的解释\" class=\"headerlink\" title=\"从大类型转换为小类型数据截取的解释\"></a>从大类型转换为小类型数据截取的解释</h2><p>我们的数据在内存条中都是线性存储的并且占时的内存大小是从大到小的  但是我们此时的首地址是不变的，只是寻址能能力变化了  例如  int  a=0x12345678 char p=(char)a   printf(“p=%x”); p=78</p>\n<h2 id=\"指针和地址的区别\"><a href=\"#指针和地址的区别\" class=\"headerlink\" title=\"指针和地址的区别\"></a>指针和地址的区别</h2><p>指针是一个有类型的地址，所以我们可以根据地址来设置地址偏移来获取数据<br>备注:我们变量保存的都是首地址（当前数据空间最小的地址），然后根据数据类型来去从首地址拿指定个数的空间数据（因为现在我首地址和类型（空间个数）和每个空间的大小（8位）都确定了 所以我们可以按照规律取出数据）</p>\n<p>*：根据地址取内容  前提要有地址<br>&amp;：根据变量取地址，如果对象是数组的话我们根据他取到的是数组的整体</p>\n<h2 id=\"自定义地址-危险\"><a href=\"#自定义地址-危险\" class=\"headerlink\" title=\"自定义地址(危险)\"></a>自定义地址(危险)</h2><p>直接为一个指针变量赋一个我们自己写的值的画很危险，因为我们随机写的地址可能是系统内核占用的，所以可能影响到系统，所以我们申请内存一般都是需要系统帮我申请，而不是自己随机写地址，一般4g的内存的话 0~3g为用户内存，3g~4g为系统内存，所以3g~4g的地址我们是不能申请的</p>\n<h2 id=\"同类型数据加减的问题\"><a href=\"#同类型数据加减的问题\" class=\"headerlink\" title=\"同类型数据加减的问题\"></a>同类型数据加减的问题</h2><p>同类型相减等于相隔空格数，基本类型除外</p>\n<h2 id=\"数组和指针的关系\"><a href=\"#数组和指针的关系\" class=\"headerlink\" title=\"数组和指针的关系\"></a>数组和指针的关系</h2><p>数组名是个常量  不能修改 不能进行加减计算<br>*p++ 先算++ 再去值<br>一级数组和指针的关系：a+1表示</p>\n<h2 id=\"数组的首地址和数组元素的首地址之间的关系\"><a href=\"#数组的首地址和数组元素的首地址之间的关系\" class=\"headerlink\" title=\"数组的首地址和数组元素的首地址之间的关系\"></a>数组的首地址和数组元素的首地址之间的关系</h2><p>“指针”加数值，加的是该对象对应的数组的步长<br>数组的整体和元素性：对数组加上&amp;就是表述数组的整体性<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intarr[<span class=\"number\">3</span>][<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>&#125;; <span class=\"comment\">//T arr[3]</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"arr=%p\\n\"</span>,arr+<span class=\"number\">1</span>);<span class=\"comment\">//arr的数组的步长为int[4]所以加的是int[4]的字节大小</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr=%p\\n\"</span>,&amp;arr+<span class=\"number\">1</span>);<span class=\"comment\">//表示数组的整体，所以步长为整个数组，所以加的是整个数组的长度</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//arr[0]这里不是表示地址 而是取值 不考虑</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//&amp;arr的数组的步长为int[4]，所以加的是int[4]的字节大小</span></span><br><span class=\"line\">intarr[<span class=\"number\">5</span>]=&#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;; </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"arr[0]=%p\\n\"</span>,arr[<span class=\"number\">0</span>]);<span class=\"comment\">//这里是直接取值  不是指针 不考虑 直接加一</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]);<span class=\"comment\">//&amp;arr的数组的步长为int所以加上int类型大小</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"arr[0]+1=%p\\n\"</span>,arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//</span></span><br><span class=\"line\">这里是直接取值  不是指针 不考虑 直接加一</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]+1=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//</span></span><br><span class=\"line\">&amp;arr的数组的步长为<span class=\"keyword\">int</span>所以加上<span class=\"keyword\">int</span>类型大小</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr+1=%p\\n\"</span>,&amp;arr+<span class=\"number\">1</span>);<span class=\"comment\">//&amp;考虑的是整体性 直接加上int[5]的类型大小</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]);<span class=\"comment\">//&amp;arr[0]的数组的步长为int 所以直接加int</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr+1=%p\\n\"</span>,&amp;arr+<span class=\"number\">1</span>);<span class=\"comment\">//整体  直接加int[4]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"指针类型变量的二义性\"><a href=\"#指针类型变量的二义性\" class=\"headerlink\" title=\"指针类型变量的二义性\"></a>指针类型变量的二义性</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> * p1=&amp;a;   <span class=\"comment\">//p1：表示的是a的地址；&amp;p1表示的是p1变量本身的地址</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"根据指针偏移遍历集合的方法\"><a href=\"#根据指针偏移遍历集合的方法\" class=\"headerlink\" title=\"根据指针偏移遍历集合的方法\"></a>根据指针偏移遍历集合的方法</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">5</span>]=&#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,arr[i]);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,i[arr]);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,*(arr+i));<span class=\"comment\">//arr+iarr的类型为int所以偏移int的i位</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span>*p=&amp;arr;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,*p++);<span class=\"comment\">//先算p++结果为*p后++</span></span><br></pre></td></tr></table></figure>\n<p>a[i]=*(a+i)</p>\n<p>*也起到降级别的能力</p>\n<p><img src=\"/2018/03/11/2015-03-09-c语言7-指针/指针偏移法.png\" alt=\"指针偏移法\"></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h2><p>我们计算机的所有内存都是线性的，不管是一维数组还是二维数组在内存中都是线性的，内存线性是物理基础（不要问我）</p>\n<p>机器的不同，导致指针类型的大小不同，32位机的指针类型是4个字节，64位机的指针大小是8个字节，而位数的多少又影响到地址总线的宽度，导致最大支持的内存大小（内存条），所以32位机支持的最大的内存条是4g，并且4g有一部分被其他硬件占用，所以剩3g多来给用户使用，地址总线越宽，同一时间传输的地址数据就越多，从而达到同一时间可以让跟多的软件来访问内存，起到同一时间可以运行更多的软件</p>\n<h2 id=\"十六进制的解释\"><a href=\"#十六进制的解释\" class=\"headerlink\" title=\"十六进制的解释\"></a>十六进制的解释</h2><p>一个十六进制位数表示4个二进制位数，我们为一个变量赋一个16进制数和一个10进制数的表达方式是一样的，只不过打出的数据不同，<br>十六进制的读操作：<br>因为我们的电脑是4个二进制对应一位16进制的数，所以我们内存里的一个存储单元可以存储两位16进制的数，并且我们根据指针读数据都是从低位向高位读取，并且每个变量保存的都是首地址，所以:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inta=<span class=\"number\">0x0355</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>*a1=(<span class=\"keyword\">int</span>*)&amp;a;<span class=\"comment\">//355</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>*a2=(<span class=\"keyword\">char</span>*)&amp;a;<span class=\"comment\">//55  拿到低位地址 根据类型（寻址能力）向上找到数据后用数据总线返回cpu</span></span><br><span class=\"line\"><span class=\"keyword\">short</span>*a3=(<span class=\"keyword\">short</span>*)&amp;a;<span class=\"comment\">//355</span></span><br></pre></td></tr></table></figure></p>\n<p>0会被忽略</p>\n<h2 id=\"从大类型转换为小类型数据截取的解释\"><a href=\"#从大类型转换为小类型数据截取的解释\" class=\"headerlink\" title=\"从大类型转换为小类型数据截取的解释\"></a>从大类型转换为小类型数据截取的解释</h2><p>我们的数据在内存条中都是线性存储的并且占时的内存大小是从大到小的  但是我们此时的首地址是不变的，只是寻址能能力变化了  例如  int  a=0x12345678 char p=(char)a   printf(“p=%x”); p=78</p>\n<h2 id=\"指针和地址的区别\"><a href=\"#指针和地址的区别\" class=\"headerlink\" title=\"指针和地址的区别\"></a>指针和地址的区别</h2><p>指针是一个有类型的地址，所以我们可以根据地址来设置地址偏移来获取数据<br>备注:我们变量保存的都是首地址（当前数据空间最小的地址），然后根据数据类型来去从首地址拿指定个数的空间数据（因为现在我首地址和类型（空间个数）和每个空间的大小（8位）都确定了 所以我们可以按照规律取出数据）</p>\n<p>*：根据地址取内容  前提要有地址<br>&amp;：根据变量取地址，如果对象是数组的话我们根据他取到的是数组的整体</p>\n<h2 id=\"自定义地址-危险\"><a href=\"#自定义地址-危险\" class=\"headerlink\" title=\"自定义地址(危险)\"></a>自定义地址(危险)</h2><p>直接为一个指针变量赋一个我们自己写的值的画很危险，因为我们随机写的地址可能是系统内核占用的，所以可能影响到系统，所以我们申请内存一般都是需要系统帮我申请，而不是自己随机写地址，一般4g的内存的话 0~3g为用户内存，3g~4g为系统内存，所以3g~4g的地址我们是不能申请的</p>\n<h2 id=\"同类型数据加减的问题\"><a href=\"#同类型数据加减的问题\" class=\"headerlink\" title=\"同类型数据加减的问题\"></a>同类型数据加减的问题</h2><p>同类型相减等于相隔空格数，基本类型除外</p>\n<h2 id=\"数组和指针的关系\"><a href=\"#数组和指针的关系\" class=\"headerlink\" title=\"数组和指针的关系\"></a>数组和指针的关系</h2><p>数组名是个常量  不能修改 不能进行加减计算<br>*p++ 先算++ 再去值<br>一级数组和指针的关系：a+1表示</p>\n<h2 id=\"数组的首地址和数组元素的首地址之间的关系\"><a href=\"#数组的首地址和数组元素的首地址之间的关系\" class=\"headerlink\" title=\"数组的首地址和数组元素的首地址之间的关系\"></a>数组的首地址和数组元素的首地址之间的关系</h2><p>“指针”加数值，加的是该对象对应的数组的步长<br>数组的整体和元素性：对数组加上&amp;就是表述数组的整体性<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intarr[<span class=\"number\">3</span>][<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>&#125;; <span class=\"comment\">//T arr[3]</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"arr=%p\\n\"</span>,arr+<span class=\"number\">1</span>);<span class=\"comment\">//arr的数组的步长为int[4]所以加的是int[4]的字节大小</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr=%p\\n\"</span>,&amp;arr+<span class=\"number\">1</span>);<span class=\"comment\">//表示数组的整体，所以步长为整个数组，所以加的是整个数组的长度</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//arr[0]这里不是表示地址 而是取值 不考虑</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//&amp;arr的数组的步长为int[4]，所以加的是int[4]的字节大小</span></span><br><span class=\"line\">intarr[<span class=\"number\">5</span>]=&#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;; </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"arr[0]=%p\\n\"</span>,arr[<span class=\"number\">0</span>]);<span class=\"comment\">//这里是直接取值  不是指针 不考虑 直接加一</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]);<span class=\"comment\">//&amp;arr的数组的步长为int所以加上int类型大小</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"arr[0]+1=%p\\n\"</span>,arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//</span></span><br><span class=\"line\">这里是直接取值  不是指针 不考虑 直接加一</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]+1=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//</span></span><br><span class=\"line\">&amp;arr的数组的步长为<span class=\"keyword\">int</span>所以加上<span class=\"keyword\">int</span>类型大小</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr+1=%p\\n\"</span>,&amp;arr+<span class=\"number\">1</span>);<span class=\"comment\">//&amp;考虑的是整体性 直接加上int[5]的类型大小</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]);<span class=\"comment\">//&amp;arr[0]的数组的步长为int 所以直接加int</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr+1=%p\\n\"</span>,&amp;arr+<span class=\"number\">1</span>);<span class=\"comment\">//整体  直接加int[4]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"指针类型变量的二义性\"><a href=\"#指针类型变量的二义性\" class=\"headerlink\" title=\"指针类型变量的二义性\"></a>指针类型变量的二义性</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> * p1=&amp;a;   <span class=\"comment\">//p1：表示的是a的地址；&amp;p1表示的是p1变量本身的地址</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"根据指针偏移遍历集合的方法\"><a href=\"#根据指针偏移遍历集合的方法\" class=\"headerlink\" title=\"根据指针偏移遍历集合的方法\"></a>根据指针偏移遍历集合的方法</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">5</span>]=&#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,arr[i]);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,i[arr]);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,*(arr+i));<span class=\"comment\">//arr+iarr的类型为int所以偏移int的i位</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span>*p=&amp;arr;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,*p++);<span class=\"comment\">//先算p++结果为*p后++</span></span><br></pre></td></tr></table></figure>\n<p>a[i]=*(a+i)</p>\n<p>*也起到降级别的能力</p>\n<p><img src=\"/2018/03/11/2015-03-09-c语言7-指针/指针偏移法.png\" alt=\"指针偏移法\"></p>\n"},{"title":"c语言5-数组的二义性","date":"2018-03-11T15:41:56.000Z","_content":"\n## 数组的二义性\n### 数组名的二义性\n数组名的二义性:整体性和个体性\n整体性用的很少情况  一般只有在我们求sizeof的时候才是 \n当我们用数组名当作地址的时候都是体现数组的元素性\n\n### 指针运算\n指针与数值：加减都是该指针指向空间的n的倍数（加减n）\n例子：\nint arr[3]={0};\n1. arr：arr是数组第一个元素的首地址，表示数组的个体性，并且该指针指向的空间为int类型，所以加减为int的倍数\n2. &arr[0]：arr与&arr[0]这两个指针相同，并且指向的空间也一样，都是int类型大小，所以&arr[0]加减也是加减int的倍数\n\nint arr[3][4]={};\n1. 我们需要将该数组转换成一维数组来看  =int[4] arr[3] =T arr[3](T=arr[4])\n2. arr：arr是该数组的第一个元素的第一个指针，指向的空间大小为int[4]\n3. &arr[0]：arr和&arr[0]这两个的指针相同，并且都指向一个T（int[4]）的空间，所以加减都是int[4]的倍数\n4. &arr[0][0]：&arr[0][0]是一个二维数组里面的一个一维数组里面的第一个指针，并且所指向的空间大小为int，所以加减int的倍数\n5. 我们将指针赋值给一个新的指针变量，新的指针变量的类型也就是该指针指向空间大小，然后加上*，总结出，指针变量的类型（除掉*）和指向空间的类型相同","source":"_posts/2015-03-09-c语言5-数组的二义性.md","raw":"---\ntitle: c语言5-数组的二义性\ndate: 2018-03-11 23:41:56\ncategories: 技术\ntags: c语言\n---\n\n## 数组的二义性\n### 数组名的二义性\n数组名的二义性:整体性和个体性\n整体性用的很少情况  一般只有在我们求sizeof的时候才是 \n当我们用数组名当作地址的时候都是体现数组的元素性\n\n### 指针运算\n指针与数值：加减都是该指针指向空间的n的倍数（加减n）\n例子：\nint arr[3]={0};\n1. arr：arr是数组第一个元素的首地址，表示数组的个体性，并且该指针指向的空间为int类型，所以加减为int的倍数\n2. &arr[0]：arr与&arr[0]这两个指针相同，并且指向的空间也一样，都是int类型大小，所以&arr[0]加减也是加减int的倍数\n\nint arr[3][4]={};\n1. 我们需要将该数组转换成一维数组来看  =int[4] arr[3] =T arr[3](T=arr[4])\n2. arr：arr是该数组的第一个元素的第一个指针，指向的空间大小为int[4]\n3. &arr[0]：arr和&arr[0]这两个的指针相同，并且都指向一个T（int[4]）的空间，所以加减都是int[4]的倍数\n4. &arr[0][0]：&arr[0][0]是一个二维数组里面的一个一维数组里面的第一个指针，并且所指向的空间大小为int，所以加减int的倍数\n5. 我们将指针赋值给一个新的指针变量，新的指针变量的类型也就是该指针指向空间大小，然后加上*，总结出，指针变量的类型（除掉*）和指向空间的类型相同","slug":"2015-03-09-c语言5-数组的二义性","published":1,"updated":"2018-03-11T16:40:57.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjcw000g6stw6ebflru1","content":"<h2 id=\"数组的二义性\"><a href=\"#数组的二义性\" class=\"headerlink\" title=\"数组的二义性\"></a>数组的二义性</h2><h3 id=\"数组名的二义性\"><a href=\"#数组名的二义性\" class=\"headerlink\" title=\"数组名的二义性\"></a>数组名的二义性</h3><p>数组名的二义性:整体性和个体性<br>整体性用的很少情况  一般只有在我们求sizeof的时候才是<br>当我们用数组名当作地址的时候都是体现数组的元素性</p>\n<h3 id=\"指针运算\"><a href=\"#指针运算\" class=\"headerlink\" title=\"指针运算\"></a>指针运算</h3><p>指针与数值：加减都是该指针指向空间的n的倍数（加减n）<br>例子：<br>int arr[3]={0};</p>\n<ol>\n<li>arr：arr是数组第一个元素的首地址，表示数组的个体性，并且该指针指向的空间为int类型，所以加减为int的倍数</li>\n<li>&amp;arr[0]：arr与&amp;arr[0]这两个指针相同，并且指向的空间也一样，都是int类型大小，所以&amp;arr[0]加减也是加减int的倍数</li>\n</ol>\n<p>int arr[3][4]={};</p>\n<ol>\n<li>我们需要将该数组转换成一维数组来看  =int[4] arr[3] =T arr<a href=\"T=arr[4]\">3</a></li>\n<li>arr：arr是该数组的第一个元素的第一个指针，指向的空间大小为int[4]</li>\n<li>&amp;arr[0]：arr和&amp;arr[0]这两个的指针相同，并且都指向一个T（int[4]）的空间，所以加减都是int[4]的倍数</li>\n<li>&amp;arr[0][0]：&amp;arr[0][0]是一个二维数组里面的一个一维数组里面的第一个指针，并且所指向的空间大小为int，所以加减int的倍数</li>\n<li>我们将指针赋值给一个新的指针变量，新的指针变量的类型也就是该指针指向空间大小，然后加上<em>，总结出，指针变量的类型（除掉</em>）和指向空间的类型相同</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"数组的二义性\"><a href=\"#数组的二义性\" class=\"headerlink\" title=\"数组的二义性\"></a>数组的二义性</h2><h3 id=\"数组名的二义性\"><a href=\"#数组名的二义性\" class=\"headerlink\" title=\"数组名的二义性\"></a>数组名的二义性</h3><p>数组名的二义性:整体性和个体性<br>整体性用的很少情况  一般只有在我们求sizeof的时候才是<br>当我们用数组名当作地址的时候都是体现数组的元素性</p>\n<h3 id=\"指针运算\"><a href=\"#指针运算\" class=\"headerlink\" title=\"指针运算\"></a>指针运算</h3><p>指针与数值：加减都是该指针指向空间的n的倍数（加减n）<br>例子：<br>int arr[3]={0};</p>\n<ol>\n<li>arr：arr是数组第一个元素的首地址，表示数组的个体性，并且该指针指向的空间为int类型，所以加减为int的倍数</li>\n<li>&amp;arr[0]：arr与&amp;arr[0]这两个指针相同，并且指向的空间也一样，都是int类型大小，所以&amp;arr[0]加减也是加减int的倍数</li>\n</ol>\n<p>int arr[3][4]={};</p>\n<ol>\n<li>我们需要将该数组转换成一维数组来看  =int[4] arr[3] =T arr<a href=\"T=arr[4]\">3</a></li>\n<li>arr：arr是该数组的第一个元素的第一个指针，指向的空间大小为int[4]</li>\n<li>&amp;arr[0]：arr和&amp;arr[0]这两个的指针相同，并且都指向一个T（int[4]）的空间，所以加减都是int[4]的倍数</li>\n<li>&amp;arr[0][0]：&amp;arr[0][0]是一个二维数组里面的一个一维数组里面的第一个指针，并且所指向的空间大小为int，所以加减int的倍数</li>\n<li>我们将指针赋值给一个新的指针变量，新的指针变量的类型也就是该指针指向空间大小，然后加上<em>，总结出，指针变量的类型（除掉</em>）和指向空间的类型相同</li>\n</ol>\n"},{"title":"c语言8-函数","date":"2018-03-11T15:41:56.000Z","_content":"\n## 指针偏移法\n使用范围：只针对连续的空间，不然指针偏移没有任何意义！\n因为指针的加减其实就是获取到该指针对应的数组的步长的加减！\n一级指针：公式推到：arr[i]=i[arr]=*(arr+i)  arr的数组的步长为int \n二级指针：公式推到：arr[i][j]=*(*(arr+i)+j)  arr的数组的步长为int[j] arr[j]的数组的步长为int\n\n## 函数的返回值\nc语言的返回值只有基本类型和指针类型，没有其他类型 \n\n## 将数组作为参数传递\n1.传递首元素指针和数组元素的数量\n2.*(arr+i)==arr[i]==i[arr]\n\n## 递归\n理解:其实就是方法自己调用自己，到达某一时刻后return，返回数据\n公式结构和书写结构:\n![公式结构和书写结构](公式结构和书写结构.png)\n\n## 获取一个范围内的随机数的方法\n```c\nint randomNum(intm,intn)\n{\n    srand(time(NULL));\n    intnum=rand();\n    intresult=num%(n-m)+m+1;//获取到m到n之间的随机数\n    printf(\"%d\\n\",result);\n}\n//产生30个不重复的随机数放到指数组中去。\nintarr[10];\nsrand(time(NULL));\ninti=0;\nwhile(i<30)\n{\n    intnum=rand()%(50-30)+30+1;\n    intresult=searchArr(arr,sizeof(arr)/sizeof(arr[0]),num);\n    if(!result)\n        continue;\n    else\n        arr[i++]=num;\n    }\n}\n```","source":"_posts/2015-03-09-c语言8-函数.md","raw":"---\ntitle: c语言8-函数\ndate: 2018-03-11 23:41:56\ncategories: 技术\ntags: c语言\n---\n\n## 指针偏移法\n使用范围：只针对连续的空间，不然指针偏移没有任何意义！\n因为指针的加减其实就是获取到该指针对应的数组的步长的加减！\n一级指针：公式推到：arr[i]=i[arr]=*(arr+i)  arr的数组的步长为int \n二级指针：公式推到：arr[i][j]=*(*(arr+i)+j)  arr的数组的步长为int[j] arr[j]的数组的步长为int\n\n## 函数的返回值\nc语言的返回值只有基本类型和指针类型，没有其他类型 \n\n## 将数组作为参数传递\n1.传递首元素指针和数组元素的数量\n2.*(arr+i)==arr[i]==i[arr]\n\n## 递归\n理解:其实就是方法自己调用自己，到达某一时刻后return，返回数据\n公式结构和书写结构:\n![公式结构和书写结构](公式结构和书写结构.png)\n\n## 获取一个范围内的随机数的方法\n```c\nint randomNum(intm,intn)\n{\n    srand(time(NULL));\n    intnum=rand();\n    intresult=num%(n-m)+m+1;//获取到m到n之间的随机数\n    printf(\"%d\\n\",result);\n}\n//产生30个不重复的随机数放到指数组中去。\nintarr[10];\nsrand(time(NULL));\ninti=0;\nwhile(i<30)\n{\n    intnum=rand()%(50-30)+30+1;\n    intresult=searchArr(arr,sizeof(arr)/sizeof(arr[0]),num);\n    if(!result)\n        continue;\n    else\n        arr[i++]=num;\n    }\n}\n```","slug":"2015-03-09-c语言8-函数","published":1,"updated":"2018-03-11T16:41:03.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjcz000l6stw5d705z01","content":"<h2 id=\"指针偏移法\"><a href=\"#指针偏移法\" class=\"headerlink\" title=\"指针偏移法\"></a>指针偏移法</h2><p>使用范围：只针对连续的空间，不然指针偏移没有任何意义！<br>因为指针的加减其实就是获取到该指针对应的数组的步长的加减！<br>一级指针：公式推到：arr[i]=i[arr]=<em>(arr+i)  arr的数组的步长为int<br>二级指针：公式推到：arr[i][j]=</em>(*(arr+i)+j)  arr的数组的步长为int[j] arr[j]的数组的步长为int</p>\n<h2 id=\"函数的返回值\"><a href=\"#函数的返回值\" class=\"headerlink\" title=\"函数的返回值\"></a>函数的返回值</h2><p>c语言的返回值只有基本类型和指针类型，没有其他类型 </p>\n<h2 id=\"将数组作为参数传递\"><a href=\"#将数组作为参数传递\" class=\"headerlink\" title=\"将数组作为参数传递\"></a>将数组作为参数传递</h2><p>1.传递首元素指针和数组元素的数量<br>2.*(arr+i)==arr[i]==i[arr]</p>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>理解:其实就是方法自己调用自己，到达某一时刻后return，返回数据<br>公式结构和书写结构:<br><img src=\"/2018/03/11/2015-03-09-c语言8-函数/公式结构和书写结构.png\" alt=\"公式结构和书写结构\"></p>\n<h2 id=\"获取一个范围内的随机数的方法\"><a href=\"#获取一个范围内的随机数的方法\" class=\"headerlink\" title=\"获取一个范围内的随机数的方法\"></a>获取一个范围内的随机数的方法</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">randomNum</span><span class=\"params\">(intm,intn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    intnum=rand();</span><br><span class=\"line\">    intresult=num%(n-m)+m+<span class=\"number\">1</span>;<span class=\"comment\">//获取到m到n之间的随机数</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//产生30个不重复的随机数放到指数组中去。</span></span><br><span class=\"line\">intarr[<span class=\"number\">10</span>];</span><br><span class=\"line\">srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">inti=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i&lt;<span class=\"number\">30</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    intnum=rand()%(<span class=\"number\">50</span><span class=\"number\">-30</span>)+<span class=\"number\">30</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    intresult=searchArr(arr,<span class=\"keyword\">sizeof</span>(arr)/<span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]),num);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!result)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        arr[i++]=num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"指针偏移法\"><a href=\"#指针偏移法\" class=\"headerlink\" title=\"指针偏移法\"></a>指针偏移法</h2><p>使用范围：只针对连续的空间，不然指针偏移没有任何意义！<br>因为指针的加减其实就是获取到该指针对应的数组的步长的加减！<br>一级指针：公式推到：arr[i]=i[arr]=<em>(arr+i)  arr的数组的步长为int<br>二级指针：公式推到：arr[i][j]=</em>(*(arr+i)+j)  arr的数组的步长为int[j] arr[j]的数组的步长为int</p>\n<h2 id=\"函数的返回值\"><a href=\"#函数的返回值\" class=\"headerlink\" title=\"函数的返回值\"></a>函数的返回值</h2><p>c语言的返回值只有基本类型和指针类型，没有其他类型 </p>\n<h2 id=\"将数组作为参数传递\"><a href=\"#将数组作为参数传递\" class=\"headerlink\" title=\"将数组作为参数传递\"></a>将数组作为参数传递</h2><p>1.传递首元素指针和数组元素的数量<br>2.*(arr+i)==arr[i]==i[arr]</p>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>理解:其实就是方法自己调用自己，到达某一时刻后return，返回数据<br>公式结构和书写结构:<br><img src=\"/2018/03/11/2015-03-09-c语言8-函数/公式结构和书写结构.png\" alt=\"公式结构和书写结构\"></p>\n<h2 id=\"获取一个范围内的随机数的方法\"><a href=\"#获取一个范围内的随机数的方法\" class=\"headerlink\" title=\"获取一个范围内的随机数的方法\"></a>获取一个范围内的随机数的方法</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">randomNum</span><span class=\"params\">(intm,intn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    intnum=rand();</span><br><span class=\"line\">    intresult=num%(n-m)+m+<span class=\"number\">1</span>;<span class=\"comment\">//获取到m到n之间的随机数</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//产生30个不重复的随机数放到指数组中去。</span></span><br><span class=\"line\">intarr[<span class=\"number\">10</span>];</span><br><span class=\"line\">srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">inti=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i&lt;<span class=\"number\">30</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    intnum=rand()%(<span class=\"number\">50</span><span class=\"number\">-30</span>)+<span class=\"number\">30</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    intresult=searchArr(arr,<span class=\"keyword\">sizeof</span>(arr)/<span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]),num);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!result)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        arr[i++]=num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"c语言9-变量作用域及修饰符","date":"2018-03-11T15:41:56.000Z","_content":"## 修饰符关键字\n\n### auto\n修饰局部变量，所有的局部变量的默认修饰符，然后因为数据是存储在栈空间（系统随机分配），所以如果不初始化变量，会产生一段随机的内容\n\n### register\n修饰局部变量，被修饰的变量数据会存储在cpu的寄存器，从而达到提高处理效率的能力，但是注意cpu寄存器的数量有限，所以我们一般不使用，如果不初始化变量，会产生一段随机的内容，一般用于多文件编程，但是也容易造成命名污染，但是用static可以解决，因为被static修饰的变量只能作为该文件的全局变量\n\n备注:一般被register修饰的变量在优化期间，可能会自动处理成auto\n\n### extern\n修饰全局变量，被修饰的变量，可以在变得文件使用，作用发生在链接时期\n\n### static\n修饰全局或者静态变量，修改了变量的生命周期，使变量的生命周期变成从程序启动到程序结束，并且变量只能被初始化一次，如果未初始化，系统会默认将变量的数据设置为0，注意被static修饰的变量存储的区域和其他变量存储的区域不同，所以我们可以将被static修饰的变量当作缓存使用","source":"_posts/2015-03-09-c语言9-变量作用域及修饰符.md","raw":"---\ntitle: c语言9-变量作用域及修饰符\ndate: 2018-03-11 23:41:56\ncategories: 技术\ntags: c语言\n---\n## 修饰符关键字\n\n### auto\n修饰局部变量，所有的局部变量的默认修饰符，然后因为数据是存储在栈空间（系统随机分配），所以如果不初始化变量，会产生一段随机的内容\n\n### register\n修饰局部变量，被修饰的变量数据会存储在cpu的寄存器，从而达到提高处理效率的能力，但是注意cpu寄存器的数量有限，所以我们一般不使用，如果不初始化变量，会产生一段随机的内容，一般用于多文件编程，但是也容易造成命名污染，但是用static可以解决，因为被static修饰的变量只能作为该文件的全局变量\n\n备注:一般被register修饰的变量在优化期间，可能会自动处理成auto\n\n### extern\n修饰全局变量，被修饰的变量，可以在变得文件使用，作用发生在链接时期\n\n### static\n修饰全局或者静态变量，修改了变量的生命周期，使变量的生命周期变成从程序启动到程序结束，并且变量只能被初始化一次，如果未初始化，系统会默认将变量的数据设置为0，注意被static修饰的变量存储的区域和其他变量存储的区域不同，所以我们可以将被static修饰的变量当作缓存使用","slug":"2015-03-09-c语言9-变量作用域及修饰符","published":1,"updated":"2018-03-11T16:41:06.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjd2000o6stwvwv286ry","content":"<h2 id=\"修饰符关键字\"><a href=\"#修饰符关键字\" class=\"headerlink\" title=\"修饰符关键字\"></a>修饰符关键字</h2><h3 id=\"auto\"><a href=\"#auto\" class=\"headerlink\" title=\"auto\"></a>auto</h3><p>修饰局部变量，所有的局部变量的默认修饰符，然后因为数据是存储在栈空间（系统随机分配），所以如果不初始化变量，会产生一段随机的内容</p>\n<h3 id=\"register\"><a href=\"#register\" class=\"headerlink\" title=\"register\"></a>register</h3><p>修饰局部变量，被修饰的变量数据会存储在cpu的寄存器，从而达到提高处理效率的能力，但是注意cpu寄存器的数量有限，所以我们一般不使用，如果不初始化变量，会产生一段随机的内容，一般用于多文件编程，但是也容易造成命名污染，但是用static可以解决，因为被static修饰的变量只能作为该文件的全局变量</p>\n<p>备注:一般被register修饰的变量在优化期间，可能会自动处理成auto</p>\n<h3 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h3><p>修饰全局变量，被修饰的变量，可以在变得文件使用，作用发生在链接时期</p>\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><p>修饰全局或者静态变量，修改了变量的生命周期，使变量的生命周期变成从程序启动到程序结束，并且变量只能被初始化一次，如果未初始化，系统会默认将变量的数据设置为0，注意被static修饰的变量存储的区域和其他变量存储的区域不同，所以我们可以将被static修饰的变量当作缓存使用</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"修饰符关键字\"><a href=\"#修饰符关键字\" class=\"headerlink\" title=\"修饰符关键字\"></a>修饰符关键字</h2><h3 id=\"auto\"><a href=\"#auto\" class=\"headerlink\" title=\"auto\"></a>auto</h3><p>修饰局部变量，所有的局部变量的默认修饰符，然后因为数据是存储在栈空间（系统随机分配），所以如果不初始化变量，会产生一段随机的内容</p>\n<h3 id=\"register\"><a href=\"#register\" class=\"headerlink\" title=\"register\"></a>register</h3><p>修饰局部变量，被修饰的变量数据会存储在cpu的寄存器，从而达到提高处理效率的能力，但是注意cpu寄存器的数量有限，所以我们一般不使用，如果不初始化变量，会产生一段随机的内容，一般用于多文件编程，但是也容易造成命名污染，但是用static可以解决，因为被static修饰的变量只能作为该文件的全局变量</p>\n<p>备注:一般被register修饰的变量在优化期间，可能会自动处理成auto</p>\n<h3 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h3><p>修饰全局变量，被修饰的变量，可以在变得文件使用，作用发生在链接时期</p>\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><p>修饰全局或者静态变量，修改了变量的生命周期，使变量的生命周期变成从程序启动到程序结束，并且变量只能被初始化一次，如果未初始化，系统会默认将变量的数据设置为0，注意被static修饰的变量存储的区域和其他变量存储的区域不同，所以我们可以将被static修饰的变量当作缓存使用</p>\n"},{"title":"HUGO博客","date":"2013-07-13T12:46:25.000Z","_content":"\n## Step 1.配置Hugo：\n\n在github[下载](https://github.com/gohugoio/hugo/releases)hugo release版本  [<font color=red>(点击进入下载页)</font>](https://github.com/gohugoio/hugo/releases)\n将hugo.exe路径配置到环境变量\n有想法的朋友也可以下载源码编译\n\n\n## Step 2.生成站点：\n使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\n\n```\n$ hugo new site /path/to/site\n```\n$ cd /path/to/site\n站点目录结构：\n\n  * ▸ archetypes/\n  * ▸ content/\n  * ▸ layouts/\n  * ▸ static/\n    config.toml\n\n\n## Step 3.创建文章：\n创建一个 about 页面,使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\n\n```\n$ hugo new about.md\n```\nabout.md 自动生成到了 content/about.md ，打开 about.md 看下：\n\n```\n+++\ndate = \"2015-10-25T08:36:54-07:00\"\ndraft = true\ntitle = \"about\"\n+++\n```\n\n正文内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 --- 标记）或者 JSON 格式。\n\n创建第一篇文章，放到 post 目录，方便之后生成聚合页面。\n\n```\n$ hugo new post/first.md\n```\n\n打开编辑 post/first.md ：\n\n```\n---\ndate: \"2015-10-25T08:36:54-07:00\"\ntitle: \"first\"\n---\n```\n\n## Step 4.创建 themes 目录：\n```\n$ cd themes\n$ git clone https://github.com/aubm/hugo-code-editor-theme.git\n```\n运行Hugo\n在你的站点根目录执行 Hugo 命令进行调试：\n\n```\n$ hugo server --theme=hugo-code-editor-theme --buildDrafts\n```\n（注明：v0.15 版本之后，不再需要使用 --watchydeh 参数了）\n\n浏览器里打开： http://localhost:1313\n\n\n## Step 5.部署：\n假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：GuoXingGitHub.github.io （GuoXingGitHub替换为你的github用户名）。\n\n在站点根目录执行 Hugo 命令生成最终页面：\n```\n$ hugo --theme=hugo-code-editor-theme --baseUrl=\"https://GuoXingGitHub.github.io\"\n```\n<font color=red>(注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成)</font>\n\n如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。\n\n最后就能通过https://GuoXingGitHub.github.io/ 浏览了\n\n\n## Step 6.帮助：\n\n* hugo中文文档: [http://www.gohugo.org/](http://www.gohugo.org/)\n* hugo官网: [http://gohugo.io/](http://gohugo.io/)\n\n\n","source":"_posts/2015-04-07-HUGO博客.md","raw":"---\ntitle: HUGO博客\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: 工具/插件\n---\n\n## Step 1.配置Hugo：\n\n在github[下载](https://github.com/gohugoio/hugo/releases)hugo release版本  [<font color=red>(点击进入下载页)</font>](https://github.com/gohugoio/hugo/releases)\n将hugo.exe路径配置到环境变量\n有想法的朋友也可以下载源码编译\n\n\n## Step 2.生成站点：\n使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\n\n```\n$ hugo new site /path/to/site\n```\n$ cd /path/to/site\n站点目录结构：\n\n  * ▸ archetypes/\n  * ▸ content/\n  * ▸ layouts/\n  * ▸ static/\n    config.toml\n\n\n## Step 3.创建文章：\n创建一个 about 页面,使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\n\n```\n$ hugo new about.md\n```\nabout.md 自动生成到了 content/about.md ，打开 about.md 看下：\n\n```\n+++\ndate = \"2015-10-25T08:36:54-07:00\"\ndraft = true\ntitle = \"about\"\n+++\n```\n\n正文内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 --- 标记）或者 JSON 格式。\n\n创建第一篇文章，放到 post 目录，方便之后生成聚合页面。\n\n```\n$ hugo new post/first.md\n```\n\n打开编辑 post/first.md ：\n\n```\n---\ndate: \"2015-10-25T08:36:54-07:00\"\ntitle: \"first\"\n---\n```\n\n## Step 4.创建 themes 目录：\n```\n$ cd themes\n$ git clone https://github.com/aubm/hugo-code-editor-theme.git\n```\n运行Hugo\n在你的站点根目录执行 Hugo 命令进行调试：\n\n```\n$ hugo server --theme=hugo-code-editor-theme --buildDrafts\n```\n（注明：v0.15 版本之后，不再需要使用 --watchydeh 参数了）\n\n浏览器里打开： http://localhost:1313\n\n\n## Step 5.部署：\n假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：GuoXingGitHub.github.io （GuoXingGitHub替换为你的github用户名）。\n\n在站点根目录执行 Hugo 命令生成最终页面：\n```\n$ hugo --theme=hugo-code-editor-theme --baseUrl=\"https://GuoXingGitHub.github.io\"\n```\n<font color=red>(注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成)</font>\n\n如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。\n\n最后就能通过https://GuoXingGitHub.github.io/ 浏览了\n\n\n## Step 6.帮助：\n\n* hugo中文文档: [http://www.gohugo.org/](http://www.gohugo.org/)\n* hugo官网: [http://gohugo.io/](http://gohugo.io/)\n\n\n","slug":"2015-04-07-HUGO博客","published":1,"updated":"2018-03-11T13:28:56.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjd4000r6stw1p9i1vln","content":"<h2 id=\"Step-1-配置Hugo：\"><a href=\"#Step-1-配置Hugo：\" class=\"headerlink\" title=\"Step 1.配置Hugo：\"></a>Step 1.配置Hugo：</h2><p>在github<a href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\" rel=\"noopener\">下载</a>hugo release版本  <a href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\" rel=\"noopener\"><font color=\"red\">(点击进入下载页)</font></a><br>将hugo.exe路径配置到环境变量<br>有想法的朋友也可以下载源码编译</p>\n<h2 id=\"Step-2-生成站点：\"><a href=\"#Step-2-生成站点：\" class=\"headerlink\" title=\"Step 2.生成站点：\"></a>Step 2.生成站点：</h2><p>使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new site /path/to/site</span><br></pre></td></tr></table></figure>\n<p>$ cd /path/to/site<br>站点目录结构：</p>\n<ul>\n<li>▸ archetypes/</li>\n<li>▸ content/</li>\n<li>▸ layouts/</li>\n<li>▸ static/<br>config.toml</li>\n</ul>\n<h2 id=\"Step-3-创建文章：\"><a href=\"#Step-3-创建文章：\" class=\"headerlink\" title=\"Step 3.创建文章：\"></a>Step 3.创建文章：</h2><p>创建一个 about 页面,使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new about.md</span><br></pre></td></tr></table></figure>\n<p>about.md 自动生成到了 content/about.md ，打开 about.md 看下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+++</span><br><span class=\"line\">date = &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class=\"line\">draft = true</span><br><span class=\"line\">title = &quot;about&quot;</span><br><span class=\"line\">+++</span><br></pre></td></tr></table></figure>\n<p>正文内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 — 标记）或者 JSON 格式。</p>\n<p>创建第一篇文章，放到 post 目录，方便之后生成聚合页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new post/first.md</span><br></pre></td></tr></table></figure>\n<p>打开编辑 post/first.md ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">date: &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class=\"line\">title: &quot;first&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-4-创建-themes-目录：\"><a href=\"#Step-4-创建-themes-目录：\" class=\"headerlink\" title=\"Step 4.创建 themes 目录：\"></a>Step 4.创建 themes 目录：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd themes</span><br><span class=\"line\">$ git clone https://github.com/aubm/hugo-code-editor-theme.git</span><br></pre></td></tr></table></figure>\n<p>运行Hugo<br>在你的站点根目录执行 Hugo 命令进行调试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo server --theme=hugo-code-editor-theme --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>（注明：v0.15 版本之后，不再需要使用 –watchydeh 参数了）</p>\n<p>浏览器里打开： <a href=\"http://localhost:1313\" target=\"_blank\" rel=\"noopener\">http://localhost:1313</a></p>\n<h2 id=\"Step-5-部署：\"><a href=\"#Step-5-部署：\" class=\"headerlink\" title=\"Step 5.部署：\"></a>Step 5.部署：</h2><p>假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：GuoXingGitHub.github.io （GuoXingGitHub替换为你的github用户名）。</p>\n<p>在站点根目录执行 Hugo 命令生成最终页面：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo --theme=hugo-code-editor-theme --baseUrl=&quot;https://GuoXingGitHub.github.io&quot;</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">(注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成)</font>\n\n<p>如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。</p>\n<p>最后就能通过<a href=\"https://GuoXingGitHub.github.io/\" target=\"_blank\" rel=\"noopener\">https://GuoXingGitHub.github.io/</a> 浏览了</p>\n<h2 id=\"Step-6-帮助：\"><a href=\"#Step-6-帮助：\" class=\"headerlink\" title=\"Step 6.帮助：\"></a>Step 6.帮助：</h2><ul>\n<li>hugo中文文档: <a href=\"http://www.gohugo.org/\" target=\"_blank\" rel=\"noopener\">http://www.gohugo.org/</a></li>\n<li>hugo官网: <a href=\"http://gohugo.io/\" target=\"_blank\" rel=\"noopener\">http://gohugo.io/</a></li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"Step-1-配置Hugo：\"><a href=\"#Step-1-配置Hugo：\" class=\"headerlink\" title=\"Step 1.配置Hugo：\"></a>Step 1.配置Hugo：</h2><p>在github<a href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\" rel=\"noopener\">下载</a>hugo release版本  <a href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\" rel=\"noopener\"><font color=\"red\">(点击进入下载页)</font></a><br>将hugo.exe路径配置到环境变量<br>有想法的朋友也可以下载源码编译</p>\n<h2 id=\"Step-2-生成站点：\"><a href=\"#Step-2-生成站点：\" class=\"headerlink\" title=\"Step 2.生成站点：\"></a>Step 2.生成站点：</h2><p>使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new site /path/to/site</span><br></pre></td></tr></table></figure>\n<p>$ cd /path/to/site<br>站点目录结构：</p>\n<ul>\n<li>▸ archetypes/</li>\n<li>▸ content/</li>\n<li>▸ layouts/</li>\n<li>▸ static/<br>config.toml</li>\n</ul>\n<h2 id=\"Step-3-创建文章：\"><a href=\"#Step-3-创建文章：\" class=\"headerlink\" title=\"Step 3.创建文章：\"></a>Step 3.创建文章：</h2><p>创建一个 about 页面,使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new about.md</span><br></pre></td></tr></table></figure>\n<p>about.md 自动生成到了 content/about.md ，打开 about.md 看下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+++</span><br><span class=\"line\">date = &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class=\"line\">draft = true</span><br><span class=\"line\">title = &quot;about&quot;</span><br><span class=\"line\">+++</span><br></pre></td></tr></table></figure>\n<p>正文内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 — 标记）或者 JSON 格式。</p>\n<p>创建第一篇文章，放到 post 目录，方便之后生成聚合页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new post/first.md</span><br></pre></td></tr></table></figure>\n<p>打开编辑 post/first.md ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">date: &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class=\"line\">title: &quot;first&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-4-创建-themes-目录：\"><a href=\"#Step-4-创建-themes-目录：\" class=\"headerlink\" title=\"Step 4.创建 themes 目录：\"></a>Step 4.创建 themes 目录：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd themes</span><br><span class=\"line\">$ git clone https://github.com/aubm/hugo-code-editor-theme.git</span><br></pre></td></tr></table></figure>\n<p>运行Hugo<br>在你的站点根目录执行 Hugo 命令进行调试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo server --theme=hugo-code-editor-theme --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>（注明：v0.15 版本之后，不再需要使用 –watchydeh 参数了）</p>\n<p>浏览器里打开： <a href=\"http://localhost:1313\" target=\"_blank\" rel=\"noopener\">http://localhost:1313</a></p>\n<h2 id=\"Step-5-部署：\"><a href=\"#Step-5-部署：\" class=\"headerlink\" title=\"Step 5.部署：\"></a>Step 5.部署：</h2><p>假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：GuoXingGitHub.github.io （GuoXingGitHub替换为你的github用户名）。</p>\n<p>在站点根目录执行 Hugo 命令生成最终页面：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo --theme=hugo-code-editor-theme --baseUrl=&quot;https://GuoXingGitHub.github.io&quot;</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">(注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成)</font>\n\n<p>如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。</p>\n<p>最后就能通过<a href=\"https://GuoXingGitHub.github.io/\" target=\"_blank\" rel=\"noopener\">https://GuoXingGitHub.github.io/</a> 浏览了</p>\n<h2 id=\"Step-6-帮助：\"><a href=\"#Step-6-帮助：\" class=\"headerlink\" title=\"Step 6.帮助：\"></a>Step 6.帮助：</h2><ul>\n<li>hugo中文文档: <a href=\"http://www.gohugo.org/\" target=\"_blank\" rel=\"noopener\">http://www.gohugo.org/</a></li>\n<li>hugo官网: <a href=\"http://gohugo.io/\" target=\"_blank\" rel=\"noopener\">http://gohugo.io/</a></li>\n</ul>\n"},{"title":"HEXO博客","date":"2013-07-13T12:46:25.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n     \n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/2015-04-07-HEXO博客.md","raw":"---\ntitle: HEXO博客\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: 工具/插件\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n     \n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"2015-04-07-HEXO博客","published":1,"updated":"2018-03-09T13:52:58.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjd6000u6stwhrlqnbkr","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"HEXO文档中带文件","date":"2013-07-13T12:46:25.000Z","_content":"\n### 图片：\n\n<img src=\"avatar.jpg\" heigh=100 width=100 center/>\n\n ![avatar](avatar.jpg)\n","source":"_posts/2018-03-08-HEXO文档中带文件.md","raw":"---\ntitle: HEXO文档中带文件\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: 工具/插件\n---\n\n### 图片：\n\n<img src=\"avatar.jpg\" heigh=100 width=100 center/>\n\n ![avatar](avatar.jpg)\n","slug":"2018-03-08-HEXO文档中带文件","published":1,"updated":"2018-03-09T13:52:58.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjd8000y6stwx4ew2mht","content":"<h3 id=\"图片：\"><a href=\"#图片：\" class=\"headerlink\" title=\"图片：\"></a>图片：</h3><p><img src=\"/2013/07/13/2018-03-08-HEXO文档中带文件/avatar.jpg\" heigh=\"100\" width=\"100\" center=\"\"></p>\n<p> <img src=\"/2013/07/13/2018-03-08-HEXO文档中带文件/avatar.jpg\" alt=\"avatar\"></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"图片：\"><a href=\"#图片：\" class=\"headerlink\" title=\"图片：\"></a>图片：</h3><p><img src=\"/2013/07/13/2018-03-08-HEXO文档中带文件/avatar.jpg\" heigh=\"100\" width=\"100\" center=\"\"></p>\n<p> <img src=\"/2013/07/13/2018-03-08-HEXO文档中带文件/avatar.jpg\" alt=\"avatar\"></p>\n"},{"title":"Hexo-theme-pure主题books默认选择想读","date":"2013-07-13T12:46:25.000Z","_content":"\n\nHexo-theme-pure主题books默认是选择在读的，现在我们需要将想读移动到前面\n## 步骤\n\n### Step 1.修改样式\n   在主题的layout->_partial的 archive-book.ejs调换想读和在读的顺序\n\n### Step 2.修改js\n   在主题的layout->_script的 douban.ejs 将show(reading)改成show('wish')，然后刷新就有效果了\n\n\n","source":"_posts/2018-03-09-Hexo-theme-pure主题books默认选择想读.md","raw":"---\ntitle: Hexo-theme-pure主题books默认选择想读\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: 工具/插件\n---\n\n\nHexo-theme-pure主题books默认是选择在读的，现在我们需要将想读移动到前面\n## 步骤\n\n### Step 1.修改样式\n   在主题的layout->_partial的 archive-book.ejs调换想读和在读的顺序\n\n### Step 2.修改js\n   在主题的layout->_script的 douban.ejs 将show(reading)改成show('wish')，然后刷新就有效果了\n\n\n","slug":"2018-03-09-Hexo-theme-pure主题books默认选择想读","published":1,"updated":"2018-03-11T13:28:56.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjda00116stwiawuf8th","content":"<p>Hexo-theme-pure主题books默认是选择在读的，现在我们需要将想读移动到前面</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"Step-1-修改样式\"><a href=\"#Step-1-修改样式\" class=\"headerlink\" title=\"Step 1.修改样式\"></a>Step 1.修改样式</h3><p>   在主题的layout-&gt;_partial的 archive-book.ejs调换想读和在读的顺序</p>\n<h3 id=\"Step-2-修改js\"><a href=\"#Step-2-修改js\" class=\"headerlink\" title=\"Step 2.修改js\"></a>Step 2.修改js</h3><p>   在主题的layout-&gt;_script的 douban.ejs 将show(reading)改成show(‘wish’)，然后刷新就有效果了</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>Hexo-theme-pure主题books默认是选择在读的，现在我们需要将想读移动到前面</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"Step-1-修改样式\"><a href=\"#Step-1-修改样式\" class=\"headerlink\" title=\"Step 1.修改样式\"></a>Step 1.修改样式</h3><p>   在主题的layout-&gt;_partial的 archive-book.ejs调换想读和在读的顺序</p>\n<h3 id=\"Step-2-修改js\"><a href=\"#Step-2-修改js\" class=\"headerlink\" title=\"Step 2.修改js\"></a>Step 2.修改js</h3><p>   在主题的layout-&gt;_script的 douban.ejs 将show(reading)改成show(‘wish’)，然后刷新就有效果了</p>\n"},{"title":"C++引用的理解","date":"2013-07-13T12:46:25.000Z","_content":"\n## 定义\n引用引入了对象的一个同义词.定义引用的表示方法与定义指针相似,只是用&代替了*.引用（reference）是c++对c语言的重要扩充.引用就是某\n一变量（目标）的一个别名,对引用的操作与对变量直接操作完全一样.其格式为:类型 &引用变量名 = 已定义过的变量名.\n\n\n## 特点\n一个变量可取多个别名.\n\n引用必须初始化.\n\n引用只能在初始化的时候引用一次 ,不能更改为转而引用其他变量.\n\n\n\n## code\n### 基础引用\n\n```c++\nvoid TestReference1 ()  \n{  \n     int a = 1;  \n     int& b = a;  \n  \n     cout<<\"a:address->\" <<&a<< endl;  \n     cout<<\"b:address->\" <<&b<< endl;  \n  \n     a = 2;  \n     b = 3;  \n     int& c = b;// 引用一个引用变量,别名的别名  \n     c = 4;  \n}\n```\n\n### const引用\n\n```c++\nvoid TestReference2 ()  \n{  \n     int d1 = 4;  \n     const int & d2 = d1;  \n     d1 = 5;//d1改变,d2的值也会改变.  \n     //d2 = 6;//不能给常量（不能被修改的量）赋值.  \n  \n     const int d3 = 1;  \n     const int & d4 = d3;  \n     //int&d5 = d3;  \n     const int & d6 = 5;//常量具有常性,只有常引用可以引用常量  \n  \n     double d7 = 1.1;  \n     //int& d8 = d7;//d7是double类型,d8是int,d7赋值给 d8时要生成一个临时变量  \n                   //也就是说d8引用的是这个带有常性的临时变量,所以不能赋值.  \n     const int& d9 = d7;  \n}  \n```\n\n\n\n## 引用作参数\n```c++\n1.【值传递】如果形参为非引用的传值方式,则生成局部临时变量接收实参的值  \nvoid Swap (int left, int right) //值传递的方式无法实现交换,因为传参时对于参数left和right拷贝一临时副本,交换的是副本值,因为其是临时变量函数退出,变量销 {                                //毁,并不会影响外部left和right的值.  \n     int temp = left;  \n     left = right ;  \n     right = temp ;  \n}  \n  \n2.【引用传递】如果形参为引用类型,则形参是实参的别名.  \nvoid Swap (int& left, int& right)//使用引用的话,不做临时拷贝,&的使用说明此处只是原参数的另一个名字而已,所以修改时直接在原参数的基础上修改变量值.  \n{  \n     int temp = left;  \n     right = left ;  \n     left = temp ;  \n}  \n  \n3.【指针传递】  \nvoid Swap (int* pLeft, int* pRight)//传入的是地址,因为地址是唯一的,所以指针通过地址的访问进而可修改其内容.  \n{  \n     int temp = *pLeft;  \n     *pLeft = *pRight;  \n     *pRight = temp;  \n}  \n```\n\n***\n\n## 注意\n不要返回一个临时变量的引用.\n如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.\n\n### 引用和指针的区别和联系（笔试热点）\n引用必须指向有效的变量,指针可以为空.\nsizeof指针对象和引用对象的意义不一样.sizeof引用得到的是所指向的变量的大小,而sizeof指针是对象地址的大小.\n指针和引用自增(++)自减(--)意义不一样.\n相对而言,引用比指针更安全.\n\n\n\n## 引用和指针的区别和联系\n### 不同点\n指针是一个实体,而引用仅是个别名;\n引用使用时无需解引用(*),指针需要解引用;\n引用只能在定义时被初始化一次,之后不可变;指针可变;\n引用没有 const,指针有 const;const修饰的指针不可变;\n引用不能为空,指针可以为空;\n\"sizeof 引用\"得到的是所指向的变量(对象)的大小,而\"sizeof 指针\"得到的是指针本身(所指向的变量或对象的地址)的大小;\n指针和引用的自增(++)运算意义不一样;\n从内存分配上看:程序为指针变量分配内存区域,而引用不需要分配内存区域.\n\n### 相同点\n两者都是地址的概念,指针指向一块儿内存,其内容为所指内存的地址;引用是某块儿内存的别名\n\n\n\n## const在C和C++中的含义(笔试热点)\n### C中的const,功能比较单一,较容易理解\n作用:被修饰的内容不可更改.\n使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）\n特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.\n\n### c++中的const\n#### 非类成员const\nconst变量默认是内部连接的,因此在不同的编译单元中可以有同名的const 变量定义.\n编译时常量,因此可以像#define一样使用,而且因为上面一点,可以在头文件中定义const变量,包含的不同的cpp文件（编译\n单元）中使用而不引起命名冲突.\n编译器默认不为const变量分配内存,除非:1. 使用 extern 申明, 2:程序中有引用const 变量的地址.\nc++中临时对象/内置变量默认具有const属性.\n\n#### 类中的const\n与c语言中的const一样,只是运行时常量,不能作为数组维数使用,即不能取代#define.在类中使用下面两种方式取代#define: 1:static const... \nenum{....}//enum 不占存储空间.\n类中的const 变量占用存储空间.\n类中的const成员变量需要在构造函数初始化列表中初始化.\nconst 对象:在该对象生命周期内,必须保证没有任何成员变量被改变.const对象只能调用const成员函数.\nconst成员函数: void fun() const ... 不仅能被const对象调用,也能被非const对象调用,因此,如果确认一个任何成员函数不改\n变任何成员变量,应该习惯性将该函数定义成const类型.\n如果一个对象被定义成const,那么该const对象\"可能\"会被放入到ROM当中,这在嵌入式开发当中有时非常重要.\n\n\n***\n> 本文引用自：http://blog.csdn.net/Xiao__Tian__/article/details/51814617\n","source":"_posts/2018-03-09-C++引用的理解.md","raw":"---\ntitle: C++引用的理解\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: c++\n---\n\n## 定义\n引用引入了对象的一个同义词.定义引用的表示方法与定义指针相似,只是用&代替了*.引用（reference）是c++对c语言的重要扩充.引用就是某\n一变量（目标）的一个别名,对引用的操作与对变量直接操作完全一样.其格式为:类型 &引用变量名 = 已定义过的变量名.\n\n\n## 特点\n一个变量可取多个别名.\n\n引用必须初始化.\n\n引用只能在初始化的时候引用一次 ,不能更改为转而引用其他变量.\n\n\n\n## code\n### 基础引用\n\n```c++\nvoid TestReference1 ()  \n{  \n     int a = 1;  \n     int& b = a;  \n  \n     cout<<\"a:address->\" <<&a<< endl;  \n     cout<<\"b:address->\" <<&b<< endl;  \n  \n     a = 2;  \n     b = 3;  \n     int& c = b;// 引用一个引用变量,别名的别名  \n     c = 4;  \n}\n```\n\n### const引用\n\n```c++\nvoid TestReference2 ()  \n{  \n     int d1 = 4;  \n     const int & d2 = d1;  \n     d1 = 5;//d1改变,d2的值也会改变.  \n     //d2 = 6;//不能给常量（不能被修改的量）赋值.  \n  \n     const int d3 = 1;  \n     const int & d4 = d3;  \n     //int&d5 = d3;  \n     const int & d6 = 5;//常量具有常性,只有常引用可以引用常量  \n  \n     double d7 = 1.1;  \n     //int& d8 = d7;//d7是double类型,d8是int,d7赋值给 d8时要生成一个临时变量  \n                   //也就是说d8引用的是这个带有常性的临时变量,所以不能赋值.  \n     const int& d9 = d7;  \n}  \n```\n\n\n\n## 引用作参数\n```c++\n1.【值传递】如果形参为非引用的传值方式,则生成局部临时变量接收实参的值  \nvoid Swap (int left, int right) //值传递的方式无法实现交换,因为传参时对于参数left和right拷贝一临时副本,交换的是副本值,因为其是临时变量函数退出,变量销 {                                //毁,并不会影响外部left和right的值.  \n     int temp = left;  \n     left = right ;  \n     right = temp ;  \n}  \n  \n2.【引用传递】如果形参为引用类型,则形参是实参的别名.  \nvoid Swap (int& left, int& right)//使用引用的话,不做临时拷贝,&的使用说明此处只是原参数的另一个名字而已,所以修改时直接在原参数的基础上修改变量值.  \n{  \n     int temp = left;  \n     right = left ;  \n     left = temp ;  \n}  \n  \n3.【指针传递】  \nvoid Swap (int* pLeft, int* pRight)//传入的是地址,因为地址是唯一的,所以指针通过地址的访问进而可修改其内容.  \n{  \n     int temp = *pLeft;  \n     *pLeft = *pRight;  \n     *pRight = temp;  \n}  \n```\n\n***\n\n## 注意\n不要返回一个临时变量的引用.\n如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.\n\n### 引用和指针的区别和联系（笔试热点）\n引用必须指向有效的变量,指针可以为空.\nsizeof指针对象和引用对象的意义不一样.sizeof引用得到的是所指向的变量的大小,而sizeof指针是对象地址的大小.\n指针和引用自增(++)自减(--)意义不一样.\n相对而言,引用比指针更安全.\n\n\n\n## 引用和指针的区别和联系\n### 不同点\n指针是一个实体,而引用仅是个别名;\n引用使用时无需解引用(*),指针需要解引用;\n引用只能在定义时被初始化一次,之后不可变;指针可变;\n引用没有 const,指针有 const;const修饰的指针不可变;\n引用不能为空,指针可以为空;\n\"sizeof 引用\"得到的是所指向的变量(对象)的大小,而\"sizeof 指针\"得到的是指针本身(所指向的变量或对象的地址)的大小;\n指针和引用的自增(++)运算意义不一样;\n从内存分配上看:程序为指针变量分配内存区域,而引用不需要分配内存区域.\n\n### 相同点\n两者都是地址的概念,指针指向一块儿内存,其内容为所指内存的地址;引用是某块儿内存的别名\n\n\n\n## const在C和C++中的含义(笔试热点)\n### C中的const,功能比较单一,较容易理解\n作用:被修饰的内容不可更改.\n使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）\n特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.\n\n### c++中的const\n#### 非类成员const\nconst变量默认是内部连接的,因此在不同的编译单元中可以有同名的const 变量定义.\n编译时常量,因此可以像#define一样使用,而且因为上面一点,可以在头文件中定义const变量,包含的不同的cpp文件（编译\n单元）中使用而不引起命名冲突.\n编译器默认不为const变量分配内存,除非:1. 使用 extern 申明, 2:程序中有引用const 变量的地址.\nc++中临时对象/内置变量默认具有const属性.\n\n#### 类中的const\n与c语言中的const一样,只是运行时常量,不能作为数组维数使用,即不能取代#define.在类中使用下面两种方式取代#define: 1:static const... \nenum{....}//enum 不占存储空间.\n类中的const 变量占用存储空间.\n类中的const成员变量需要在构造函数初始化列表中初始化.\nconst 对象:在该对象生命周期内,必须保证没有任何成员变量被改变.const对象只能调用const成员函数.\nconst成员函数: void fun() const ... 不仅能被const对象调用,也能被非const对象调用,因此,如果确认一个任何成员函数不改\n变任何成员变量,应该习惯性将该函数定义成const类型.\n如果一个对象被定义成const,那么该const对象\"可能\"会被放入到ROM当中,这在嵌入式开发当中有时非常重要.\n\n\n***\n> 本文引用自：http://blog.csdn.net/Xiao__Tian__/article/details/51814617\n","slug":"2018-03-09-C++引用的理解","published":1,"updated":"2018-03-11T15:14:25.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjdc00146stwinp1t2im","content":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>引用引入了对象的一个同义词.定义引用的表示方法与定义指针相似,只是用&amp;代替了*.引用（reference）是c++对c语言的重要扩充.引用就是某<br>一变量（目标）的一个别名,对引用的操作与对变量直接操作完全一样.其格式为:类型 &amp;引用变量名 = 已定义过的变量名.</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>一个变量可取多个别名.</p>\n<p>引用必须初始化.</p>\n<p>引用只能在初始化的时候引用一次 ,不能更改为转而引用其他变量.</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><h3 id=\"基础引用\"><a href=\"#基础引用\" class=\"headerlink\" title=\"基础引用\"></a>基础引用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestReference1</span> <span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span>&amp; b = a;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:address-&gt;\"</span> &lt;&lt;&amp;a&lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:address-&gt;\"</span> &lt;&lt;&amp;b&lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     a = <span class=\"number\">2</span>;  </span><br><span class=\"line\">     b = <span class=\"number\">3</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span>&amp; c = b;<span class=\"comment\">// 引用一个引用变量,别名的别名  </span></span><br><span class=\"line\">     c = <span class=\"number\">4</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"const引用\"><a href=\"#const引用\" class=\"headerlink\" title=\"const引用\"></a>const引用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestReference2</span> <span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> d1 = <span class=\"number\">4</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d2 = d1;  </span><br><span class=\"line\">     d1 = <span class=\"number\">5</span>;<span class=\"comment\">//d1改变,d2的值也会改变.  </span></span><br><span class=\"line\">     <span class=\"comment\">//d2 = 6;//不能给常量（不能被修改的量）赋值.  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> d3 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d4 = d3;  </span><br><span class=\"line\">     <span class=\"comment\">//int&amp;d5 = d3;  </span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d6 = <span class=\"number\">5</span>;<span class=\"comment\">//常量具有常性,只有常引用可以引用常量  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"keyword\">double</span> d7 = <span class=\"number\">1.1</span>;  </span><br><span class=\"line\">     <span class=\"comment\">//int&amp; d8 = d7;//d7是double类型,d8是int,d7赋值给 d8时要生成一个临时变量  </span></span><br><span class=\"line\">                   <span class=\"comment\">//也就是说d8引用的是这个带有常性的临时变量,所以不能赋值.  </span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; d9 = d7;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用作参数\"><a href=\"#引用作参数\" class=\"headerlink\" title=\"引用作参数\"></a>引用作参数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>【值传递】如果形参为非引用的传值方式,则生成局部临时变量接收实参的值  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> <span class=\"comment\">//值传递的方式无法实现交换,因为传参时对于参数left和right拷贝一临时副本,交换的是副本值,因为其是临时变量函数退出,变量销 &#123;                                //毁,并不会影响外部left和right的值.  </span></span></span><br><span class=\"line\"><span class=\"function\">     <span class=\"keyword\">int</span> temp </span>= left;  </span><br><span class=\"line\">     left = right ;  </span><br><span class=\"line\">     right = temp ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">2.</span>【引用传递】如果形参为引用类型,则形参是实参的别名.  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span>&amp; left, <span class=\"keyword\">int</span>&amp; right)</span><span class=\"comment\">//使用引用的话,不做临时拷贝,&amp;的使用说明此处只是原参数的另一个名字而已,所以修改时直接在原参数的基础上修改变量值.  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = left;  </span><br><span class=\"line\">     right = left ;  </span><br><span class=\"line\">     left = temp ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">3.</span>【指针传递】  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span>* pLeft, <span class=\"keyword\">int</span>* pRight)</span><span class=\"comment\">//传入的是地址,因为地址是唯一的,所以指针通过地址的访问进而可修改其内容.  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = *pLeft;  </span><br><span class=\"line\">     *pLeft = *pRight;  </span><br><span class=\"line\">     *pRight = temp;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>不要返回一个临时变量的引用.<br>如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.</p>\n<h3 id=\"引用和指针的区别和联系（笔试热点）\"><a href=\"#引用和指针的区别和联系（笔试热点）\" class=\"headerlink\" title=\"引用和指针的区别和联系（笔试热点）\"></a>引用和指针的区别和联系（笔试热点）</h3><p>引用必须指向有效的变量,指针可以为空.<br>sizeof指针对象和引用对象的意义不一样.sizeof引用得到的是所指向的变量的大小,而sizeof指针是对象地址的大小.<br>指针和引用自增(++)自减(–)意义不一样.<br>相对而言,引用比指针更安全.</p>\n<h2 id=\"引用和指针的区别和联系\"><a href=\"#引用和指针的区别和联系\" class=\"headerlink\" title=\"引用和指针的区别和联系\"></a>引用和指针的区别和联系</h2><h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><p>指针是一个实体,而引用仅是个别名;<br>引用使用时无需解引用(*),指针需要解引用;<br>引用只能在定义时被初始化一次,之后不可变;指针可变;<br>引用没有 const,指针有 const;const修饰的指针不可变;<br>引用不能为空,指针可以为空;<br>“sizeof 引用”得到的是所指向的变量(对象)的大小,而”sizeof 指针”得到的是指针本身(所指向的变量或对象的地址)的大小;<br>指针和引用的自增(++)运算意义不一样;<br>从内存分配上看:程序为指针变量分配内存区域,而引用不需要分配内存区域.</p>\n<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><p>两者都是地址的概念,指针指向一块儿内存,其内容为所指内存的地址;引用是某块儿内存的别名</p>\n<h2 id=\"const在C和C-中的含义-笔试热点\"><a href=\"#const在C和C-中的含义-笔试热点\" class=\"headerlink\" title=\"const在C和C++中的含义(笔试热点)\"></a>const在C和C++中的含义(笔试热点)</h2><h3 id=\"C中的const-功能比较单一-较容易理解\"><a href=\"#C中的const-功能比较单一-较容易理解\" class=\"headerlink\" title=\"C中的const,功能比较单一,较容易理解\"></a>C中的const,功能比较单一,较容易理解</h3><p>作用:被修饰的内容不可更改.<br>使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）<br>特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.</p>\n<h3 id=\"c-中的const\"><a href=\"#c-中的const\" class=\"headerlink\" title=\"c++中的const\"></a>c++中的const</h3><h4 id=\"非类成员const\"><a href=\"#非类成员const\" class=\"headerlink\" title=\"非类成员const\"></a>非类成员const</h4><p>const变量默认是内部连接的,因此在不同的编译单元中可以有同名的const 变量定义.<br>编译时常量,因此可以像#define一样使用,而且因为上面一点,可以在头文件中定义const变量,包含的不同的cpp文件（编译<br>单元）中使用而不引起命名冲突.<br>编译器默认不为const变量分配内存,除非:1. 使用 extern 申明, 2:程序中有引用const 变量的地址.<br>c++中临时对象/内置变量默认具有const属性.</p>\n<h4 id=\"类中的const\"><a href=\"#类中的const\" class=\"headerlink\" title=\"类中的const\"></a>类中的const</h4><p>与c语言中的const一样,只是运行时常量,不能作为数组维数使用,即不能取代#define.在类中使用下面两种方式取代#define: 1:static const…<br>enum{….}//enum 不占存储空间.<br>类中的const 变量占用存储空间.<br>类中的const成员变量需要在构造函数初始化列表中初始化.<br>const 对象:在该对象生命周期内,必须保证没有任何成员变量被改变.const对象只能调用const成员函数.<br>const成员函数: void fun() const … 不仅能被const对象调用,也能被非const对象调用,因此,如果确认一个任何成员函数不改<br>变任何成员变量,应该习惯性将该函数定义成const类型.<br>如果一个对象被定义成const,那么该const对象”可能”会被放入到ROM当中,这在嵌入式开发当中有时非常重要.</p>\n<hr>\n<blockquote>\n<p>本文引用自：<a href=\"http://blog.csdn.net/Xiao__Tian__/article/details/51814617\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/Xiao__Tian__/article/details/51814617</a></p>\n</blockquote>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>引用引入了对象的一个同义词.定义引用的表示方法与定义指针相似,只是用&amp;代替了*.引用（reference）是c++对c语言的重要扩充.引用就是某<br>一变量（目标）的一个别名,对引用的操作与对变量直接操作完全一样.其格式为:类型 &amp;引用变量名 = 已定义过的变量名.</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>一个变量可取多个别名.</p>\n<p>引用必须初始化.</p>\n<p>引用只能在初始化的时候引用一次 ,不能更改为转而引用其他变量.</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><h3 id=\"基础引用\"><a href=\"#基础引用\" class=\"headerlink\" title=\"基础引用\"></a>基础引用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestReference1</span> <span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span>&amp; b = a;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:address-&gt;\"</span> &lt;&lt;&amp;a&lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:address-&gt;\"</span> &lt;&lt;&amp;b&lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     a = <span class=\"number\">2</span>;  </span><br><span class=\"line\">     b = <span class=\"number\">3</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span>&amp; c = b;<span class=\"comment\">// 引用一个引用变量,别名的别名  </span></span><br><span class=\"line\">     c = <span class=\"number\">4</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"const引用\"><a href=\"#const引用\" class=\"headerlink\" title=\"const引用\"></a>const引用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestReference2</span> <span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> d1 = <span class=\"number\">4</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d2 = d1;  </span><br><span class=\"line\">     d1 = <span class=\"number\">5</span>;<span class=\"comment\">//d1改变,d2的值也会改变.  </span></span><br><span class=\"line\">     <span class=\"comment\">//d2 = 6;//不能给常量（不能被修改的量）赋值.  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> d3 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d4 = d3;  </span><br><span class=\"line\">     <span class=\"comment\">//int&amp;d5 = d3;  </span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d6 = <span class=\"number\">5</span>;<span class=\"comment\">//常量具有常性,只有常引用可以引用常量  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"keyword\">double</span> d7 = <span class=\"number\">1.1</span>;  </span><br><span class=\"line\">     <span class=\"comment\">//int&amp; d8 = d7;//d7是double类型,d8是int,d7赋值给 d8时要生成一个临时变量  </span></span><br><span class=\"line\">                   <span class=\"comment\">//也就是说d8引用的是这个带有常性的临时变量,所以不能赋值.  </span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; d9 = d7;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用作参数\"><a href=\"#引用作参数\" class=\"headerlink\" title=\"引用作参数\"></a>引用作参数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>【值传递】如果形参为非引用的传值方式,则生成局部临时变量接收实参的值  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> <span class=\"comment\">//值传递的方式无法实现交换,因为传参时对于参数left和right拷贝一临时副本,交换的是副本值,因为其是临时变量函数退出,变量销 &#123;                                //毁,并不会影响外部left和right的值.  </span></span></span><br><span class=\"line\"><span class=\"function\">     <span class=\"keyword\">int</span> temp </span>= left;  </span><br><span class=\"line\">     left = right ;  </span><br><span class=\"line\">     right = temp ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">2.</span>【引用传递】如果形参为引用类型,则形参是实参的别名.  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span>&amp; left, <span class=\"keyword\">int</span>&amp; right)</span><span class=\"comment\">//使用引用的话,不做临时拷贝,&amp;的使用说明此处只是原参数的另一个名字而已,所以修改时直接在原参数的基础上修改变量值.  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = left;  </span><br><span class=\"line\">     right = left ;  </span><br><span class=\"line\">     left = temp ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">3.</span>【指针传递】  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span>* pLeft, <span class=\"keyword\">int</span>* pRight)</span><span class=\"comment\">//传入的是地址,因为地址是唯一的,所以指针通过地址的访问进而可修改其内容.  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = *pLeft;  </span><br><span class=\"line\">     *pLeft = *pRight;  </span><br><span class=\"line\">     *pRight = temp;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>不要返回一个临时变量的引用.<br>如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.</p>\n<h3 id=\"引用和指针的区别和联系（笔试热点）\"><a href=\"#引用和指针的区别和联系（笔试热点）\" class=\"headerlink\" title=\"引用和指针的区别和联系（笔试热点）\"></a>引用和指针的区别和联系（笔试热点）</h3><p>引用必须指向有效的变量,指针可以为空.<br>sizeof指针对象和引用对象的意义不一样.sizeof引用得到的是所指向的变量的大小,而sizeof指针是对象地址的大小.<br>指针和引用自增(++)自减(–)意义不一样.<br>相对而言,引用比指针更安全.</p>\n<h2 id=\"引用和指针的区别和联系\"><a href=\"#引用和指针的区别和联系\" class=\"headerlink\" title=\"引用和指针的区别和联系\"></a>引用和指针的区别和联系</h2><h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><p>指针是一个实体,而引用仅是个别名;<br>引用使用时无需解引用(*),指针需要解引用;<br>引用只能在定义时被初始化一次,之后不可变;指针可变;<br>引用没有 const,指针有 const;const修饰的指针不可变;<br>引用不能为空,指针可以为空;<br>“sizeof 引用”得到的是所指向的变量(对象)的大小,而”sizeof 指针”得到的是指针本身(所指向的变量或对象的地址)的大小;<br>指针和引用的自增(++)运算意义不一样;<br>从内存分配上看:程序为指针变量分配内存区域,而引用不需要分配内存区域.</p>\n<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><p>两者都是地址的概念,指针指向一块儿内存,其内容为所指内存的地址;引用是某块儿内存的别名</p>\n<h2 id=\"const在C和C-中的含义-笔试热点\"><a href=\"#const在C和C-中的含义-笔试热点\" class=\"headerlink\" title=\"const在C和C++中的含义(笔试热点)\"></a>const在C和C++中的含义(笔试热点)</h2><h3 id=\"C中的const-功能比较单一-较容易理解\"><a href=\"#C中的const-功能比较单一-较容易理解\" class=\"headerlink\" title=\"C中的const,功能比较单一,较容易理解\"></a>C中的const,功能比较单一,较容易理解</h3><p>作用:被修饰的内容不可更改.<br>使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）<br>特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.</p>\n<h3 id=\"c-中的const\"><a href=\"#c-中的const\" class=\"headerlink\" title=\"c++中的const\"></a>c++中的const</h3><h4 id=\"非类成员const\"><a href=\"#非类成员const\" class=\"headerlink\" title=\"非类成员const\"></a>非类成员const</h4><p>const变量默认是内部连接的,因此在不同的编译单元中可以有同名的const 变量定义.<br>编译时常量,因此可以像#define一样使用,而且因为上面一点,可以在头文件中定义const变量,包含的不同的cpp文件（编译<br>单元）中使用而不引起命名冲突.<br>编译器默认不为const变量分配内存,除非:1. 使用 extern 申明, 2:程序中有引用const 变量的地址.<br>c++中临时对象/内置变量默认具有const属性.</p>\n<h4 id=\"类中的const\"><a href=\"#类中的const\" class=\"headerlink\" title=\"类中的const\"></a>类中的const</h4><p>与c语言中的const一样,只是运行时常量,不能作为数组维数使用,即不能取代#define.在类中使用下面两种方式取代#define: 1:static const…<br>enum{….}//enum 不占存储空间.<br>类中的const 变量占用存储空间.<br>类中的const成员变量需要在构造函数初始化列表中初始化.<br>const 对象:在该对象生命周期内,必须保证没有任何成员变量被改变.const对象只能调用const成员函数.<br>const成员函数: void fun() const … 不仅能被const对象调用,也能被非const对象调用,因此,如果确认一个任何成员函数不改<br>变任何成员变量,应该习惯性将该函数定义成const类型.<br>如果一个对象被定义成const,那么该const对象”可能”会被放入到ROM当中,这在嵌入式开发当中有时非常重要.</p>\n<hr>\n<blockquote>\n<p>本文引用自：<a href=\"http://blog.csdn.net/Xiao__Tian__/article/details/51814617\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/Xiao__Tian__/article/details/51814617</a></p>\n</blockquote>\n"},{"title":"c语言1-进程空间,一维数组","date":"2018-03-09T12:49:16.000Z","_content":"\n## 数据类型\n### 数据类型的作用\n在线性的内存中添加一种逻辑操作\n\n### 补码的特点\n正数的补码是他本身\n负数的补码：该负数对应的正数的补码取反加一\n一个8位的有符号的数据范围为什么是-128到127：因为补码编码的格式不同导致\n\n### 数据在内存中的意义\n数据本身是没有意义的，只是要看我们怎样来解释他\n\n### 类型转化\n小类型遇到大类型需要转化为大类型，位数不够的话会根据原类型的符号位来补位（是0补0，是1补1）\n整形遇到浮点型需要转化为浮点型\n有符号和无符号的运算结果是有符号的\n转化都是低位对低位进行取值（低位对齐）\n\n\n## 进程空间\n### 虚拟空间\n虚拟内存不是我们生活上指的内存条，而是我们通过他来映射到物理内存的一套机制；\n虚拟内存的好处：早先的电脑是直接将我们运行的程序加载到物理内存中，所以会造成不同的程序直接可以相互调用的后果（很不安全），但是有了这套机制之后，就没有这个缺点了\n\n### 变量的存放区域总结\n只要是未初始化的全局或者是静态变量全部储存在data段的未初始化数据段(bss)，默认初始化为0\nauto的局部变量名无论初始化或者未初始化都储存在栈空间\n所有的常量都是存储在data区域的只读区域\ntext是储存二进制文件（运行程序）(.exe/.out)的地方\n\n### 图示\n![进程空间](1.jpg)\n\n\n## 数组以及练习\n[点击查看代码](1.c)\n<font color=red>注意:</font>地址的加减其实是加减地址所指向空间的数量，只有&+数组名才是操作数组的整体","source":"_posts/2018-03-09-c语言1-进程空间,一维数组.md","raw":"---\ntitle: c语言1-进程空间,一维数组\ndate: 2018-03-09 20:49:16\ncategories: 技术\ntags: c语言\n---\n\n## 数据类型\n### 数据类型的作用\n在线性的内存中添加一种逻辑操作\n\n### 补码的特点\n正数的补码是他本身\n负数的补码：该负数对应的正数的补码取反加一\n一个8位的有符号的数据范围为什么是-128到127：因为补码编码的格式不同导致\n\n### 数据在内存中的意义\n数据本身是没有意义的，只是要看我们怎样来解释他\n\n### 类型转化\n小类型遇到大类型需要转化为大类型，位数不够的话会根据原类型的符号位来补位（是0补0，是1补1）\n整形遇到浮点型需要转化为浮点型\n有符号和无符号的运算结果是有符号的\n转化都是低位对低位进行取值（低位对齐）\n\n\n## 进程空间\n### 虚拟空间\n虚拟内存不是我们生活上指的内存条，而是我们通过他来映射到物理内存的一套机制；\n虚拟内存的好处：早先的电脑是直接将我们运行的程序加载到物理内存中，所以会造成不同的程序直接可以相互调用的后果（很不安全），但是有了这套机制之后，就没有这个缺点了\n\n### 变量的存放区域总结\n只要是未初始化的全局或者是静态变量全部储存在data段的未初始化数据段(bss)，默认初始化为0\nauto的局部变量名无论初始化或者未初始化都储存在栈空间\n所有的常量都是存储在data区域的只读区域\ntext是储存二进制文件（运行程序）(.exe/.out)的地方\n\n### 图示\n![进程空间](1.jpg)\n\n\n## 数组以及练习\n[点击查看代码](1.c)\n<font color=red>注意:</font>地址的加减其实是加减地址所指向空间的数量，只有&+数组名才是操作数组的整体","slug":"2018-03-09-c语言1-进程空间,一维数组","published":1,"updated":"2018-03-11T16:41:23.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjdf00186stwsnfpicqd","content":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"数据类型的作用\"><a href=\"#数据类型的作用\" class=\"headerlink\" title=\"数据类型的作用\"></a>数据类型的作用</h3><p>在线性的内存中添加一种逻辑操作</p>\n<h3 id=\"补码的特点\"><a href=\"#补码的特点\" class=\"headerlink\" title=\"补码的特点\"></a>补码的特点</h3><p>正数的补码是他本身<br>负数的补码：该负数对应的正数的补码取反加一<br>一个8位的有符号的数据范围为什么是-128到127：因为补码编码的格式不同导致</p>\n<h3 id=\"数据在内存中的意义\"><a href=\"#数据在内存中的意义\" class=\"headerlink\" title=\"数据在内存中的意义\"></a>数据在内存中的意义</h3><p>数据本身是没有意义的，只是要看我们怎样来解释他</p>\n<h3 id=\"类型转化\"><a href=\"#类型转化\" class=\"headerlink\" title=\"类型转化\"></a>类型转化</h3><p>小类型遇到大类型需要转化为大类型，位数不够的话会根据原类型的符号位来补位（是0补0，是1补1）<br>整形遇到浮点型需要转化为浮点型<br>有符号和无符号的运算结果是有符号的<br>转化都是低位对低位进行取值（低位对齐）</p>\n<h2 id=\"进程空间\"><a href=\"#进程空间\" class=\"headerlink\" title=\"进程空间\"></a>进程空间</h2><h3 id=\"虚拟空间\"><a href=\"#虚拟空间\" class=\"headerlink\" title=\"虚拟空间\"></a>虚拟空间</h3><p>虚拟内存不是我们生活上指的内存条，而是我们通过他来映射到物理内存的一套机制；<br>虚拟内存的好处：早先的电脑是直接将我们运行的程序加载到物理内存中，所以会造成不同的程序直接可以相互调用的后果（很不安全），但是有了这套机制之后，就没有这个缺点了</p>\n<h3 id=\"变量的存放区域总结\"><a href=\"#变量的存放区域总结\" class=\"headerlink\" title=\"变量的存放区域总结\"></a>变量的存放区域总结</h3><p>只要是未初始化的全局或者是静态变量全部储存在data段的未初始化数据段(bss)，默认初始化为0<br>auto的局部变量名无论初始化或者未初始化都储存在栈空间<br>所有的常量都是存储在data区域的只读区域<br>text是储存二进制文件（运行程序）(.exe/.out)的地方</p>\n<h3 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h3><p><img src=\"/2018/03/09/2018-03-09-c语言1-进程空间,一维数组/1.jpg\" alt=\"进程空间\"></p>\n<h2 id=\"数组以及练习\"><a href=\"#数组以及练习\" class=\"headerlink\" title=\"数组以及练习\"></a>数组以及练习</h2><p><a href=\"1.c\">点击查看代码</a></p>\n<p><font color=\"red\">注意:</font>地址的加减其实是加减地址所指向空间的数量，只有&amp;+数组名才是操作数组的整体</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"数据类型的作用\"><a href=\"#数据类型的作用\" class=\"headerlink\" title=\"数据类型的作用\"></a>数据类型的作用</h3><p>在线性的内存中添加一种逻辑操作</p>\n<h3 id=\"补码的特点\"><a href=\"#补码的特点\" class=\"headerlink\" title=\"补码的特点\"></a>补码的特点</h3><p>正数的补码是他本身<br>负数的补码：该负数对应的正数的补码取反加一<br>一个8位的有符号的数据范围为什么是-128到127：因为补码编码的格式不同导致</p>\n<h3 id=\"数据在内存中的意义\"><a href=\"#数据在内存中的意义\" class=\"headerlink\" title=\"数据在内存中的意义\"></a>数据在内存中的意义</h3><p>数据本身是没有意义的，只是要看我们怎样来解释他</p>\n<h3 id=\"类型转化\"><a href=\"#类型转化\" class=\"headerlink\" title=\"类型转化\"></a>类型转化</h3><p>小类型遇到大类型需要转化为大类型，位数不够的话会根据原类型的符号位来补位（是0补0，是1补1）<br>整形遇到浮点型需要转化为浮点型<br>有符号和无符号的运算结果是有符号的<br>转化都是低位对低位进行取值（低位对齐）</p>\n<h2 id=\"进程空间\"><a href=\"#进程空间\" class=\"headerlink\" title=\"进程空间\"></a>进程空间</h2><h3 id=\"虚拟空间\"><a href=\"#虚拟空间\" class=\"headerlink\" title=\"虚拟空间\"></a>虚拟空间</h3><p>虚拟内存不是我们生活上指的内存条，而是我们通过他来映射到物理内存的一套机制；<br>虚拟内存的好处：早先的电脑是直接将我们运行的程序加载到物理内存中，所以会造成不同的程序直接可以相互调用的后果（很不安全），但是有了这套机制之后，就没有这个缺点了</p>\n<h3 id=\"变量的存放区域总结\"><a href=\"#变量的存放区域总结\" class=\"headerlink\" title=\"变量的存放区域总结\"></a>变量的存放区域总结</h3><p>只要是未初始化的全局或者是静态变量全部储存在data段的未初始化数据段(bss)，默认初始化为0<br>auto的局部变量名无论初始化或者未初始化都储存在栈空间<br>所有的常量都是存储在data区域的只读区域<br>text是储存二进制文件（运行程序）(.exe/.out)的地方</p>\n<h3 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h3><p><img src=\"/2018/03/09/2018-03-09-c语言1-进程空间,一维数组/1.jpg\" alt=\"进程空间\"></p>\n<h2 id=\"数组以及练习\"><a href=\"#数组以及练习\" class=\"headerlink\" title=\"数组以及练习\"></a>数组以及练习</h2><p><a href=\"1.c\">点击查看代码</a></p>\n<p><font color=\"red\">注意:</font>地址的加减其实是加减地址所指向空间的数量，只有&amp;+数组名才是操作数组的整体</p>\n"},{"title":"virtualbox中ubuntu和windows共享文件夹设置","date":"2018-03-09T12:14:29.000Z","_content":"\n\n## 系统平台\n系统平台：win8.1、virtualbox4.3.8、ubuntu12.04\n安装VBoxGuestAdditions_4.3.8.iso增强工具，安装完毕后根据提示重启Ubuntu，具体操作如下：\n\n### Step 1\n<img src=\"1.png\"/>\n\n### Step 2.安装virtualbox增强包\n```shell\nlinjiqin@ubuntu:~$ cd ~\nlinjiqin@ubuntu:~$ su -\n密码： \nroot@ubuntu:~# cd /media/\nroot@ubuntu:/media# ls\nsf_share  VBOXADDITIONS_4.3.8_92456\nroot@ubuntu:/media# cd VBOXADDITIONS_4.3.8_92456/\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# ls\n32Bit        cert                    VBoxSolarisAdditions.pkg\n64Bit        OS2                     VBoxWindowsAdditions-amd64.exe\nAUTORUN.INF  runasroot.sh            VBoxWindowsAdditions.exe\nautorun.sh   VBoxLinuxAdditions.run  VBoxWindowsAdditions-x86.exe\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# sudo ./VBoxLinuxAdditions.run #安装virtualbox增强包\n....\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# \n```\n\n### Step 3\n先关闭ubuntu，在virtualbox“设置”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加windows中要共享的目录，取一个名。比如我在D盘建一个名为share的文件夹，如下图：\n<img src=\"2.png\"/>\n\n### Step 4\n重启ubuntu，在ubuntu系统最上端“设备”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加第二步操作的共享目录，如下图：\n<img src=\"3.png\"/>\n\n### Step 5\n进入虚拟Ubuntu，在命令行终端下输入：\nsudo mkdir /mnt/shared\nsudo mount -t vboxsf share /mnt/shared\n其中\"share\"是之前创建的共享文件夹的名字。OK，现在Ubuntu和主机可以互传文件了。\n要想自动挂载的话，可以在/etc/fstab中添加一项\nshare /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0\n\n### 卸载的话使用下面的命令:\nsudo umount -f /mnt/shared\n\n### <font color=red>注意</font>\n共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的名字也是shared的话，在挂载的时候就会出现如下的错误信息：/sbin/mount.vboxsf: mounting failed with the error: Protocol error\n\n\n","source":"_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置.md","raw":"---\ntitle: virtualbox中ubuntu和windows共享文件夹设置\ndate: 2018-03-09 20:14:29\ncategories: 技术\ntags: [linux,windows,虚拟机]\n---\n\n\n## 系统平台\n系统平台：win8.1、virtualbox4.3.8、ubuntu12.04\n安装VBoxGuestAdditions_4.3.8.iso增强工具，安装完毕后根据提示重启Ubuntu，具体操作如下：\n\n### Step 1\n<img src=\"1.png\"/>\n\n### Step 2.安装virtualbox增强包\n```shell\nlinjiqin@ubuntu:~$ cd ~\nlinjiqin@ubuntu:~$ su -\n密码： \nroot@ubuntu:~# cd /media/\nroot@ubuntu:/media# ls\nsf_share  VBOXADDITIONS_4.3.8_92456\nroot@ubuntu:/media# cd VBOXADDITIONS_4.3.8_92456/\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# ls\n32Bit        cert                    VBoxSolarisAdditions.pkg\n64Bit        OS2                     VBoxWindowsAdditions-amd64.exe\nAUTORUN.INF  runasroot.sh            VBoxWindowsAdditions.exe\nautorun.sh   VBoxLinuxAdditions.run  VBoxWindowsAdditions-x86.exe\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# sudo ./VBoxLinuxAdditions.run #安装virtualbox增强包\n....\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# \n```\n\n### Step 3\n先关闭ubuntu，在virtualbox“设置”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加windows中要共享的目录，取一个名。比如我在D盘建一个名为share的文件夹，如下图：\n<img src=\"2.png\"/>\n\n### Step 4\n重启ubuntu，在ubuntu系统最上端“设备”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加第二步操作的共享目录，如下图：\n<img src=\"3.png\"/>\n\n### Step 5\n进入虚拟Ubuntu，在命令行终端下输入：\nsudo mkdir /mnt/shared\nsudo mount -t vboxsf share /mnt/shared\n其中\"share\"是之前创建的共享文件夹的名字。OK，现在Ubuntu和主机可以互传文件了。\n要想自动挂载的话，可以在/etc/fstab中添加一项\nshare /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0\n\n### 卸载的话使用下面的命令:\nsudo umount -f /mnt/shared\n\n### <font color=red>注意</font>\n共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的名字也是shared的话，在挂载的时候就会出现如下的错误信息：/sbin/mount.vboxsf: mounting failed with the error: Protocol error\n\n\n","slug":"2018-03-09-virtualbox中ubuntu和windows共享文件夹设置","published":1,"updated":"2018-03-11T13:28:56.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjdh001b6stwd0fmcasa","content":"<h2 id=\"系统平台\"><a href=\"#系统平台\" class=\"headerlink\" title=\"系统平台\"></a>系统平台</h2><p>系统平台：win8.1、virtualbox4.3.8、ubuntu12.04<br>安装VBoxGuestAdditions_4.3.8.iso增强工具，安装完毕后根据提示重启Ubuntu，具体操作如下：</p>\n<h3 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h3><p><img src=\"/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png\"></p>\n<h3 id=\"Step-2-安装virtualbox增强包\"><a href=\"#Step-2-安装virtualbox增强包\" class=\"headerlink\" title=\"Step 2.安装virtualbox增强包\"></a>Step 2.安装virtualbox增强包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linjiqin@ubuntu:~$ cd ~</span><br><span class=\"line\">linjiqin@ubuntu:~$ su -</span><br><span class=\"line\">密码： </span><br><span class=\"line\">root@ubuntu:~# cd /media/</span><br><span class=\"line\">root@ubuntu:/media# ls</span><br><span class=\"line\">sf_share  VBOXADDITIONS_4.3.8_92456</span><br><span class=\"line\">root@ubuntu:/media# cd VBOXADDITIONS_4.3.8_92456/</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# ls</span><br><span class=\"line\">32Bit        cert                    VBoxSolarisAdditions.pkg</span><br><span class=\"line\">64Bit        OS2                     VBoxWindowsAdditions-amd64.exe</span><br><span class=\"line\">AUTORUN.INF  runasroot.sh            VBoxWindowsAdditions.exe</span><br><span class=\"line\">autorun.sh   VBoxLinuxAdditions.run  VBoxWindowsAdditions-x86.exe</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# sudo ./VBoxLinuxAdditions.run #安装virtualbox增强包</span><br><span class=\"line\">....</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456#</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h3><p>先关闭ubuntu，在virtualbox“设置”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加windows中要共享的目录，取一个名。比如我在D盘建一个名为share的文件夹，如下图：<br><img src=\"/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png\"></p>\n<h3 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h3><p>重启ubuntu，在ubuntu系统最上端“设备”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加第二步操作的共享目录，如下图：<br><img src=\"/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png\"></p>\n<h3 id=\"Step-5\"><a href=\"#Step-5\" class=\"headerlink\" title=\"Step 5\"></a>Step 5</h3><p>进入虚拟Ubuntu，在命令行终端下输入：<br>sudo mkdir /mnt/shared<br>sudo mount -t vboxsf share /mnt/shared<br>其中”share”是之前创建的共享文件夹的名字。OK，现在Ubuntu和主机可以互传文件了。<br>要想自动挂载的话，可以在/etc/fstab中添加一项<br>share /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0</p>\n<h3 id=\"卸载的话使用下面的命令\"><a href=\"#卸载的话使用下面的命令\" class=\"headerlink\" title=\"卸载的话使用下面的命令:\"></a>卸载的话使用下面的命令:</h3><p>sudo umount -f /mnt/shared</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a><font color=\"red\">注意</font></h3><p>共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的名字也是shared的话，在挂载的时候就会出现如下的错误信息：/sbin/mount.vboxsf: mounting failed with the error: Protocol error</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"系统平台\"><a href=\"#系统平台\" class=\"headerlink\" title=\"系统平台\"></a>系统平台</h2><p>系统平台：win8.1、virtualbox4.3.8、ubuntu12.04<br>安装VBoxGuestAdditions_4.3.8.iso增强工具，安装完毕后根据提示重启Ubuntu，具体操作如下：</p>\n<h3 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h3><p><img src=\"/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png\"></p>\n<h3 id=\"Step-2-安装virtualbox增强包\"><a href=\"#Step-2-安装virtualbox增强包\" class=\"headerlink\" title=\"Step 2.安装virtualbox增强包\"></a>Step 2.安装virtualbox增强包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linjiqin@ubuntu:~$ cd ~</span><br><span class=\"line\">linjiqin@ubuntu:~$ su -</span><br><span class=\"line\">密码： </span><br><span class=\"line\">root@ubuntu:~# cd /media/</span><br><span class=\"line\">root@ubuntu:/media# ls</span><br><span class=\"line\">sf_share  VBOXADDITIONS_4.3.8_92456</span><br><span class=\"line\">root@ubuntu:/media# cd VBOXADDITIONS_4.3.8_92456/</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# ls</span><br><span class=\"line\">32Bit        cert                    VBoxSolarisAdditions.pkg</span><br><span class=\"line\">64Bit        OS2                     VBoxWindowsAdditions-amd64.exe</span><br><span class=\"line\">AUTORUN.INF  runasroot.sh            VBoxWindowsAdditions.exe</span><br><span class=\"line\">autorun.sh   VBoxLinuxAdditions.run  VBoxWindowsAdditions-x86.exe</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# sudo ./VBoxLinuxAdditions.run #安装virtualbox增强包</span><br><span class=\"line\">....</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456#</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h3><p>先关闭ubuntu，在virtualbox“设置”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加windows中要共享的目录，取一个名。比如我在D盘建一个名为share的文件夹，如下图：<br><img src=\"/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png\"></p>\n<h3 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h3><p>重启ubuntu，在ubuntu系统最上端“设备”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加第二步操作的共享目录，如下图：<br><img src=\"/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png\"></p>\n<h3 id=\"Step-5\"><a href=\"#Step-5\" class=\"headerlink\" title=\"Step 5\"></a>Step 5</h3><p>进入虚拟Ubuntu，在命令行终端下输入：<br>sudo mkdir /mnt/shared<br>sudo mount -t vboxsf share /mnt/shared<br>其中”share”是之前创建的共享文件夹的名字。OK，现在Ubuntu和主机可以互传文件了。<br>要想自动挂载的话，可以在/etc/fstab中添加一项<br>share /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0</p>\n<h3 id=\"卸载的话使用下面的命令\"><a href=\"#卸载的话使用下面的命令\" class=\"headerlink\" title=\"卸载的话使用下面的命令:\"></a>卸载的话使用下面的命令:</h3><p>sudo umount -f /mnt/shared</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a><font color=\"red\">注意</font></h3><p>共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的名字也是shared的话，在挂载的时候就会出现如下的错误信息：/sbin/mount.vboxsf: mounting failed with the error: Protocol error</p>\n"},{"title":"SBC大数据导入(代码)","date":"2013-07-13T12:46:25.000Z","_content":"\n```c#\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Data;\nusing System.IO;\nusing System.Threading;\nusing System.Web;\nusing System.Xml;\nusing System.Configuration;\nusing System.Data.SqlClient;\nusing WXMP.WinService.Data;\n\nnamespace Utility.DataImport\n{\n    public class TxtImport\n    {\n        /// <summary>\n        /// 导入数据\n        /// </summary>\n        /// <param name=\"fileName\">文件名</param>\n        /// <param name=\"columnCount\"></param>\n        /// <param name=\"xmlTableName\">xml配置名</param>\n        /// <param name=\"RealTableName\">数据库表名称</param>\n        /// <param name=\"defaultValue\"></param>\n        /// <param name=\"ConnectionKeyName\">数据库连接配置</param>\n        /// <param name=\"heardRowCount\">文件头定义行数</param>\n        /// <param name=\"footRowCount\">文件尾定义行数</param>\n        /// <returns></returns>\n        public static int ImportData(string fileName, string xmlTableName, Dictionary<string, object> defaultValue, string ConnectionKeyName = \"default\", int heardRowCount = 0, int footRowCount = 0)\n        {\n            if (fileName == \"\")\n                return 0;\n            return Insert(fileName, xmlTableName, defaultValue, ConnectionKeyName, heardRowCount, footRowCount);\n        }\n\n        /// <summary>\n        /// 导入文本文件\n        /// </summary>\n        /// <param name=\"fileFullName\">文本全路径</param>\n        /// <param name=\"columnCount\">文本里需要导入的列的数目</param>\n        public static int Insert(string fileFullName, string xmlTableName, Dictionary<string, object> defaultValue, string ConnectionKeyName, int heardRowCount = 0, int footRowCount = 0)\n        {\n            string exesql = string.Empty;\n            string tablename = string.Empty;\n            DataTable dt = XmlToDataTable(xmlTableName, out tablename, out exesql);\n            if (dt != null)\n            {\n                LoadAdpaterDataAndImport(fileFullName, dt.Columns.Count, dt, defaultValue, ConnectionKeyName, tablename, heardRowCount, footRowCount);\n\n                DbHelper.ExecuteNonQuery(exesql, ConnectionKeyName);\n                return dt.Rows.Count;\n            }\n\n            return 0;\n        }\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"fileFullName\"></param>\n        /// <param name=\"columnCount\"></param>\n        /// <param name=\"pDTScheme\"></param>\n        /// <param name=\"defaultValue\"></param>\n        /// <param name=\"connectionName\"></param>\n        /// <param name=\"realTableName\"></param>\n        /// <param name=\"heardRowCount\"></param>\n        /// <param name=\"footRowCount\"></param>\n        public static void LoadAdpaterDataAndImport(string fileFullName, int columnCount, DataTable pDTScheme, Dictionary<string, object> defaultValue, string connectionName, string realTableName, int heardRowCount = 0, int footRowCount = 0)\n        {\n            try\n            {\n                using (StreamReader sr = new StreamReader(fileFullName, Encoding.Default, true))\n                {\n                    string strTmp;\n                    DataRow dr;\n                    int i = 0;\n                    while (!sr.EndOfStream)\n                    {\n                        strTmp = sr.ReadLine();\n                        if (string.IsNullOrEmpty(strTmp))\n                            continue;\n                        i++;\n                        if (i <= heardRowCount) continue;\n                        heardRowCount = 0;\n                        dr = GetDataRow(strTmp, columnCount, pDTScheme, defaultValue);\n                        if (dr != null)\n                            pDTScheme.Rows.Add(dr);\n                        if (i % 100000 == 0)\n                        {\n                            UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);\n                            pDTScheme.Rows.Clear();\n                            i = 0;\n                            Thread.Sleep(1000);\n                        }\n                    }\n                    if (pDTScheme.Rows.Count > 0)\n                        UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);\n                    DbHelper.ExecuteNonQuery(@\"INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES('\" + fileFullName.Substring(fileFullName.LastIndexOf(\"\\\\\") + 1) + \"','\" + DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \"','\" + (i - heardRowCount - footRowCount).ToString() + \"','0');\", connectionName);\n                }\n            }\n            catch (Exception ex)\n            {\n                DbHelper.ExecuteNonQuery(@\"INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES('\" + fileFullName.Substring(fileFullName.LastIndexOf(\"\\\\\") + 1) + \"','\" + DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \"','','3');\", connectionName);\n                Utility.Logging.Log.Instance.Write(\"读取文件发生异常\" + ex.Message, Logging.MessageType.Error);\n            }\n        }\n\n        protected static DataRow GetDataRow(string strTmp, int columnCount, DataTable pDTScheme, Dictionary<string, object> defaultValue)\n        {\n            string[] result = strTmp.Split(new string[] { \"&&\" }, StringSplitOptions.None);\n            DataRow dr = null;\n            if (result.Length >= columnCount)\n            {\n                dr = pDTScheme.NewRow();\n                for (int n = 0; n < columnCount; n++)\n                {\n                    try\n                    {\n                        if (pDTScheme.Columns[n].DataType == typeof(System.Decimal) && result[n] == \"\")\n                        {\n                            dr[n] = 0;\n                        }\n                        else if (pDTScheme.Columns[n].DataType == typeof(System.Int32) && result[n] == \"\")\n                        {\n                            dr[n] = 0;\n                        }\n                        else if (pDTScheme.Columns[n].DataType != typeof(System.String) && result[n] == \"\")\n                        {\n                            dr[n] = DBNull.Value;\n                        }\n                        else if (pDTScheme.Columns[n].DataType != typeof(System.DateTime) && result[n] == \"\")\n                        {\n                            dr[n] = DBNull.Value;\n                        }\n                        else\n                            dr[n] = result[n];\n                    }\n                    catch\n                    {\n                        dr[n] = DBNull.Value;\n                    }\n                }\n                Type t = null;\n                DataColumn dc = null;\n                object obj = null;\n                for (int n = columnCount; n < pDTScheme.Columns.Count; n++)\n                {\n                    dc = pDTScheme.Columns[n];\n                    if (defaultValue != null)\n                    {\n                        if (defaultValue.TryGetValue(dc.ColumnName, out obj))\n                        {\n                            dr[n] = obj;\n                        }\n                        else\n                        {\n                            if (dc.DefaultValue == DBNull.Value)\n                            {\n                                t = pDTScheme.Columns[n].DataType;\n                                if (t == typeof(String))\n                                    dr[n] = \"\";\n                                else if (t == typeof(Guid))\n                                    dr[n] = Guid.NewGuid();\n                                else if (t == typeof(DateTime))\n                                    dr[n] = DateTime.Now;\n                                else if (t == typeof(int))\n                                    dr[n] = 0;\n                                else if (t == typeof(decimal))\n                                    dr[n] = 0.00;\n                            }\n                            else\n                            {\n                                dr[n] = pDTScheme.Columns[n].DefaultValue;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (dc.DefaultValue == DBNull.Value)\n                        {\n                            t = pDTScheme.Columns[n].DataType;\n                            if (t == typeof(String))\n                                dr[n] = \"\";\n                            else if (t == typeof(Guid))\n                                dr[n] = Guid.NewGuid();\n                            else if (t == typeof(DateTime))\n                                dr[n] = DateTime.Now;\n                            else if (t == typeof(int))\n                                dr[n] = 0;\n                            else if (t == typeof(decimal))\n                                dr[n] = 0.00;\n                        }\n                        else\n                        {\n                            dr[n] = pDTScheme.Columns[n].DefaultValue;\n                        }\n\n                    }\n                }\n\n            }\n            return dr;\n        }\n\n\n        #region【封装的业务逻辑方法，配合InsertBossDetail进行使用】\n        public static DataTable XmlToDataTable(string dataName, out string tablename, out string exesql)\n        {\n            tablename = string.Empty;\n            exesql = string.Empty;\n            string path = System.AppDomain.CurrentDomain.BaseDirectory + \"/Config/Imps.config\";\n            XmlDocument doc = new XmlDocument();\n            doc.Load(path);\n            XmlNode tableRoot = doc.SelectSingleNode(\"/imps/imp[@name='\" + dataName + \"']\");\n            if (tableRoot != null)\n            {\n\n                DataTable dt = new DataTable();\n                DataColumn dc = null;\n                string defualtValue;\n                tablename = tableRoot.SelectSingleNode(\"table\").Attributes[\"name\"].Value;\n                exesql = tableRoot.SelectSingleNode(\"sql\").InnerText;\n                foreach (XmlNode node in tableRoot.SelectSingleNode(\"table\").ChildNodes)\n                {\n                    dc = new DataColumn(node.Attributes[\"name\"].Value.Trim(), Type.GetType(node.Attributes[\"type\"].Value.Trim()));\n                    if (!string.IsNullOrEmpty(defualtValue = node.Attributes[\"default\"] != null ? node.Attributes[\"default\"].Value.Trim() : null))\n                        dc.DefaultValue = defualtValue;\n                    dt.Columns.Add(dc);\n\n                }\n                return dt;\n            }\n            return null;\n        }\n\n        /// <summary>\n        /// 用SBC方法插入数据库\n        /// </summary>\n        /// <param name=\"ConnectionStringKey\">要插入的数据库</param>\n        /// <param name=\"pDataTable\">要插入的DATATABLE</param>\n        /// <param name=\"pTableName\">对应的数据库表名</param>\n        /// <param name=\"pBulkCopyTimeout\">数据库连接过期时间,单位：秒</param>\n        public static void UseSBCInsertDB(string ConnectionStringKey, DataTable pDataTable, string pTableName, int pBulkCopyTimeout = -1, bool appingFlag = false)\n        {\n            string connectionString = ConfigurationManager.ConnectionStrings[ConnectionStringKey].ConnectionString;\n            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(connectionString))\n            {\n                sqlBulkCopy.DestinationTableName = pTableName;\n                sqlBulkCopy.BatchSize = pDataTable.Rows.Count;\n                if (pBulkCopyTimeout > 0)\n                    sqlBulkCopy.BulkCopyTimeout = pBulkCopyTimeout;\n                if (appingFlag)\n                {\n                    foreach (DataColumn dc in pDataTable.Columns)\n                        sqlBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName);\n                }\n                using (SqlConnection sqlConnection = new SqlConnection(connectionString))\n                {\n                    sqlConnection.Open();\n                    if (pDataTable != null && pDataTable.Rows.Count != 0)\n                    {\n                        sqlBulkCopy.WriteToServer(pDataTable);\n                    }\n                }\n\n            }\n        }\n        #endregion\n\n        #region【转换文件】\n        public static string TransferFile(string fileFullName, bool isDelOriFile = true)\n        {\n            string path = Path.GetDirectoryName(fileFullName);\n            //fileFullName.Substring(0, fileFullName.LastIndexOf('\\\\'));\n            string newFileName = string.Format(\"{0}{1}.txt\", path, DateTime.Now.ToString(\"yyyyMMddHHmmss\"));\n            Encoding en = GetEncoding(fileFullName, Encoding.Default);\n            using (StreamReader sr = new StreamReader(fileFullName, en, true))\n            {\n                using (StreamWriter sw = new StreamWriter(newFileName, true, Encoding.UTF8))\n                {\n                    string strTmp;\n                    while (!sr.EndOfStream)\n                    {\n                        strTmp = sr.ReadLine();\n                        if (!string.IsNullOrEmpty(strTmp))\n                        {\n                            sw.WriteLine(strTmp);\n                        }\n                    }\n                    sw.Flush();\n                    sw.Close();\n                }\n            }\n            if (isDelOriFile && File.Exists(fileFullName))\n                File.Delete(fileFullName);\n            return newFileName;\n        }\n\n\n        /// <summary>\n        /// 取得一个文本文件的编码方式。\n        /// </summary>\n        /// <param name=\"fileName\">文件名。</param>\n        /// <param name=\"defaultEncoding\">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>\n        /// <returns></returns>\n        public static Encoding GetEncoding(string fileName, Encoding defaultEncoding)\n        {\n            using (FileStream fs = new FileStream(fileName, FileMode.Open))\n            {\n                Encoding targetEncoding = GetEncoding(fs, defaultEncoding);\n                fs.Close();\n                return targetEncoding;\n            }\n        }\n\n\n        /// <summary>\n        /// 取得一个文本文件流的编码方式。\n        /// </summary>\n        /// <param name=\"stream\">文本文件流。</param>\n        /// <param name=\"defaultEncoding\">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>\n        /// <returns></returns>\n        public static Encoding GetEncoding(FileStream stream, Encoding defaultEncoding)\n        {\n\n            Encoding targetEncoding = defaultEncoding;\n            if (stream != null && stream.Length >= 2)\n            {\n\n                //保存文件流的前4个字节\n                byte byte1 = 0;\n                byte byte2 = 0;\n                byte byte3 = 0;\n                byte byte4 = 0;\n                //保存当前Seek位置\n                long origPos = stream.Seek(0, SeekOrigin.Begin);\n                stream.Seek(0, SeekOrigin.Begin);\n                int nByte = stream.ReadByte();\n                byte1 = Convert.ToByte(nByte);\n                byte2 = Convert.ToByte(stream.ReadByte());\n                if (stream.Length >= 3)\n                {\n                    byte3 = Convert.ToByte(stream.ReadByte());\n                }\n\n                if (stream.Length >= 4)\n                {\n                    byte4 = Convert.ToByte(stream.ReadByte());\n                }\n                //根据文件流的前4个字节判断Encoding\n                //Unicode {0xFF, 0xFE};\n                //BE-Unicode {0xFE, 0xFF};\n                //UTF8 = {0xEF, 0xBB, 0xBF};\n                if (byte1 == 0xFE && byte2 == 0xFF)//UnicodeBe\n                {\n                    targetEncoding = Encoding.BigEndianUnicode;\n                }\n\n                if (byte1 == 0xFF && byte2 == 0xFE && byte3 != 0xFF)//Unicode\n                {\n                    targetEncoding = Encoding.Unicode;\n                }\n\n                if (byte1 == 0xEF && byte2 == 0xBB && byte3 == 0xBF)//UTF8\n                {\n\n                    targetEncoding = Encoding.UTF8;\n\n                }\n\n                //恢复Seek位置       \n                stream.Seek(origPos, SeekOrigin.Begin);\n            }\n\n            return targetEncoding;\n        }\n        #endregion\n\n\n    }\n}\n\n```\n","source":"_posts/2018-03-09-SBC大数据导入(代码).md","raw":"---\ntitle: SBC大数据导入(代码)\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: csharp\n---\n\n```c#\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Data;\nusing System.IO;\nusing System.Threading;\nusing System.Web;\nusing System.Xml;\nusing System.Configuration;\nusing System.Data.SqlClient;\nusing WXMP.WinService.Data;\n\nnamespace Utility.DataImport\n{\n    public class TxtImport\n    {\n        /// <summary>\n        /// 导入数据\n        /// </summary>\n        /// <param name=\"fileName\">文件名</param>\n        /// <param name=\"columnCount\"></param>\n        /// <param name=\"xmlTableName\">xml配置名</param>\n        /// <param name=\"RealTableName\">数据库表名称</param>\n        /// <param name=\"defaultValue\"></param>\n        /// <param name=\"ConnectionKeyName\">数据库连接配置</param>\n        /// <param name=\"heardRowCount\">文件头定义行数</param>\n        /// <param name=\"footRowCount\">文件尾定义行数</param>\n        /// <returns></returns>\n        public static int ImportData(string fileName, string xmlTableName, Dictionary<string, object> defaultValue, string ConnectionKeyName = \"default\", int heardRowCount = 0, int footRowCount = 0)\n        {\n            if (fileName == \"\")\n                return 0;\n            return Insert(fileName, xmlTableName, defaultValue, ConnectionKeyName, heardRowCount, footRowCount);\n        }\n\n        /// <summary>\n        /// 导入文本文件\n        /// </summary>\n        /// <param name=\"fileFullName\">文本全路径</param>\n        /// <param name=\"columnCount\">文本里需要导入的列的数目</param>\n        public static int Insert(string fileFullName, string xmlTableName, Dictionary<string, object> defaultValue, string ConnectionKeyName, int heardRowCount = 0, int footRowCount = 0)\n        {\n            string exesql = string.Empty;\n            string tablename = string.Empty;\n            DataTable dt = XmlToDataTable(xmlTableName, out tablename, out exesql);\n            if (dt != null)\n            {\n                LoadAdpaterDataAndImport(fileFullName, dt.Columns.Count, dt, defaultValue, ConnectionKeyName, tablename, heardRowCount, footRowCount);\n\n                DbHelper.ExecuteNonQuery(exesql, ConnectionKeyName);\n                return dt.Rows.Count;\n            }\n\n            return 0;\n        }\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"fileFullName\"></param>\n        /// <param name=\"columnCount\"></param>\n        /// <param name=\"pDTScheme\"></param>\n        /// <param name=\"defaultValue\"></param>\n        /// <param name=\"connectionName\"></param>\n        /// <param name=\"realTableName\"></param>\n        /// <param name=\"heardRowCount\"></param>\n        /// <param name=\"footRowCount\"></param>\n        public static void LoadAdpaterDataAndImport(string fileFullName, int columnCount, DataTable pDTScheme, Dictionary<string, object> defaultValue, string connectionName, string realTableName, int heardRowCount = 0, int footRowCount = 0)\n        {\n            try\n            {\n                using (StreamReader sr = new StreamReader(fileFullName, Encoding.Default, true))\n                {\n                    string strTmp;\n                    DataRow dr;\n                    int i = 0;\n                    while (!sr.EndOfStream)\n                    {\n                        strTmp = sr.ReadLine();\n                        if (string.IsNullOrEmpty(strTmp))\n                            continue;\n                        i++;\n                        if (i <= heardRowCount) continue;\n                        heardRowCount = 0;\n                        dr = GetDataRow(strTmp, columnCount, pDTScheme, defaultValue);\n                        if (dr != null)\n                            pDTScheme.Rows.Add(dr);\n                        if (i % 100000 == 0)\n                        {\n                            UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);\n                            pDTScheme.Rows.Clear();\n                            i = 0;\n                            Thread.Sleep(1000);\n                        }\n                    }\n                    if (pDTScheme.Rows.Count > 0)\n                        UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);\n                    DbHelper.ExecuteNonQuery(@\"INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES('\" + fileFullName.Substring(fileFullName.LastIndexOf(\"\\\\\") + 1) + \"','\" + DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \"','\" + (i - heardRowCount - footRowCount).ToString() + \"','0');\", connectionName);\n                }\n            }\n            catch (Exception ex)\n            {\n                DbHelper.ExecuteNonQuery(@\"INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES('\" + fileFullName.Substring(fileFullName.LastIndexOf(\"\\\\\") + 1) + \"','\" + DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \"','','3');\", connectionName);\n                Utility.Logging.Log.Instance.Write(\"读取文件发生异常\" + ex.Message, Logging.MessageType.Error);\n            }\n        }\n\n        protected static DataRow GetDataRow(string strTmp, int columnCount, DataTable pDTScheme, Dictionary<string, object> defaultValue)\n        {\n            string[] result = strTmp.Split(new string[] { \"&&\" }, StringSplitOptions.None);\n            DataRow dr = null;\n            if (result.Length >= columnCount)\n            {\n                dr = pDTScheme.NewRow();\n                for (int n = 0; n < columnCount; n++)\n                {\n                    try\n                    {\n                        if (pDTScheme.Columns[n].DataType == typeof(System.Decimal) && result[n] == \"\")\n                        {\n                            dr[n] = 0;\n                        }\n                        else if (pDTScheme.Columns[n].DataType == typeof(System.Int32) && result[n] == \"\")\n                        {\n                            dr[n] = 0;\n                        }\n                        else if (pDTScheme.Columns[n].DataType != typeof(System.String) && result[n] == \"\")\n                        {\n                            dr[n] = DBNull.Value;\n                        }\n                        else if (pDTScheme.Columns[n].DataType != typeof(System.DateTime) && result[n] == \"\")\n                        {\n                            dr[n] = DBNull.Value;\n                        }\n                        else\n                            dr[n] = result[n];\n                    }\n                    catch\n                    {\n                        dr[n] = DBNull.Value;\n                    }\n                }\n                Type t = null;\n                DataColumn dc = null;\n                object obj = null;\n                for (int n = columnCount; n < pDTScheme.Columns.Count; n++)\n                {\n                    dc = pDTScheme.Columns[n];\n                    if (defaultValue != null)\n                    {\n                        if (defaultValue.TryGetValue(dc.ColumnName, out obj))\n                        {\n                            dr[n] = obj;\n                        }\n                        else\n                        {\n                            if (dc.DefaultValue == DBNull.Value)\n                            {\n                                t = pDTScheme.Columns[n].DataType;\n                                if (t == typeof(String))\n                                    dr[n] = \"\";\n                                else if (t == typeof(Guid))\n                                    dr[n] = Guid.NewGuid();\n                                else if (t == typeof(DateTime))\n                                    dr[n] = DateTime.Now;\n                                else if (t == typeof(int))\n                                    dr[n] = 0;\n                                else if (t == typeof(decimal))\n                                    dr[n] = 0.00;\n                            }\n                            else\n                            {\n                                dr[n] = pDTScheme.Columns[n].DefaultValue;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (dc.DefaultValue == DBNull.Value)\n                        {\n                            t = pDTScheme.Columns[n].DataType;\n                            if (t == typeof(String))\n                                dr[n] = \"\";\n                            else if (t == typeof(Guid))\n                                dr[n] = Guid.NewGuid();\n                            else if (t == typeof(DateTime))\n                                dr[n] = DateTime.Now;\n                            else if (t == typeof(int))\n                                dr[n] = 0;\n                            else if (t == typeof(decimal))\n                                dr[n] = 0.00;\n                        }\n                        else\n                        {\n                            dr[n] = pDTScheme.Columns[n].DefaultValue;\n                        }\n\n                    }\n                }\n\n            }\n            return dr;\n        }\n\n\n        #region【封装的业务逻辑方法，配合InsertBossDetail进行使用】\n        public static DataTable XmlToDataTable(string dataName, out string tablename, out string exesql)\n        {\n            tablename = string.Empty;\n            exesql = string.Empty;\n            string path = System.AppDomain.CurrentDomain.BaseDirectory + \"/Config/Imps.config\";\n            XmlDocument doc = new XmlDocument();\n            doc.Load(path);\n            XmlNode tableRoot = doc.SelectSingleNode(\"/imps/imp[@name='\" + dataName + \"']\");\n            if (tableRoot != null)\n            {\n\n                DataTable dt = new DataTable();\n                DataColumn dc = null;\n                string defualtValue;\n                tablename = tableRoot.SelectSingleNode(\"table\").Attributes[\"name\"].Value;\n                exesql = tableRoot.SelectSingleNode(\"sql\").InnerText;\n                foreach (XmlNode node in tableRoot.SelectSingleNode(\"table\").ChildNodes)\n                {\n                    dc = new DataColumn(node.Attributes[\"name\"].Value.Trim(), Type.GetType(node.Attributes[\"type\"].Value.Trim()));\n                    if (!string.IsNullOrEmpty(defualtValue = node.Attributes[\"default\"] != null ? node.Attributes[\"default\"].Value.Trim() : null))\n                        dc.DefaultValue = defualtValue;\n                    dt.Columns.Add(dc);\n\n                }\n                return dt;\n            }\n            return null;\n        }\n\n        /// <summary>\n        /// 用SBC方法插入数据库\n        /// </summary>\n        /// <param name=\"ConnectionStringKey\">要插入的数据库</param>\n        /// <param name=\"pDataTable\">要插入的DATATABLE</param>\n        /// <param name=\"pTableName\">对应的数据库表名</param>\n        /// <param name=\"pBulkCopyTimeout\">数据库连接过期时间,单位：秒</param>\n        public static void UseSBCInsertDB(string ConnectionStringKey, DataTable pDataTable, string pTableName, int pBulkCopyTimeout = -1, bool appingFlag = false)\n        {\n            string connectionString = ConfigurationManager.ConnectionStrings[ConnectionStringKey].ConnectionString;\n            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(connectionString))\n            {\n                sqlBulkCopy.DestinationTableName = pTableName;\n                sqlBulkCopy.BatchSize = pDataTable.Rows.Count;\n                if (pBulkCopyTimeout > 0)\n                    sqlBulkCopy.BulkCopyTimeout = pBulkCopyTimeout;\n                if (appingFlag)\n                {\n                    foreach (DataColumn dc in pDataTable.Columns)\n                        sqlBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName);\n                }\n                using (SqlConnection sqlConnection = new SqlConnection(connectionString))\n                {\n                    sqlConnection.Open();\n                    if (pDataTable != null && pDataTable.Rows.Count != 0)\n                    {\n                        sqlBulkCopy.WriteToServer(pDataTable);\n                    }\n                }\n\n            }\n        }\n        #endregion\n\n        #region【转换文件】\n        public static string TransferFile(string fileFullName, bool isDelOriFile = true)\n        {\n            string path = Path.GetDirectoryName(fileFullName);\n            //fileFullName.Substring(0, fileFullName.LastIndexOf('\\\\'));\n            string newFileName = string.Format(\"{0}{1}.txt\", path, DateTime.Now.ToString(\"yyyyMMddHHmmss\"));\n            Encoding en = GetEncoding(fileFullName, Encoding.Default);\n            using (StreamReader sr = new StreamReader(fileFullName, en, true))\n            {\n                using (StreamWriter sw = new StreamWriter(newFileName, true, Encoding.UTF8))\n                {\n                    string strTmp;\n                    while (!sr.EndOfStream)\n                    {\n                        strTmp = sr.ReadLine();\n                        if (!string.IsNullOrEmpty(strTmp))\n                        {\n                            sw.WriteLine(strTmp);\n                        }\n                    }\n                    sw.Flush();\n                    sw.Close();\n                }\n            }\n            if (isDelOriFile && File.Exists(fileFullName))\n                File.Delete(fileFullName);\n            return newFileName;\n        }\n\n\n        /// <summary>\n        /// 取得一个文本文件的编码方式。\n        /// </summary>\n        /// <param name=\"fileName\">文件名。</param>\n        /// <param name=\"defaultEncoding\">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>\n        /// <returns></returns>\n        public static Encoding GetEncoding(string fileName, Encoding defaultEncoding)\n        {\n            using (FileStream fs = new FileStream(fileName, FileMode.Open))\n            {\n                Encoding targetEncoding = GetEncoding(fs, defaultEncoding);\n                fs.Close();\n                return targetEncoding;\n            }\n        }\n\n\n        /// <summary>\n        /// 取得一个文本文件流的编码方式。\n        /// </summary>\n        /// <param name=\"stream\">文本文件流。</param>\n        /// <param name=\"defaultEncoding\">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>\n        /// <returns></returns>\n        public static Encoding GetEncoding(FileStream stream, Encoding defaultEncoding)\n        {\n\n            Encoding targetEncoding = defaultEncoding;\n            if (stream != null && stream.Length >= 2)\n            {\n\n                //保存文件流的前4个字节\n                byte byte1 = 0;\n                byte byte2 = 0;\n                byte byte3 = 0;\n                byte byte4 = 0;\n                //保存当前Seek位置\n                long origPos = stream.Seek(0, SeekOrigin.Begin);\n                stream.Seek(0, SeekOrigin.Begin);\n                int nByte = stream.ReadByte();\n                byte1 = Convert.ToByte(nByte);\n                byte2 = Convert.ToByte(stream.ReadByte());\n                if (stream.Length >= 3)\n                {\n                    byte3 = Convert.ToByte(stream.ReadByte());\n                }\n\n                if (stream.Length >= 4)\n                {\n                    byte4 = Convert.ToByte(stream.ReadByte());\n                }\n                //根据文件流的前4个字节判断Encoding\n                //Unicode {0xFF, 0xFE};\n                //BE-Unicode {0xFE, 0xFF};\n                //UTF8 = {0xEF, 0xBB, 0xBF};\n                if (byte1 == 0xFE && byte2 == 0xFF)//UnicodeBe\n                {\n                    targetEncoding = Encoding.BigEndianUnicode;\n                }\n\n                if (byte1 == 0xFF && byte2 == 0xFE && byte3 != 0xFF)//Unicode\n                {\n                    targetEncoding = Encoding.Unicode;\n                }\n\n                if (byte1 == 0xEF && byte2 == 0xBB && byte3 == 0xBF)//UTF8\n                {\n\n                    targetEncoding = Encoding.UTF8;\n\n                }\n\n                //恢复Seek位置       \n                stream.Seek(origPos, SeekOrigin.Begin);\n            }\n\n            return targetEncoding;\n        }\n        #endregion\n\n\n    }\n}\n\n```\n","slug":"2018-03-09-SBC大数据导入(代码)","published":1,"updated":"2018-03-11T16:39:05.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeoevjdk001f6stw9cnqjyt8","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Text;</span><br><span class=\"line\">using System.Data;</span><br><span class=\"line\">using System.IO;</span><br><span class=\"line\">using System.Threading;</span><br><span class=\"line\">using System.Web;</span><br><span class=\"line\">using System.Xml;</span><br><span class=\"line\">using System.Configuration;</span><br><span class=\"line\">using System.Data.SqlClient;</span><br><span class=\"line\">using WXMP.WinService.Data;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace Utility.DataImport</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class TxtImport</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 导入数据</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileName&quot;&gt;文件名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;xmlTableName&quot;&gt;xml配置名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;RealTableName&quot;&gt;数据库表名称&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultValue&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;ConnectionKeyName&quot;&gt;数据库连接配置&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;heardRowCount&quot;&gt;文件头定义行数&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;footRowCount&quot;&gt;文件尾定义行数&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static int ImportData(string fileName, string xmlTableName, Dictionary&lt;string, object&gt; defaultValue, string ConnectionKeyName = &quot;default&quot;, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (fileName == &quot;&quot;)</span><br><span class=\"line\">                return 0;</span><br><span class=\"line\">            return Insert(fileName, xmlTableName, defaultValue, ConnectionKeyName, heardRowCount, footRowCount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 导入文本文件</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileFullName&quot;&gt;文本全路径&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;文本里需要导入的列的数目&lt;/param&gt;</span><br><span class=\"line\">        public static int Insert(string fileFullName, string xmlTableName, Dictionary&lt;string, object&gt; defaultValue, string ConnectionKeyName, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string exesql = string.Empty;</span><br><span class=\"line\">            string tablename = string.Empty;</span><br><span class=\"line\">            DataTable dt = XmlToDataTable(xmlTableName, out tablename, out exesql);</span><br><span class=\"line\">            if (dt != null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                LoadAdpaterDataAndImport(fileFullName, dt.Columns.Count, dt, defaultValue, ConnectionKeyName, tablename, heardRowCount, footRowCount);</span><br><span class=\"line\"></span><br><span class=\"line\">                DbHelper.ExecuteNonQuery(exesql, ConnectionKeyName);</span><br><span class=\"line\">                return dt.Rows.Count;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// </span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileFullName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pDTScheme&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultValue&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;connectionName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;realTableName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;heardRowCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;footRowCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        public static void LoadAdpaterDataAndImport(string fileFullName, int columnCount, DataTable pDTScheme, Dictionary&lt;string, object&gt; defaultValue, string connectionName, string realTableName, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            try</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                using (StreamReader sr = new StreamReader(fileFullName, Encoding.Default, true))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    string strTmp;</span><br><span class=\"line\">                    DataRow dr;</span><br><span class=\"line\">                    int i = 0;</span><br><span class=\"line\">                    while (!sr.EndOfStream)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        strTmp = sr.ReadLine();</span><br><span class=\"line\">                        if (string.IsNullOrEmpty(strTmp))</span><br><span class=\"line\">                            continue;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                        if (i &lt;= heardRowCount) continue;</span><br><span class=\"line\">                        heardRowCount = 0;</span><br><span class=\"line\">                        dr = GetDataRow(strTmp, columnCount, pDTScheme, defaultValue);</span><br><span class=\"line\">                        if (dr != null)</span><br><span class=\"line\">                            pDTScheme.Rows.Add(dr);</span><br><span class=\"line\">                        if (i % 100000 == 0)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);</span><br><span class=\"line\">                            pDTScheme.Rows.Clear();</span><br><span class=\"line\">                            i = 0;</span><br><span class=\"line\">                            Thread.Sleep(1000);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (pDTScheme.Rows.Count &gt; 0)</span><br><span class=\"line\">                        UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);</span><br><span class=\"line\">                    DbHelper.ExecuteNonQuery(@&quot;INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES(&apos;&quot; + fileFullName.Substring(fileFullName.LastIndexOf(&quot;\\\\&quot;) + 1) + &quot;&apos;,&apos;&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;&apos;,&apos;&quot; + (i - heardRowCount - footRowCount).ToString() + &quot;&apos;,&apos;0&apos;);&quot;, connectionName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (Exception ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DbHelper.ExecuteNonQuery(@&quot;INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES(&apos;&quot; + fileFullName.Substring(fileFullName.LastIndexOf(&quot;\\\\&quot;) + 1) + &quot;&apos;,&apos;&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;&apos;,&apos;&apos;,&apos;3&apos;);&quot;, connectionName);</span><br><span class=\"line\">                Utility.Logging.Log.Instance.Write(&quot;读取文件发生异常&quot; + ex.Message, Logging.MessageType.Error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        protected static DataRow GetDataRow(string strTmp, int columnCount, DataTable pDTScheme, Dictionary&lt;string, object&gt; defaultValue)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string[] result = strTmp.Split(new string[] &#123; &quot;&amp;&amp;&quot; &#125;, StringSplitOptions.None);</span><br><span class=\"line\">            DataRow dr = null;</span><br><span class=\"line\">            if (result.Length &gt;= columnCount)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dr = pDTScheme.NewRow();</span><br><span class=\"line\">                for (int n = 0; n &lt; columnCount; n++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    try</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (pDTScheme.Columns[n].DataType == typeof(System.Decimal) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType == typeof(System.Int32) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType != typeof(System.String) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = DBNull.Value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType != typeof(System.DateTime) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = DBNull.Value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                            dr[n] = result[n];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    catch</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        dr[n] = DBNull.Value;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Type t = null;</span><br><span class=\"line\">                DataColumn dc = null;</span><br><span class=\"line\">                object obj = null;</span><br><span class=\"line\">                for (int n = columnCount; n &lt; pDTScheme.Columns.Count; n++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dc = pDTScheme.Columns[n];</span><br><span class=\"line\">                    if (defaultValue != null)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (defaultValue.TryGetValue(dc.ColumnName, out obj))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = obj;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            if (dc.DefaultValue == DBNull.Value)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                t = pDTScheme.Columns[n].DataType;</span><br><span class=\"line\">                                if (t == typeof(String))</span><br><span class=\"line\">                                    dr[n] = &quot;&quot;;</span><br><span class=\"line\">                                else if (t == typeof(Guid))</span><br><span class=\"line\">                                    dr[n] = Guid.NewGuid();</span><br><span class=\"line\">                                else if (t == typeof(DateTime))</span><br><span class=\"line\">                                    dr[n] = DateTime.Now;</span><br><span class=\"line\">                                else if (t == typeof(int))</span><br><span class=\"line\">                                    dr[n] = 0;</span><br><span class=\"line\">                                else if (t == typeof(decimal))</span><br><span class=\"line\">                                    dr[n] = 0.00;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            else</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                dr[n] = pDTScheme.Columns[n].DefaultValue;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (dc.DefaultValue == DBNull.Value)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            t = pDTScheme.Columns[n].DataType;</span><br><span class=\"line\">                            if (t == typeof(String))</span><br><span class=\"line\">                                dr[n] = &quot;&quot;;</span><br><span class=\"line\">                            else if (t == typeof(Guid))</span><br><span class=\"line\">                                dr[n] = Guid.NewGuid();</span><br><span class=\"line\">                            else if (t == typeof(DateTime))</span><br><span class=\"line\">                                dr[n] = DateTime.Now;</span><br><span class=\"line\">                            else if (t == typeof(int))</span><br><span class=\"line\">                                dr[n] = 0;</span><br><span class=\"line\">                            else if (t == typeof(decimal))</span><br><span class=\"line\">                                dr[n] = 0.00;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = pDTScheme.Columns[n].DefaultValue;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return dr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        #region【封装的业务逻辑方法，配合InsertBossDetail进行使用】</span><br><span class=\"line\">        public static DataTable XmlToDataTable(string dataName, out string tablename, out string exesql)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tablename = string.Empty;</span><br><span class=\"line\">            exesql = string.Empty;</span><br><span class=\"line\">            string path = System.AppDomain.CurrentDomain.BaseDirectory + &quot;/Config/Imps.config&quot;;</span><br><span class=\"line\">            XmlDocument doc = new XmlDocument();</span><br><span class=\"line\">            doc.Load(path);</span><br><span class=\"line\">            XmlNode tableRoot = doc.SelectSingleNode(&quot;/imps/imp[@name=&apos;&quot; + dataName + &quot;&apos;]&quot;);</span><br><span class=\"line\">            if (tableRoot != null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                DataTable dt = new DataTable();</span><br><span class=\"line\">                DataColumn dc = null;</span><br><span class=\"line\">                string defualtValue;</span><br><span class=\"line\">                tablename = tableRoot.SelectSingleNode(&quot;table&quot;).Attributes[&quot;name&quot;].Value;</span><br><span class=\"line\">                exesql = tableRoot.SelectSingleNode(&quot;sql&quot;).InnerText;</span><br><span class=\"line\">                foreach (XmlNode node in tableRoot.SelectSingleNode(&quot;table&quot;).ChildNodes)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dc = new DataColumn(node.Attributes[&quot;name&quot;].Value.Trim(), Type.GetType(node.Attributes[&quot;type&quot;].Value.Trim()));</span><br><span class=\"line\">                    if (!string.IsNullOrEmpty(defualtValue = node.Attributes[&quot;default&quot;] != null ? node.Attributes[&quot;default&quot;].Value.Trim() : null))</span><br><span class=\"line\">                        dc.DefaultValue = defualtValue;</span><br><span class=\"line\">                    dt.Columns.Add(dc);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return dt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 用SBC方法插入数据库</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;ConnectionStringKey&quot;&gt;要插入的数据库&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pDataTable&quot;&gt;要插入的DATATABLE&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pTableName&quot;&gt;对应的数据库表名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pBulkCopyTimeout&quot;&gt;数据库连接过期时间,单位：秒&lt;/param&gt;</span><br><span class=\"line\">        public static void UseSBCInsertDB(string ConnectionStringKey, DataTable pDataTable, string pTableName, int pBulkCopyTimeout = -1, bool appingFlag = false)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string connectionString = ConfigurationManager.ConnectionStrings[ConnectionStringKey].ConnectionString;</span><br><span class=\"line\">            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sqlBulkCopy.DestinationTableName = pTableName;</span><br><span class=\"line\">                sqlBulkCopy.BatchSize = pDataTable.Rows.Count;</span><br><span class=\"line\">                if (pBulkCopyTimeout &gt; 0)</span><br><span class=\"line\">                    sqlBulkCopy.BulkCopyTimeout = pBulkCopyTimeout;</span><br><span class=\"line\">                if (appingFlag)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    foreach (DataColumn dc in pDataTable.Columns)</span><br><span class=\"line\">                        sqlBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                using (SqlConnection sqlConnection = new SqlConnection(connectionString))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    sqlConnection.Open();</span><br><span class=\"line\">                    if (pDataTable != null &amp;&amp; pDataTable.Rows.Count != 0)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        sqlBulkCopy.WriteToServer(pDataTable);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">        #region【转换文件】</span><br><span class=\"line\">        public static string TransferFile(string fileFullName, bool isDelOriFile = true)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string path = Path.GetDirectoryName(fileFullName);</span><br><span class=\"line\">            //fileFullName.Substring(0, fileFullName.LastIndexOf(&apos;\\\\&apos;));</span><br><span class=\"line\">            string newFileName = string.Format(&quot;&#123;0&#125;&#123;1&#125;.txt&quot;, path, DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;));</span><br><span class=\"line\">            Encoding en = GetEncoding(fileFullName, Encoding.Default);</span><br><span class=\"line\">            using (StreamReader sr = new StreamReader(fileFullName, en, true))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                using (StreamWriter sw = new StreamWriter(newFileName, true, Encoding.UTF8))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    string strTmp;</span><br><span class=\"line\">                    while (!sr.EndOfStream)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        strTmp = sr.ReadLine();</span><br><span class=\"line\">                        if (!string.IsNullOrEmpty(strTmp))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            sw.WriteLine(strTmp);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    sw.Flush();</span><br><span class=\"line\">                    sw.Close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (isDelOriFile &amp;&amp; File.Exists(fileFullName))</span><br><span class=\"line\">                File.Delete(fileFullName);</span><br><span class=\"line\">            return newFileName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 取得一个文本文件的编码方式。</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileName&quot;&gt;文件名。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultEncoding&quot;&gt;默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static Encoding GetEncoding(string fileName, Encoding defaultEncoding)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            using (FileStream fs = new FileStream(fileName, FileMode.Open))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Encoding targetEncoding = GetEncoding(fs, defaultEncoding);</span><br><span class=\"line\">                fs.Close();</span><br><span class=\"line\">                return targetEncoding;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 取得一个文本文件流的编码方式。</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;stream&quot;&gt;文本文件流。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultEncoding&quot;&gt;默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static Encoding GetEncoding(FileStream stream, Encoding defaultEncoding)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Encoding targetEncoding = defaultEncoding;</span><br><span class=\"line\">            if (stream != null &amp;&amp; stream.Length &gt;= 2)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                //保存文件流的前4个字节</span><br><span class=\"line\">                byte byte1 = 0;</span><br><span class=\"line\">                byte byte2 = 0;</span><br><span class=\"line\">                byte byte3 = 0;</span><br><span class=\"line\">                byte byte4 = 0;</span><br><span class=\"line\">                //保存当前Seek位置</span><br><span class=\"line\">                long origPos = stream.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">                stream.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">                int nByte = stream.ReadByte();</span><br><span class=\"line\">                byte1 = Convert.ToByte(nByte);</span><br><span class=\"line\">                byte2 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                if (stream.Length &gt;= 3)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    byte3 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (stream.Length &gt;= 4)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    byte4 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //根据文件流的前4个字节判断Encoding</span><br><span class=\"line\">                //Unicode &#123;0xFF, 0xFE&#125;;</span><br><span class=\"line\">                //BE-Unicode &#123;0xFE, 0xFF&#125;;</span><br><span class=\"line\">                //UTF8 = &#123;0xEF, 0xBB, 0xBF&#125;;</span><br><span class=\"line\">                if (byte1 == 0xFE &amp;&amp; byte2 == 0xFF)//UnicodeBe</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    targetEncoding = Encoding.BigEndianUnicode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (byte1 == 0xFF &amp;&amp; byte2 == 0xFE &amp;&amp; byte3 != 0xFF)//Unicode</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    targetEncoding = Encoding.Unicode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (byte1 == 0xEF &amp;&amp; byte2 == 0xBB &amp;&amp; byte3 == 0xBF)//UTF8</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    targetEncoding = Encoding.UTF8;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //恢复Seek位置       </span><br><span class=\"line\">                stream.Seek(origPos, SeekOrigin.Begin);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return targetEncoding;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #endregion</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Text;</span><br><span class=\"line\">using System.Data;</span><br><span class=\"line\">using System.IO;</span><br><span class=\"line\">using System.Threading;</span><br><span class=\"line\">using System.Web;</span><br><span class=\"line\">using System.Xml;</span><br><span class=\"line\">using System.Configuration;</span><br><span class=\"line\">using System.Data.SqlClient;</span><br><span class=\"line\">using WXMP.WinService.Data;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace Utility.DataImport</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class TxtImport</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 导入数据</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileName&quot;&gt;文件名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;xmlTableName&quot;&gt;xml配置名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;RealTableName&quot;&gt;数据库表名称&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultValue&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;ConnectionKeyName&quot;&gt;数据库连接配置&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;heardRowCount&quot;&gt;文件头定义行数&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;footRowCount&quot;&gt;文件尾定义行数&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static int ImportData(string fileName, string xmlTableName, Dictionary&lt;string, object&gt; defaultValue, string ConnectionKeyName = &quot;default&quot;, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (fileName == &quot;&quot;)</span><br><span class=\"line\">                return 0;</span><br><span class=\"line\">            return Insert(fileName, xmlTableName, defaultValue, ConnectionKeyName, heardRowCount, footRowCount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 导入文本文件</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileFullName&quot;&gt;文本全路径&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;文本里需要导入的列的数目&lt;/param&gt;</span><br><span class=\"line\">        public static int Insert(string fileFullName, string xmlTableName, Dictionary&lt;string, object&gt; defaultValue, string ConnectionKeyName, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string exesql = string.Empty;</span><br><span class=\"line\">            string tablename = string.Empty;</span><br><span class=\"line\">            DataTable dt = XmlToDataTable(xmlTableName, out tablename, out exesql);</span><br><span class=\"line\">            if (dt != null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                LoadAdpaterDataAndImport(fileFullName, dt.Columns.Count, dt, defaultValue, ConnectionKeyName, tablename, heardRowCount, footRowCount);</span><br><span class=\"line\"></span><br><span class=\"line\">                DbHelper.ExecuteNonQuery(exesql, ConnectionKeyName);</span><br><span class=\"line\">                return dt.Rows.Count;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// </span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileFullName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pDTScheme&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultValue&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;connectionName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;realTableName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;heardRowCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;footRowCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        public static void LoadAdpaterDataAndImport(string fileFullName, int columnCount, DataTable pDTScheme, Dictionary&lt;string, object&gt; defaultValue, string connectionName, string realTableName, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            try</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                using (StreamReader sr = new StreamReader(fileFullName, Encoding.Default, true))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    string strTmp;</span><br><span class=\"line\">                    DataRow dr;</span><br><span class=\"line\">                    int i = 0;</span><br><span class=\"line\">                    while (!sr.EndOfStream)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        strTmp = sr.ReadLine();</span><br><span class=\"line\">                        if (string.IsNullOrEmpty(strTmp))</span><br><span class=\"line\">                            continue;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                        if (i &lt;= heardRowCount) continue;</span><br><span class=\"line\">                        heardRowCount = 0;</span><br><span class=\"line\">                        dr = GetDataRow(strTmp, columnCount, pDTScheme, defaultValue);</span><br><span class=\"line\">                        if (dr != null)</span><br><span class=\"line\">                            pDTScheme.Rows.Add(dr);</span><br><span class=\"line\">                        if (i % 100000 == 0)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);</span><br><span class=\"line\">                            pDTScheme.Rows.Clear();</span><br><span class=\"line\">                            i = 0;</span><br><span class=\"line\">                            Thread.Sleep(1000);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (pDTScheme.Rows.Count &gt; 0)</span><br><span class=\"line\">                        UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);</span><br><span class=\"line\">                    DbHelper.ExecuteNonQuery(@&quot;INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES(&apos;&quot; + fileFullName.Substring(fileFullName.LastIndexOf(&quot;\\\\&quot;) + 1) + &quot;&apos;,&apos;&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;&apos;,&apos;&quot; + (i - heardRowCount - footRowCount).ToString() + &quot;&apos;,&apos;0&apos;);&quot;, connectionName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (Exception ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DbHelper.ExecuteNonQuery(@&quot;INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES(&apos;&quot; + fileFullName.Substring(fileFullName.LastIndexOf(&quot;\\\\&quot;) + 1) + &quot;&apos;,&apos;&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;&apos;,&apos;&apos;,&apos;3&apos;);&quot;, connectionName);</span><br><span class=\"line\">                Utility.Logging.Log.Instance.Write(&quot;读取文件发生异常&quot; + ex.Message, Logging.MessageType.Error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        protected static DataRow GetDataRow(string strTmp, int columnCount, DataTable pDTScheme, Dictionary&lt;string, object&gt; defaultValue)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string[] result = strTmp.Split(new string[] &#123; &quot;&amp;&amp;&quot; &#125;, StringSplitOptions.None);</span><br><span class=\"line\">            DataRow dr = null;</span><br><span class=\"line\">            if (result.Length &gt;= columnCount)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dr = pDTScheme.NewRow();</span><br><span class=\"line\">                for (int n = 0; n &lt; columnCount; n++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    try</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (pDTScheme.Columns[n].DataType == typeof(System.Decimal) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType == typeof(System.Int32) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType != typeof(System.String) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = DBNull.Value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType != typeof(System.DateTime) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = DBNull.Value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                            dr[n] = result[n];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    catch</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        dr[n] = DBNull.Value;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Type t = null;</span><br><span class=\"line\">                DataColumn dc = null;</span><br><span class=\"line\">                object obj = null;</span><br><span class=\"line\">                for (int n = columnCount; n &lt; pDTScheme.Columns.Count; n++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dc = pDTScheme.Columns[n];</span><br><span class=\"line\">                    if (defaultValue != null)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (defaultValue.TryGetValue(dc.ColumnName, out obj))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = obj;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            if (dc.DefaultValue == DBNull.Value)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                t = pDTScheme.Columns[n].DataType;</span><br><span class=\"line\">                                if (t == typeof(String))</span><br><span class=\"line\">                                    dr[n] = &quot;&quot;;</span><br><span class=\"line\">                                else if (t == typeof(Guid))</span><br><span class=\"line\">                                    dr[n] = Guid.NewGuid();</span><br><span class=\"line\">                                else if (t == typeof(DateTime))</span><br><span class=\"line\">                                    dr[n] = DateTime.Now;</span><br><span class=\"line\">                                else if (t == typeof(int))</span><br><span class=\"line\">                                    dr[n] = 0;</span><br><span class=\"line\">                                else if (t == typeof(decimal))</span><br><span class=\"line\">                                    dr[n] = 0.00;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            else</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                dr[n] = pDTScheme.Columns[n].DefaultValue;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (dc.DefaultValue == DBNull.Value)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            t = pDTScheme.Columns[n].DataType;</span><br><span class=\"line\">                            if (t == typeof(String))</span><br><span class=\"line\">                                dr[n] = &quot;&quot;;</span><br><span class=\"line\">                            else if (t == typeof(Guid))</span><br><span class=\"line\">                                dr[n] = Guid.NewGuid();</span><br><span class=\"line\">                            else if (t == typeof(DateTime))</span><br><span class=\"line\">                                dr[n] = DateTime.Now;</span><br><span class=\"line\">                            else if (t == typeof(int))</span><br><span class=\"line\">                                dr[n] = 0;</span><br><span class=\"line\">                            else if (t == typeof(decimal))</span><br><span class=\"line\">                                dr[n] = 0.00;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = pDTScheme.Columns[n].DefaultValue;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return dr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        #region【封装的业务逻辑方法，配合InsertBossDetail进行使用】</span><br><span class=\"line\">        public static DataTable XmlToDataTable(string dataName, out string tablename, out string exesql)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tablename = string.Empty;</span><br><span class=\"line\">            exesql = string.Empty;</span><br><span class=\"line\">            string path = System.AppDomain.CurrentDomain.BaseDirectory + &quot;/Config/Imps.config&quot;;</span><br><span class=\"line\">            XmlDocument doc = new XmlDocument();</span><br><span class=\"line\">            doc.Load(path);</span><br><span class=\"line\">            XmlNode tableRoot = doc.SelectSingleNode(&quot;/imps/imp[@name=&apos;&quot; + dataName + &quot;&apos;]&quot;);</span><br><span class=\"line\">            if (tableRoot != null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                DataTable dt = new DataTable();</span><br><span class=\"line\">                DataColumn dc = null;</span><br><span class=\"line\">                string defualtValue;</span><br><span class=\"line\">                tablename = tableRoot.SelectSingleNode(&quot;table&quot;).Attributes[&quot;name&quot;].Value;</span><br><span class=\"line\">                exesql = tableRoot.SelectSingleNode(&quot;sql&quot;).InnerText;</span><br><span class=\"line\">                foreach (XmlNode node in tableRoot.SelectSingleNode(&quot;table&quot;).ChildNodes)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dc = new DataColumn(node.Attributes[&quot;name&quot;].Value.Trim(), Type.GetType(node.Attributes[&quot;type&quot;].Value.Trim()));</span><br><span class=\"line\">                    if (!string.IsNullOrEmpty(defualtValue = node.Attributes[&quot;default&quot;] != null ? node.Attributes[&quot;default&quot;].Value.Trim() : null))</span><br><span class=\"line\">                        dc.DefaultValue = defualtValue;</span><br><span class=\"line\">                    dt.Columns.Add(dc);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return dt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 用SBC方法插入数据库</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;ConnectionStringKey&quot;&gt;要插入的数据库&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pDataTable&quot;&gt;要插入的DATATABLE&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pTableName&quot;&gt;对应的数据库表名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pBulkCopyTimeout&quot;&gt;数据库连接过期时间,单位：秒&lt;/param&gt;</span><br><span class=\"line\">        public static void UseSBCInsertDB(string ConnectionStringKey, DataTable pDataTable, string pTableName, int pBulkCopyTimeout = -1, bool appingFlag = false)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string connectionString = ConfigurationManager.ConnectionStrings[ConnectionStringKey].ConnectionString;</span><br><span class=\"line\">            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sqlBulkCopy.DestinationTableName = pTableName;</span><br><span class=\"line\">                sqlBulkCopy.BatchSize = pDataTable.Rows.Count;</span><br><span class=\"line\">                if (pBulkCopyTimeout &gt; 0)</span><br><span class=\"line\">                    sqlBulkCopy.BulkCopyTimeout = pBulkCopyTimeout;</span><br><span class=\"line\">                if (appingFlag)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    foreach (DataColumn dc in pDataTable.Columns)</span><br><span class=\"line\">                        sqlBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                using (SqlConnection sqlConnection = new SqlConnection(connectionString))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    sqlConnection.Open();</span><br><span class=\"line\">                    if (pDataTable != null &amp;&amp; pDataTable.Rows.Count != 0)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        sqlBulkCopy.WriteToServer(pDataTable);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">        #region【转换文件】</span><br><span class=\"line\">        public static string TransferFile(string fileFullName, bool isDelOriFile = true)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string path = Path.GetDirectoryName(fileFullName);</span><br><span class=\"line\">            //fileFullName.Substring(0, fileFullName.LastIndexOf(&apos;\\\\&apos;));</span><br><span class=\"line\">            string newFileName = string.Format(&quot;&#123;0&#125;&#123;1&#125;.txt&quot;, path, DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;));</span><br><span class=\"line\">            Encoding en = GetEncoding(fileFullName, Encoding.Default);</span><br><span class=\"line\">            using (StreamReader sr = new StreamReader(fileFullName, en, true))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                using (StreamWriter sw = new StreamWriter(newFileName, true, Encoding.UTF8))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    string strTmp;</span><br><span class=\"line\">                    while (!sr.EndOfStream)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        strTmp = sr.ReadLine();</span><br><span class=\"line\">                        if (!string.IsNullOrEmpty(strTmp))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            sw.WriteLine(strTmp);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    sw.Flush();</span><br><span class=\"line\">                    sw.Close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (isDelOriFile &amp;&amp; File.Exists(fileFullName))</span><br><span class=\"line\">                File.Delete(fileFullName);</span><br><span class=\"line\">            return newFileName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 取得一个文本文件的编码方式。</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileName&quot;&gt;文件名。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultEncoding&quot;&gt;默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static Encoding GetEncoding(string fileName, Encoding defaultEncoding)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            using (FileStream fs = new FileStream(fileName, FileMode.Open))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Encoding targetEncoding = GetEncoding(fs, defaultEncoding);</span><br><span class=\"line\">                fs.Close();</span><br><span class=\"line\">                return targetEncoding;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 取得一个文本文件流的编码方式。</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;stream&quot;&gt;文本文件流。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultEncoding&quot;&gt;默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static Encoding GetEncoding(FileStream stream, Encoding defaultEncoding)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Encoding targetEncoding = defaultEncoding;</span><br><span class=\"line\">            if (stream != null &amp;&amp; stream.Length &gt;= 2)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                //保存文件流的前4个字节</span><br><span class=\"line\">                byte byte1 = 0;</span><br><span class=\"line\">                byte byte2 = 0;</span><br><span class=\"line\">                byte byte3 = 0;</span><br><span class=\"line\">                byte byte4 = 0;</span><br><span class=\"line\">                //保存当前Seek位置</span><br><span class=\"line\">                long origPos = stream.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">                stream.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">                int nByte = stream.ReadByte();</span><br><span class=\"line\">                byte1 = Convert.ToByte(nByte);</span><br><span class=\"line\">                byte2 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                if (stream.Length &gt;= 3)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    byte3 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (stream.Length &gt;= 4)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    byte4 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //根据文件流的前4个字节判断Encoding</span><br><span class=\"line\">                //Unicode &#123;0xFF, 0xFE&#125;;</span><br><span class=\"line\">                //BE-Unicode &#123;0xFE, 0xFF&#125;;</span><br><span class=\"line\">                //UTF8 = &#123;0xEF, 0xBB, 0xBF&#125;;</span><br><span class=\"line\">                if (byte1 == 0xFE &amp;&amp; byte2 == 0xFF)//UnicodeBe</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    targetEncoding = Encoding.BigEndianUnicode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (byte1 == 0xFF &amp;&amp; byte2 == 0xFE &amp;&amp; byte3 != 0xFF)//Unicode</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    targetEncoding = Encoding.Unicode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (byte1 == 0xEF &amp;&amp; byte2 == 0xBB &amp;&amp; byte3 == 0xBF)//UTF8</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    targetEncoding = Encoding.UTF8;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //恢复Seek位置       </span><br><span class=\"line\">                stream.Seek(origPos, SeekOrigin.Begin);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return targetEncoding;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #endregion</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/2015-03-09-c语言10-字符串和命名空间/数组指针传递以及二级指针接收的流程概括.png","post":"cjeoevjc000026stwv7fcsd3t","slug":"数组指针传递以及二级指针接收的流程概括.png","modified":1,"renderable":1},{"_id":"source/_posts/2015-03-09-c语言3-优先级/优先级.jpg","post":"cjeoevjcg00086stw7ukzgnoo","slug":"优先级.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2015-03-09-c语言7-指针/指针偏移法.png","post":"cjeoevjcs000e6stwo6u6mvsv","slug":"指针偏移法.png","modified":1,"renderable":1},{"_id":"source/_posts/2015-03-09-c语言8-函数/公式结构和书写结构.png","post":"cjeoevjcz000l6stw5d705z01","slug":"公式结构和书写结构.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-03-08-HEXO文档中带文件/avatar.jpg","post":"cjeoevjd8000y6stwx4ew2mht","slug":"avatar.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2015-03-09-c语言11-进程空间-结构/mystack.c","post":"cjeoevjc800046stwatysa9if","slug":"mystack.c","modified":1,"renderable":1},{"_id":"source/_posts/2015-03-09-c语言11-进程空间-结构/内存对齐.png","post":"cjeoevjc800046stwatysa9if","slug":"内存对齐.png","modified":1,"renderable":1},{"_id":"source/_posts/2015-03-09-c语言2-补码/cpu对内存的读写操作详解.png","post":"cjeoevjci00096stwqifdd7gj","slug":"cpu对内存的读写操作详解.png","modified":1,"renderable":1},{"_id":"source/_posts/2015-03-09-c语言2-补码/补码求原.png","post":"cjeoevjci00096stwqifdd7gj","slug":"补码求原.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-03-09-c语言1-进程空间,一维数组/1.c","post":"cjeoevjdf00186stwsnfpicqd","slug":"1.c","modified":1,"renderable":1},{"_id":"source/_posts/2018-03-09-c语言1-进程空间,一维数组/1.jpg","post":"cjeoevjdf00186stwsnfpicqd","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png","post":"cjeoevjdh001b6stwd0fmcasa","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png","post":"cjeoevjdh001b6stwd0fmcasa","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png","slug":"3.png","post":"cjeoevjdh001b6stwd0fmcasa","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjeoevjci00096stwqifdd7gj","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjcx000h6stw7j45q9j4"},{"post_id":"cjeoevjc000026stwv7fcsd3t","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjd1000m6stw7fiirjz1"},{"post_id":"cjeoevjck000a6stwz45jxww2","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjd3000p6stwjil9lnsm"},{"post_id":"cjeoevjcs000e6stwo6u6mvsv","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjd5000s6stwaw8woiyu"},{"post_id":"cjeoevjc800046stwatysa9if","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjd7000v6stw33im1cmh"},{"post_id":"cjeoevjcw000g6stw6ebflru1","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjd9000z6stwx037vs17"},{"post_id":"cjeoevjcz000l6stw5d705z01","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjdb00126stwhvzlwg98"},{"post_id":"cjeoevjcg00086stw7ukzgnoo","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjdd00166stwvtdbo9c0"},{"post_id":"cjeoevjd2000o6stwvwv286ry","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjdg00196stwgmgd5s9l"},{"post_id":"cjeoevjd4000r6stw1p9i1vln","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjdj001d6stwta5l6abn"},{"post_id":"cjeoevjd6000u6stwhrlqnbkr","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjdl001g6stwbn88whlj"},{"post_id":"cjeoevjd8000y6stwx4ew2mht","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjdo001j6stwygwv0bcc"},{"post_id":"cjeoevjda00116stwiawuf8th","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjdp001l6stwhpuyra4z"},{"post_id":"cjeoevjdc00146stwinp1t2im","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjdp001m6stwsuoqxel2"},{"post_id":"cjeoevjdf00186stwsnfpicqd","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjdq001p6stwsovctk16"},{"post_id":"cjeoevjdh001b6stwd0fmcasa","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjdq001q6stwlzgj46m2"},{"post_id":"cjeoevjdk001f6stw9cnqjyt8","category_id":"cjeoevjcc00056stwuk5grlsy","_id":"cjeoevjdq001s6stwgt48mo39"}],"PostTag":[{"post_id":"cjeoevjci00096stwqifdd7gj","tag_id":"cjeoevjcf00066stwzrtk60fy","_id":"cjeoevjcr000d6stwe5lca6lt"},{"post_id":"cjeoevjc000026stwv7fcsd3t","tag_id":"cjeoevjcf00066stwzrtk60fy","_id":"cjeoevjcv000f6stw3pzrxu8e"},{"post_id":"cjeoevjck000a6stwz45jxww2","tag_id":"cjeoevjcf00066stwzrtk60fy","_id":"cjeoevjcz000k6stw5181ppfd"},{"post_id":"cjeoevjcs000e6stwo6u6mvsv","tag_id":"cjeoevjcf00066stwzrtk60fy","_id":"cjeoevjd1000n6stwhbe2ph4x"},{"post_id":"cjeoevjc800046stwatysa9if","tag_id":"cjeoevjcf00066stwzrtk60fy","_id":"cjeoevjd3000q6stwnwk5gmr7"},{"post_id":"cjeoevjcw000g6stw6ebflru1","tag_id":"cjeoevjcf00066stwzrtk60fy","_id":"cjeoevjd5000t6stw8jx99jet"},{"post_id":"cjeoevjcz000l6stw5d705z01","tag_id":"cjeoevjcf00066stwzrtk60fy","_id":"cjeoevjd8000x6stw28emz52a"},{"post_id":"cjeoevjcg00086stw7ukzgnoo","tag_id":"cjeoevjcf00066stwzrtk60fy","_id":"cjeoevjda00106stw83npc0nh"},{"post_id":"cjeoevjd2000o6stwvwv286ry","tag_id":"cjeoevjcf00066stwzrtk60fy","_id":"cjeoevjdc00136stws7c0wbs3"},{"post_id":"cjeoevjda00116stwiawuf8th","tag_id":"cjeoevjd7000w6stwd2l0z7ux","_id":"cjeoevjde00176stwqa3ri9a2"},{"post_id":"cjeoevjd4000r6stw1p9i1vln","tag_id":"cjeoevjd7000w6stwd2l0z7ux","_id":"cjeoevjdh001a6stw6uelv99c"},{"post_id":"cjeoevjdf00186stwsnfpicqd","tag_id":"cjeoevjcf00066stwzrtk60fy","_id":"cjeoevjdk001e6stw9lp8ncta"},{"post_id":"cjeoevjd6000u6stwhrlqnbkr","tag_id":"cjeoevjd7000w6stwd2l0z7ux","_id":"cjeoevjdm001h6stwzq62m85l"},{"post_id":"cjeoevjd8000y6stwx4ew2mht","tag_id":"cjeoevjd7000w6stwd2l0z7ux","_id":"cjeoevjdp001k6stwqr913qbq"},{"post_id":"cjeoevjdc00146stwinp1t2im","tag_id":"cjeoevjdn001i6stw4f3h14nf","_id":"cjeoevjdq001o6stwq3vtz84m"},{"post_id":"cjeoevjdh001b6stwd0fmcasa","tag_id":"cjeoevjdp001n6stwx9nuvgns","_id":"cjeoevjdr001v6stw1tuieh2a"},{"post_id":"cjeoevjdh001b6stwd0fmcasa","tag_id":"cjeoevjdq001r6stw33l7lh7h","_id":"cjeoevjds001w6stwu0gzr574"},{"post_id":"cjeoevjdh001b6stwd0fmcasa","tag_id":"cjeoevjdr001t6stwoiwp5sbd","_id":"cjeoevjds001x6stwd1z8hvwc"},{"post_id":"cjeoevjdk001f6stw9cnqjyt8","tag_id":"cjeoevjdr001u6stw5kkoafg6","_id":"cjeoevjds001y6stw8pvbrvym"}],"Tag":[{"name":"c语言","_id":"cjeoevjcf00066stwzrtk60fy"},{"name":"工具/插件","_id":"cjeoevjd7000w6stwd2l0z7ux"},{"name":"c++","_id":"cjeoevjdn001i6stw4f3h14nf"},{"name":"linux","_id":"cjeoevjdp001n6stwx9nuvgns"},{"name":"windows","_id":"cjeoevjdq001r6stw33l7lh7h"},{"name":"虚拟机","_id":"cjeoevjdr001t6stwoiwp5sbd"},{"name":"csharp","_id":"cjeoevjdr001u6stw5kkoafg6"}]}}