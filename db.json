{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/分类标签.txt","path":"分类标签.txt","modified":1,"renderable":0},{"_id":"source/about/about.txt","path":"about/about.txt","modified":1,"renderable":0},{"_id":"themes/hexo-theme-pure/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/favicon_bak.png","path":"favicon_bak.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/README.md","path":"fonts/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/application.js","path":"js/application.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/application.min.js","path":"js/application.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/alipay.jpg","path":"images/donate/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/weipay.jpg","path":"images/donate/weipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/weipayimg.png","path":"images/donate/weipayimg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/github-logo.png","path":"images/favatar/github-logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/itellyou.cn-logo.png","path":"images/favatar/itellyou.cn-logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/json.cn.jpg","path":"images/favatar/json.cn.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/w3school.jpg","path":"images/favatar/w3school.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/ali_bak.png","path":"images/donate/ali_bak.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/wx_bak.png","path":"images/donate/wx_bak.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/分类标签.txt","hash":"d6a3150c7fccf814eb422f67522e95de5c697895","modified":1520858914723},{"_id":"source/标准.md","hash":"2d666faf97e994f2cda8f864eaead573813714a4","modified":1520823906362},{"_id":"themes/hexo-theme-pure/README.cn.md","hash":"0506cfc397e98c2b027c710122b580dae09907a5","modified":1514656224000},{"_id":"themes/hexo-theme-pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1514656224000},{"_id":"themes/hexo-theme-pure/README.md","hash":"89dd898e3bd98f063d1b9a2d6449d2692f1278fa","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_config.yml","hash":"edd24d0b06c206dace205e5755c483beaf5dbbfd","modified":1520848200616},{"_id":"themes/hexo-theme-pure/_config.yml.example","hash":"f76edf7878e3209d51dd4cf3d7972c231de8ce6a","modified":1514656224000},{"_id":"themes/hexo-theme-pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1514656224000},{"_id":"themes/hexo-theme-pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1514656224000},{"_id":"source/404/index.md","hash":"d18cc3c0de0f8333c78239bbeecba816f08e0692","modified":1520659227693},{"_id":"source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1514656224000},{"_id":"source/_data/links.yml","hash":"535a09126b8f3c2f78ff0243a4b17c231a62d55c","modified":1520840768577},{"_id":"source/_data/movies.yml","hash":"d6fe6f29e1d85a52d91e081235a0c6586290348d","modified":1520567720359},{"_id":"source/about/about.txt","hash":"daef9ba2281f1f4890f04634523d69a2d53bd0a5","modified":1520646383358},{"_id":"source/about/index.md","hash":"4e34989097c99a5f048327b5bef95c33beece5d9","modified":1520845978381},{"_id":"source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1514656224000},{"_id":"source/categories/index.md","hash":"51a628b8f20ee93b8477c76703db00eaa5016aaa","modified":1520478155636},{"_id":"source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1514656224000},{"_id":"source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1520478316366},{"_id":"source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1520486856280},{"_id":"themes/hexo-theme-pure/languages/default.yml","hash":"8da88cdd2728105aa5a64830d3e306cef29f7151","modified":1520579693821},{"_id":"themes/hexo-theme-pure/languages/en.yml","hash":"d911ec1d372ca8007a3c8afa30261bce162eeb82","modified":1514656224000},{"_id":"themes/hexo-theme-pure/languages/zh-CN.yml","hash":"95d6858036d58a4400f14c36e61ed6e5b1b65e40","modified":1520508378404},{"_id":"themes/hexo-theme-pure/languages/zh-TW.yml","hash":"5a33882faaedbbd1a8e631bc77597f8c2cf272c7","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/categories.ejs","hash":"2084974ba68f799216a8b216752f7fc87c693cc0","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/category.ejs","hash":"68632e8ac45088a929ca82b6cca8ba60323d6aac","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/layout.ejs","hash":"1cde63939b8370addb37b4f1be96e6dad258ed0d","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/tag.ejs","hash":"6e4e6660cf58beb3e5e2e52b59c51393e4796c36","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/tags.ejs","hash":"4c0b797a45cf238be367932927edc88599aa3255","modified":1514656224000},{"_id":"themes/hexo-theme-pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/favicon.png","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520393645414},{"_id":"themes/hexo-theme-pure/source/favicon_bak.png","hash":"79a9b4f6161f153208b02246c326eecf3095e79d","modified":1514656224000},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1514656224000},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1514656224000},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1514656224000},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1514656224000},{"_id":"themes/hexo-theme-pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1514656224000},{"_id":"source/_posts/技术/2015-03-01-c语言1-c程序的处理过程.md","hash":"3ecc134a23f01f78aae9ce8c05f5d2a882a00e06","modified":1520828909658},{"_id":"source/_posts/技术/2015-03-09-c语言10-字符串和命名空间.md","hash":"4136fbe31c79a488d3a81105f4a455113df8d7bc","modified":1520824532117},{"_id":"source/_posts/技术/2015-03-09-c语言11-进程空间-结构.md","hash":"e58b7d7dc9f0beeedeee423e1dae54ef0440ae56","modified":1520824539042},{"_id":"source/_posts/技术/2015-03-09-c语言13-链表.md","hash":"4834334d0e20c277183bf297479c8e1ca9cdf4e1","modified":1520836099490},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作.md","hash":"659a0747f20981107251f3d18d1512d571c05bb5","modified":1520836218559},{"_id":"source/_posts/技术/2015-03-09-c语言15-位操作.md","hash":"48ee7d92422b755019900661f4df85ce333bd760","modified":1520836229998},{"_id":"source/_posts/技术/2015-03-09-c语言16-条件编译.md","hash":"b41172edcf451657a3117f0364170e08695734c5","modified":1520836198268},{"_id":"source/_posts/技术/2015-03-09-c语言2-补码.md","hash":"75275070341b8ef43dcb8bcc3f3e2756570129c1","modified":1520824370448},{"_id":"source/_posts/技术/2015-03-09-c语言3-优先级.md","hash":"0051e1c25ee1a73c8272ce46c9901873941eddaf","modified":1520824381643},{"_id":"source/_posts/技术/2015-03-09-c语言4-程序的设计结构.md","hash":"8c00a59be3a50aa70895f0f0b4ccb54dbea7ea6c","modified":1520824388530},{"_id":"source/_posts/技术/2015-03-09-c语言5-数组的二义性.md","hash":"f41b2844ab1a60b5a9916ce04f9908bd6822327d","modified":1520824398080},{"_id":"source/_posts/技术/2015-03-09-c语言7-指针.md","hash":"5fdfdcd02ce5181b3c1b4ee17026dce45b875805","modified":1520824507927},{"_id":"source/_posts/技术/2015-03-09-c语言8-函数.md","hash":"cadf1b1b2644886e221f63112a35ca499609e6b5","modified":1520824513672},{"_id":"source/_posts/技术/2015-03-09-c语言9-变量作用域及修饰符.md","hash":"d7d240d8b7b08181d9b1557c6cb70cae9c1bb234","modified":1520824524499},{"_id":"source/_posts/技术/2015-04-07-HEXO博客.md","hash":"bfde2a6c292584e33610ed67b805fc80cc4c40ef","modified":1520585954905},{"_id":"source/_posts/技术/2015-04-07-HUGO博客.md","hash":"54cc05258ba3d2be1da67c1218a5b19f5adc9e48","modified":1520646532573},{"_id":"source/_posts/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针.md","hash":"0ed341cb693784b83fb13caca4b8ff59d78df31c","modified":1520836296014},{"_id":"source/_posts/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高.md","hash":"81b5a6489a8e681c3bcc4263e78b7fcda674a29c","modified":1520836978324},{"_id":"source/_posts/技术/2015-04-13-c语言提高5-字符串.md","hash":"65210cab94ffe0e2f8982bbaae1b9707db591068","modified":1520837239814},{"_id":"source/_posts/技术/2015-04-13-c语言提高6-数据结构-双向循环链表-动态库和静态库.md","hash":"bab7723ef494d6ffda844b0755fa4ecebadce149","modified":1520837583645},{"_id":"source/_posts/技术/2018-03-08-HEXO文档中带文件.md","hash":"dca406e3e139bbcaedaa6437e7cfcb2d37e8f3f2","modified":1520585931111},{"_id":"source/_posts/技术/2018-03-09-C++引用的理解.md","hash":"b89c7903db404f72e2c249b81e4ef7c4a891c1ff","modified":1520823906361},{"_id":"source/_posts/技术/2018-03-09-Hexo-theme-pure主题books默认选择想读.md","hash":"675c89b73b9aac077ed208b572a40e0c7eafbe81","modified":1520653069294},{"_id":"source/_posts/技术/2018-03-09-SBC大数据导入(代码).md","hash":"f8677bcde50e811dcf68e19599062802fce869d0","modified":1520823906361},{"_id":"source/_posts/技术/2018-03-09-c语言12-共同体,枚举.md","hash":"99ad83eb2fae43d6d0b300c95be1beddf7589b4b","modified":1520825385979},{"_id":"source/_posts/技术/2018-03-09-c语言提高1-进程空间,一维数组.md","hash":"b0b1e4dda29980c301917f5ccadff053f93461cd","modified":1520836143725},{"_id":"source/_posts/技术/2018-03-09-python编写规范pep8的问题笔记.md","hash":"c4d54f0fba53c9b4860e852c579190d73059a61b","modified":1520859268662},{"_id":"source/_posts/技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数.md","hash":"63f1e884758d8df0845a181dae728b2d7968f2de","modified":1520836297365},{"_id":"source/_posts/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置.md","hash":"dc4046b8ff6088306b45edde582395d036c4dd87","modified":1520655275271},{"_id":"source/_posts/技术/2018-03-10-csharp代码的编译过程.md","hash":"d0e16e0b7ac5db39228122425dfd7754ab4bd22d","modified":1520838411055},{"_id":"source/_posts/技术/2018-03-10-csharp学习笔记.md","hash":"440fa3a7f925379aaffa9b2e3b9b630b028774d3","modified":1520842304866},{"_id":"source/_posts/技术/2018-03-10-csharp控件属性事件大全.md","hash":"44da07e13b0dc19a386da015492ec72da863c3ff","modified":1520838240507},{"_id":"source/_posts/技术/2018-03-10-最全的前端资源教程.md","hash":"63bdff6c9685bc9630853ffa8780ddf59cfc6b3d","modified":1520841281640},{"_id":"source/_posts/生活/2018-03-10-图片.md","hash":"966b8074822139418f91ed1023c395aee8a5439e","modified":1520845400456},{"_id":"themes/hexo-theme-pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/404/index.md","hash":"d18cc3c0de0f8333c78239bbeecba816f08e0692","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/about/index.md","hash":"f3f510a1cba26c11ecd95e33180e1e35a6784132","modified":1520418598419},{"_id":"themes/hexo-theme-pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_common/head.ejs","hash":"edf1798f619f247d49e260da7d67492bf59bd2c2","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_common/plugin.ejs","hash":"90b50b052daf24394e84f747c5ebc639752e9731","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_common/header.ejs","hash":"595c60cce58ee0ac08c805ef2b822ba835926d2c","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_common/script.ejs","hash":"5963fdc39a925c6961c7c360776f09be7ba81c43","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-book.ejs","hash":"9a913922c4ad34edfd8fc75989970ffcb9761ead","modified":1520580964713},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/article.ejs","hash":"11b36cdc807ec20470828385b4a590ffbf7ae1d9","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/item-post.ejs","hash":"e2126d1cf62861b67c3a9946e2e3e47c84174a87","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/pagination.ejs","hash":"ce1492c39a9d73c6dbcc3993e705a2526bbab79b","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/sidebar-about.ejs","hash":"e10ea0176ba87e64888234bafedc01c92544352c","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/douban.ejs","hash":"792a1a9ac0eff0a5c4f22e394b37c8585027e1eb","modified":1520581116597},{"_id":"themes/hexo-theme-pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/pv.ejs","hash":"bd5dbd41017286379c6549405b450227ee4645bc","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/repository.ejs","hash":"234e6a9d8b129dc19e916cb9f927a27b04758180","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_widget/board.ejs","hash":"9d8ade7163bf6c7059e67b3320a33d64fcc5afde","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.eot","hash":"6c0c276a9ce023d569208e69e642583562745810","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.ttf","hash":"c27cba6f2d2710c677f79fbe59480ec0c3535875","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.woff","hash":"9e4123792f885b8e61c916b0a8f5e6176f916945","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/images/avatar.jpg","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520393645414},{"_id":"themes/hexo-theme-pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/js/application.js","hash":"cd1b8d06880ab1b80d45c8f53b53a23b6b8fb7ac","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/js/application.min.js","hash":"e5ae432339928ee0166ec444bcc5e12065944f3d","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/js/plugin.min.js","hash":"7970a38501066965aae8272299ccd0bcb1614d30","modified":1514656224000},{"_id":"source/_posts/技术/2015-03-01-c语言1-c程序的处理过程/c语言编译过程.PNG","hash":"48cac22fd376c1664dd060900048c4fddc094fcd","modified":1519645402348},{"_id":"source/_posts/技术/2015-03-09-c语言11-进程空间-结构/mystack.c","hash":"3aed17cf338ca7048be9a50f27d6c80afa686727","modified":1520823906333},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fclose.jpg","hash":"1561d9964a78f324ea19efe59e89df5e9401b41b","modified":1519645491617},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fgetc.jpg","hash":"5cc8a52b02fe8bd7de0bc7ce9a8701eb15c016c5","modified":1519645491610},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fgets.jpg","hash":"640dc9537ecf7265ebc26b72f2a08a7e305c38fc","modified":1519645491592},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fopen.jpg","hash":"54b98278b1f60e65c681228f4b1a92264f6c7281","modified":1519645491615},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fputc.jpg","hash":"3c33d19d52fa4971155f103edceb35b85fcadf75","modified":1519645491612},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fputs.jpg","hash":"9b9b3f3bfe8e9afe283e5d9246bbfe2f5daa1e4a","modified":1519645491622},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fseek.jpg","hash":"ce322a3f789eb18e2ee41cdd54e315198b485f1d","modified":1519645491599},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/ftell.jpg","hash":"212d9fa6e05d348e68ea9d0b179183db4bb47d9f","modified":1519645491603},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/rewind.jpg","hash":"2c8a3f5fae166034ba5f1038dee10be8901347ce","modified":1519645491607},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/文件读取代码例子.c","hash":"7b04b9172cc07184c5884ef31d218497cabedf7d","modified":1519645491624},{"_id":"source/_posts/技术/2015-03-09-c语言15-位操作/二进制文件加密解密.c","hash":"39a129093c84dd9bef000692a89cbd19d0bc886e","modified":1519645425671},{"_id":"source/_posts/技术/2015-03-09-c语言2-补码/cpu对内存的读写操作详解.png","hash":"71d005bc4486533fe249cd6986137ed73413656a","modified":1520823906334},{"_id":"source/_posts/技术/2015-03-09-c语言3-优先级/优先级.jpg","hash":"2e08109e36d7ca17c9f57796291742e0f380277d","modified":1520823906337},{"_id":"source/_posts/技术/2015-03-09-c语言7-指针/指针偏移法.png","hash":"ef3174cec4850bda5e7df75c894215ffc6106b8b","modified":1520823906338},{"_id":"source/_posts/技术/2015-03-09-c语言8-函数/公式结构和书写结构.png","hash":"fcf92d167a3e70b00df5568d2d5c50b0a84ba8bd","modified":1520823906338},{"_id":"source/_posts/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/main.c","hash":"09402439b26f83f92604da9878db5ce123f60a0f","modified":1520831973469},{"_id":"source/_posts/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/二级指针.c","hash":"dc16363c56f9d4ec6d7daeacdc05686e83aef195","modified":1519645407149},{"_id":"source/_posts/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/二维数组.c","hash":"d24e4a75a9b6632acc2483b4b57d910d33a846e8","modified":1519645407139},{"_id":"source/_posts/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/指针数组.c","hash":"422d302e8fa88a73a14a395799b4f6f65c5a3805","modified":1519645407157},{"_id":"source/_posts/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/数组指针.c","hash":"a5b389a17bcb092d47b5b14233ef30b28bbdae02","modified":1519645407159},{"_id":"source/_posts/技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数/利用二级指针的方式读取文件到堆内存.c","hash":"40a72c47b02f368c329c34805f7f42bb8cfc2653","modified":1519645396038},{"_id":"source/_posts/技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数/堆上根据二级,三级指针做形参,做返回值来申请二维空间.c","hash":"52fe709251ad89b76efbd96e6eb3183b9c8db68f","modified":1519645396033},{"_id":"source/_posts/技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数/序列加密的代码.c","hash":"8b66b9f1558348cf51de2a58602ccc118d05791e","modified":1519645396046},{"_id":"source/_posts/技术/2015-04-13-c语言提高5-字符串/内存操作函数代码.c","hash":"e9d03837c6fe95d7294de533aa56997ba6fda3fe","modified":1519645391600},{"_id":"source/_posts/技术/2015-04-13-c语言提高5-字符串/字符串操作函数代码.c","hash":"9a39cde3bc97d0df759cc288ab4044c07897d283","modified":1519645391595},{"_id":"source/_posts/技术/2015-04-13-c语言提高6-数据结构-双向循环链表-动态库和静态库/双向链表所有代码.c","hash":"f9346f939a59d86bb24b3438dd64b6edf25afc34","modified":1519645386290},{"_id":"source/_posts/技术/2018-03-08-HEXO文档中带文件/avatar.jpg","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520393645414},{"_id":"source/_posts/技术/2018-03-09-c语言提高1-进程空间,一维数组/1.c","hash":"2726b133cb2e002e7bc072cc0277fd1852d35140","modified":1520644748044},{"_id":"source/_posts/技术/2018-03-09-c语言提高1-进程空间,一维数组/1.jpg","hash":"8aaf0bf15112435aced6baf63b28a79b0cca665e","modified":1520644748043},{"_id":"source/_posts/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/qsort代码.c","hash":"6a3762b70bff4e69793aebb6bb451888405e9b95","modified":1519645432356},{"_id":"source/_posts/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/qsotr实现二级排序_对结构体.c","hash":"d6883b5cd6a1f240a32c00754f07ed47f4031efd","modified":1519645432358},{"_id":"source/_posts/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/数组排序优化版.c","hash":"592e73789c915797022b46c4abeba89a9e6cb85b","modified":1519645432359},{"_id":"source/_posts/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/标准库函数qsort1.png","hash":"b03b7ac1783521d611db07aae71bc9c8bd6f3a74","modified":1519645432354},{"_id":"source/_posts/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/标准库函数qsort2.jpg","hash":"e9554ebdbcc605970a0f50fe11d0f69b82d2b165","modified":1519645432352},{"_id":"source/_posts/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png","hash":"e2eb9f4687fcf27e18e21fc66c8fba6cfffb0db5","modified":1519645495150},{"_id":"source/_posts/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png","hash":"10e7e1165feeb3b847962f92cd3f640d8c09dfa6","modified":1519645495149},{"_id":"source/_posts/生活/2018-03-10-图片/1.png","hash":"699012251c1cad4c88c1207b9095554771289f81","modified":1520843974329},{"_id":"themes/hexo-theme-pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/comment.ejs","hash":"a4f8b53225265b0370824eda6b44d4427c98006d","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/copyright.ejs","hash":"a9d3d05428e5844a07706c7fcfeb842e44a36a64","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/donate.ejs","hash":"78136b1fa31e2be32beddfc308f6b90f85cdacbf","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/nav.ejs","hash":"2146cc9fcb2e135815acf0d0b5ad2c183f8ad58f","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/pv.ejs","hash":"7d63de4625310f9f619ac31ddd492c79d6d02cff","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/script.ejs","hash":"c5aa37346d973437d0a693f8dd345a0b87edfe6f","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"dee9c2adc0df37c7e1edb617ba92983eee3f3c8e","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/gitment.ejs","hash":"09e66c8bfd1cc0507a0da619f56101423b9e653a","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/livere.ejs","hash":"c951b2fac4e143c0a2fb4fd3369307f23cfe2687","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/disqus.ejs","hash":"b30ced7d02e63c64227139aa4b99286400d7bcea","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/script.ejs","hash":"ee1cf9c35e51d21a170a7ac5f43e63c2bf777448","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/youyan.ejs","hash":"92d897be24e8c520c5a3f8903c542892e2b30a9a","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/css/style.css","hash":"1f062b6f241af278d4383bcdb3c74189096a3247","modified":1520649638912},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.svg","hash":"cfb4b76ae705fcc3e279104bec956f9a398f8518","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/images/donate/alipay.jpg","hash":"8a5b2c72ddb7396adb709771a35ef50b8cf5485e","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/images/donate/alipayimg.png","hash":"fc1a582a4e303069e73454e6ea1581f9dfeaa13e","modified":1520644748034},{"_id":"themes/hexo-theme-pure/source/images/donate/weipay.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/images/donate/weipayimg.png","hash":"c8a135510379bfe5ba35bfe2bac2f0e5aa893aae","modified":1520644748035},{"_id":"themes/hexo-theme-pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/images/favatar/github-logo.png","hash":"0f4b8ec7206eea1e2582e79ab3e236c89ad81c43","modified":1520584481282},{"_id":"themes/hexo-theme-pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/images/favatar/itellyou.cn-logo.png","hash":"ea4db346a8c9dbcdb378648534fc375ad48a234e","modified":1520583753502},{"_id":"themes/hexo-theme-pure/source/images/favatar/json.cn.jpg","hash":"8549e228506a0380a83c1a63215f22402a1b7503","modified":1520839334029},{"_id":"themes/hexo-theme-pure/source/images/favatar/w3school.jpg","hash":"a383003ab02e3868e202fbae18ed21b3f719f850","modified":1520839193973},{"_id":"source/_posts/技术/2015-03-09-c语言10-字符串和命名空间/数组指针传递以及二级指针接收的流程概括.png","hash":"7e64b13467a8c6651b407e0d20d1b4322ad7b97d","modified":1520823906332},{"_id":"source/_posts/技术/2015-03-09-c语言11-进程空间-结构/内存对齐.png","hash":"09da2091dbe00315a96201e8097816765496047e","modified":1520823906333},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/freadAndfwrite.jpg","hash":"f687e894e0dd254f977291b61d1f3a41a4fa8666","modified":1519645491596},{"_id":"source/_posts/技术/2015-03-09-c语言2-补码/补码求原.png","hash":"d4eb11d2f7237d6ccb0b172e5acb2d4cda4f31ac","modified":1520823906335},{"_id":"source/_posts/技术/2018-03-10-csharp代码的编译过程/csharp代码的编译过程.png","hash":"e2089a091746ba7ca55a25164cfb4545a8fa9e7a","modified":1519645465986},{"_id":"source/_posts/技术/2018-03-10-csharp控件属性事件大全/csharp控件属性事件大全.doc","hash":"b72106e56429d1ce205ce0e6ef6b457f25d59e3c","modified":1519645480460},{"_id":"themes/hexo-theme-pure/source/images/donate/ali_bak.png","hash":"a467830116946b225614028f3d27ab23e99a22d9","modified":1520644748033},{"_id":"themes/hexo-theme-pure/source/images/donate/wx_bak.png","hash":"aa7513282fa935e576eba7830e4b5f5db185cefe","modified":1520644748039},{"_id":"source/_posts/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png","hash":"45182eb2bf9b4bb31d7391388ef5556be7d03f12","modified":1519645495153},{"_id":"themes/hexo-theme-pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1514656224000},{"_id":"source/_posts/技术/2018-03-10-csharp学习笔记/csharp学习笔记.exe","hash":"0904e41a986b764a74741ce5b50b1971672015c6","modified":1519645517295},{"_id":"public/baidusitemap.xml","hash":"a9dc5fb6c4d9e23e4c41da98b1b9161b8061d044","modified":1520859281641},{"_id":"public/atom.xml","hash":"5bea02fe957f99bd1fca9daf5b2b02cf97189e65","modified":1520859281752},{"_id":"public/content.json","hash":"10f7dcec803809f538c41c64034608147013e406","modified":1520859281755},{"_id":"public/sitemap.xml","hash":"66301249524728a90dc7341a5fca0830a709fe2b","modified":1520859281756},{"_id":"public/标准.html","hash":"65f820355befce40f5c56c79122226c90f7c5267","modified":1520859282131},{"_id":"public/404.html","hash":"59ed190ef7068a77e0c87b9fddce1c818d688db3","modified":1520859282454},{"_id":"public/books/index.html","hash":"b6503305a598531ee66040812285e98dcdf37dfd","modified":1520859282468},{"_id":"public/categories/index.html","hash":"f7626320c9ed1cec34fe1064285a34d67ff05482","modified":1520859282468},{"_id":"public/links/index.html","hash":"59d86c77ce22c3bb1f5555bbfac0d570af98720e","modified":1520859282468},{"_id":"public/repository/index.html","hash":"e94fd613a7b4208fa82e13486c05ead20b2a567f","modified":1520859282468},{"_id":"public/2018/03/12/生活/2018-03-10-图片/index.html","hash":"49c5882d07f92e0a5cad3141080c4600d39ef5b2","modified":1520859282468},{"_id":"public/2018/03/12/技术/2018-03-10-csharp学习笔记/index.html","hash":"50711776078dc1268959c74d0ab0f9f21493b3ae","modified":1520859282468},{"_id":"public/2018/03/12/技术/2018-03-10-最全的前端资源教程/index.html","hash":"11bb317fa6e8dc32cf7f4683b999797d93b44c04","modified":1520859282468},{"_id":"public/2018/03/12/技术/2018-03-10-csharp代码的编译过程/index.html","hash":"57e293e54b116a52c5c4fb242b861aad9a64650c","modified":1520859282468},{"_id":"public/2018/03/12/技术/2018-03-10-csharp控件属性事件大全/index.html","hash":"837ad4fd52b83ada798acc8a954343c9a36e8927","modified":1520859282469},{"_id":"public/2018/03/12/技术/2015-04-13-c语言提高6-数据结构-双向循环链表-动态库和静态库/index.html","hash":"3fcd22a4103ea42d44ce0ed4d9b8bff632ba1602","modified":1520859282469},{"_id":"public/2018/03/12/技术/2018-03-09-python编写规范pep8的问题笔记/index.html","hash":"5d85e1bb7c3592fc6db31c94b0516717265afecb","modified":1520859282487},{"_id":"public/2018/03/12/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/index.html","hash":"8230d835e1a03ea472991a7b1f0baeeec5ce9da9","modified":1520859282491},{"_id":"public/2018/03/12/技术/2015-04-13-c语言提高5-字符串/index.html","hash":"d144cc1404eac0509660420c70a3e435313f25b4","modified":1520859282492},{"_id":"public/2016/04/12/技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数/index.html","hash":"ef4776f39733b786d7b5ecc73d541554958069e0","modified":1520859282492},{"_id":"public/2016/04/10/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/index.html","hash":"ed1d96a8c828d08257c0320de9fffdd2b96a0fe5","modified":1520859282492},{"_id":"public/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/index.html","hash":"6d367e4cd96415ee1ade1535e06a0f6ba67f7271","modified":1520859282492},{"_id":"public/2016/03/24/技术/2018-03-09-c语言提高1-进程空间,一维数组/index.html","hash":"23cfe67074e3ef563471a15c3a50e9eea9e7cc0a","modified":1520859282492},{"_id":"public/2015/03/26/技术/2015-03-09-c语言15-位操作/index.html","hash":"e1813ffc6920cd4a2c9fb026eb0e0b86b7b1acdd","modified":1520859282492},{"_id":"public/2015/03/25/技术/2015-03-09-c语言14-文件操作/index.html","hash":"be0cbca8124fc097c85768b8d67974faf43e16c4","modified":1520859282492},{"_id":"public/2015/03/24/技术/2015-03-09-c语言13-链表/index.html","hash":"235183c9ffbcc8536114f1b1c69c3d9a74bcf3f7","modified":1520859282492},{"_id":"public/2015/03/30/技术/2015-03-09-c语言16-条件编译/index.html","hash":"b24455a4012935c90c3cc934e50f15e3c64207d6","modified":1520859282492},{"_id":"public/2015/03/23/技术/2018-03-09-c语言12-共同体,枚举/index.html","hash":"0b8a47677816fac13ac8b986daf72ae09c57d2f4","modified":1520859282492},{"_id":"public/2015/03/20/技术/2015-03-09-c语言10-字符串和命名空间/index.html","hash":"ea2c710be4fe99d5a93036b64d5dfdd16203cd16","modified":1520859282492},{"_id":"public/2015/03/22/技术/2015-03-09-c语言11-进程空间-结构/index.html","hash":"c01ca9e27f1faac62488792e6c36a4ce57b58545","modified":1520859282492},{"_id":"public/2015/03/18/技术/2015-03-09-c语言8-函数/index.html","hash":"575df1676470cb2b159c6a929e651cb6254ee85e","modified":1520859282492},{"_id":"public/2015/03/17/技术/2015-03-09-c语言7-指针/index.html","hash":"a4b35a9cdb2738bcf2a6ad68e0fcdc8d2f6f10ef","modified":1520859282492},{"_id":"public/2015/03/19/技术/2015-03-09-c语言9-变量作用域及修饰符/index.html","hash":"8de32429fbef84b5aee46ee1a01fd95c75b0f6fa","modified":1520859282493},{"_id":"public/2015/03/15/技术/2015-03-09-c语言5-数组的二义性/index.html","hash":"5feaeafe6bee89e852c19348ad966adc06c7e261","modified":1520859282493},{"_id":"public/2015/03/13/技术/2015-03-09-c语言3-优先级/index.html","hash":"005f611f195c5381381b60d7588b55ad00f81682","modified":1520859282493},{"_id":"public/2015/03/12/技术/2015-03-09-c语言2-补码/index.html","hash":"ab03c0d2f41c7d077372d8c86193a51a13c5fda0","modified":1520859282493},{"_id":"public/2015/03/11/技术/2015-03-01-c语言1-c程序的处理过程/index.html","hash":"628c7f108b27cef98defd935ff02004438302c48","modified":1520859282493},{"_id":"public/2013/07/13/技术/2018-03-09-SBC大数据导入(代码)/index.html","hash":"21467c662c1d8b3562e95ab2830905e1a1ee9fd4","modified":1520859282493},{"_id":"public/2015/03/14/技术/2015-03-09-c语言4-程序的设计结构/index.html","hash":"81805b3426aca649fd6604284d364ead664be903","modified":1520859282493},{"_id":"public/2013/07/13/技术/2018-03-08-HEXO文档中带文件/index.html","hash":"195cd2e39ab7236f84a05b81803f9c414bd7e7c4","modified":1520859282493},{"_id":"public/2013/07/13/技术/2015-04-07-HUGO博客/index.html","hash":"91ad44d99abbb51c8b6039dc82322914980bda2b","modified":1520859282493},{"_id":"public/2013/07/13/技术/2015-04-07-HEXO博客/index.html","hash":"84901fd96be1d875648687f68538d9564bf6b808","modified":1520859282493},{"_id":"public/2013/07/13/技术/2018-03-09-Hexo-theme-pure主题books默认选择想读/index.html","hash":"54087b26623db7fa630509163478f3fcb4b72831","modified":1520859282494},{"_id":"public/archives/index.html","hash":"b64a961f6efd153fef14f1914daffedbb891b93c","modified":1520859282494},{"_id":"public/2013/07/13/技术/2018-03-09-C++引用的理解/index.html","hash":"fcd262ca1daa074011a238f7f34a9f272a795ec3","modified":1520859282494},{"_id":"public/archives/page/2/index.html","hash":"678b439340384d9327f27dfa01559b4abccbdc6c","modified":1520859282494},{"_id":"public/archives/page/3/index.html","hash":"d2307533cbf0478eaab364b2683467038ab1054d","modified":1520859282494},{"_id":"public/archives/page/4/index.html","hash":"f4677c46f5d3632f348c39baaee76a7a05611b7b","modified":1520859282494},{"_id":"public/archives/2013/index.html","hash":"7ce86927a2040e30b93d8f3048f7953a638e9cdb","modified":1520859282494},{"_id":"public/archives/2013/07/index.html","hash":"ffb35d6a8b91ffa7a451d8e56459dc9ddfbe9509","modified":1520859282494},{"_id":"public/archives/2015/index.html","hash":"3968d42c4ee87f8cbba5c4a18672658ee41630c0","modified":1520859282494},{"_id":"public/archives/2015/page/2/index.html","hash":"9d3cbd9b6d3921892b41801ac5b56aa52376233e","modified":1520859282494},{"_id":"public/archives/2015/03/index.html","hash":"6b5c541e860065c1a8d3ed7f5043a1299b891331","modified":1520859282495},{"_id":"public/archives/2015/03/page/2/index.html","hash":"8799c871c221147f6af7fd71f8a228817db93b82","modified":1520859282495},{"_id":"public/archives/2016/index.html","hash":"33d2c5a89617db2b60c28320111288d998394aec","modified":1520859282495},{"_id":"public/archives/2016/03/index.html","hash":"3d674214e3f8735ee82e1a68c665386041901328","modified":1520859282495},{"_id":"public/archives/2018/index.html","hash":"9d70ea650baeb265b085b468e3cf89230925fb1c","modified":1520859282495},{"_id":"public/archives/2018/03/index.html","hash":"d833d019e099820643c8940efd0e0da27abbe17d","modified":1520859282495},{"_id":"public/categories/技术/index.html","hash":"53ba2b68093d04d01f193d17e7b97ed026158380","modified":1520859282495},{"_id":"public/archives/2016/04/index.html","hash":"2795d87a0b5e7f3639c925cee85c90675bf11593","modified":1520859282495},{"_id":"public/categories/技术/page/2/index.html","hash":"6751e10f70e1bdcd886af8542e4e0a851b7e483e","modified":1520859282495},{"_id":"public/categories/技术/page/3/index.html","hash":"d55ae4571b8d86c86053ffd04e82c26844d24d22","modified":1520859282495},{"_id":"public/categories/技术/page/4/index.html","hash":"d96ef29972e71aae3a617d2145c6614512d41153","modified":1520859282495},{"_id":"public/categories/生活/index.html","hash":"9f534bf9b91bdc422928f6115a13d66fdf772f79","modified":1520859282495},{"_id":"public/index.html","hash":"af28cc5149f782dd44bb4e1762fbb1ce6fe3982b","modified":1520859282495},{"_id":"public/page/3/index.html","hash":"578c8535c94152464e2b4d54f6733fe5dcdb1aea","modified":1520859282495},{"_id":"public/page/4/index.html","hash":"e80dc9ca6b6bf4ea5c0a910799ccda45d05c9dac","modified":1520859282495},{"_id":"public/page/2/index.html","hash":"149e94a3b3cb31ce77b49e30989bee111a0f2d33","modified":1520859282496},{"_id":"public/tags/index.html","hash":"a0a2a2859d02bf81ebddfb13b007f45214a18fd6","modified":1520859282496},{"_id":"public/tags/c语言/index.html","hash":"7c2960e1a72c08cee26e6faaa9aea565b0cdb73a","modified":1520859282496},{"_id":"public/tags/工具-插件/index.html","hash":"d41b69052f7d506309a0bc8ecfe38c3ab718388c","modified":1520859282496},{"_id":"public/tags/c/index.html","hash":"f56c1c1dcd267b0817cd89533fdf59adb395b92f","modified":1520859282496},{"_id":"public/tags/csharp/index.html","hash":"35730dee8967843741e20243399b8087e3520ecb","modified":1520859282496},{"_id":"public/tags/c语言/page/3/index.html","hash":"bb576d4a26674ad60afe542993d421ddfa17ac84","modified":1520859282496},{"_id":"public/tags/c语言/page/2/index.html","hash":"b5d89f8b69f979d4a7a7012fadd1a3ef2b8e8e14","modified":1520859282496},{"_id":"public/tags/linux/index.html","hash":"b0f238ae059c23c4936be1f09b173fca5003a903","modified":1520859282496},{"_id":"public/tags/windows/index.html","hash":"38211593c67a705d7bcf18b23b31afe031ab40a0","modified":1520859282496},{"_id":"public/tags/虚拟机/index.html","hash":"fbbd1a8dadfdc447d7c57bc84648b1bd4ab3a05e","modified":1520859282496},{"_id":"public/tags/生活随笔/index.html","hash":"a8ead3c201444051597c7549a7fc65c21c958c15","modified":1520859282496},{"_id":"public/tags/web前端/index.html","hash":"bff6723ba64bbde11278ef1e41b7f974d91b7d71","modified":1520859282496},{"_id":"public/tags/开发工具-插件/index.html","hash":"5b5053b3b8ca09559e34d9698a73956b6fd9d841","modified":1520859282496},{"_id":"public/about/index.html","hash":"50f5b12c11267f69035128c0828a77ed209251b5","modified":1520859282496},{"_id":"public/tags/python/index.html","hash":"0690afa173b14131cbb55645a30a471bf684010f","modified":1520859282507},{"_id":"public/分类标签.txt","hash":"d6a3150c7fccf814eb422f67522e95de5c697895","modified":1520859282507},{"_id":"public/favicon_bak.png","hash":"79a9b4f6161f153208b02246c326eecf3095e79d","modified":1520859282507},{"_id":"public/favicon.png","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520859282507},{"_id":"public/about/about.txt","hash":"daef9ba2281f1f4890f04634523d69a2d53bd0a5","modified":1520859282507},{"_id":"public/images/avatar.jpg","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520859282507},{"_id":"public/fonts/iconfont.woff","hash":"9e4123792f885b8e61c916b0a8f5e6176f916945","modified":1520859282507},{"_id":"public/fonts/iconfont.eot","hash":"6c0c276a9ce023d569208e69e642583562745810","modified":1520859282507},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1520859282507},{"_id":"public/images/donate/alipay.jpg","hash":"8a5b2c72ddb7396adb709771a35ef50b8cf5485e","modified":1520859282508},{"_id":"public/images/donate/alipayimg.png","hash":"fc1a582a4e303069e73454e6ea1581f9dfeaa13e","modified":1520859282508},{"_id":"public/images/donate/weipay.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1520859282508},{"_id":"public/fonts/iconfont.ttf","hash":"c27cba6f2d2710c677f79fbe59480ec0c3535875","modified":1520859282508},{"_id":"public/images/favatar/github-logo.png","hash":"0f4b8ec7206eea1e2582e79ab3e236c89ad81c43","modified":1520859282508},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1520859282508},{"_id":"public/images/favatar/w3school.jpg","hash":"a383003ab02e3868e202fbae18ed21b3f719f850","modified":1520859282508},{"_id":"public/images/favatar/json.cn.jpg","hash":"8549e228506a0380a83c1a63215f22402a1b7503","modified":1520859282508},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1520859282508},{"_id":"public/images/favatar/itellyou.cn-logo.png","hash":"ea4db346a8c9dbcdb378648534fc375ad48a234e","modified":1520859282508},{"_id":"public/images/donate/weipayimg.png","hash":"c8a135510379bfe5ba35bfe2bac2f0e5aa893aae","modified":1520859282508},{"_id":"public/2015/03/11/技术/2015-03-01-c语言1-c程序的处理过程/c语言编译过程.PNG","hash":"48cac22fd376c1664dd060900048c4fddc094fcd","modified":1520859282508},{"_id":"public/2015/03/13/技术/2015-03-09-c语言3-优先级/优先级.jpg","hash":"2e08109e36d7ca17c9f57796291742e0f380277d","modified":1520859282508},{"_id":"public/2015/03/17/技术/2015-03-09-c语言7-指针/指针偏移法.png","hash":"ef3174cec4850bda5e7df75c894215ffc6106b8b","modified":1520859282508},{"_id":"public/2015/03/26/技术/2015-03-09-c语言15-位操作/二进制文件加密解密.c","hash":"39a129093c84dd9bef000692a89cbd19d0bc886e","modified":1520859282508},{"_id":"public/2015/03/18/技术/2015-03-09-c语言8-函数/公式结构和书写结构.png","hash":"fcf92d167a3e70b00df5568d2d5c50b0a84ba8bd","modified":1520859282508},{"_id":"public/2013/07/13/技术/2018-03-08-HEXO文档中带文件/avatar.jpg","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520859282508},{"_id":"public/2018/03/12/技术/2015-04-13-c语言提高6-数据结构-双向循环链表-动态库和静态库/双向链表所有代码.c","hash":"f9346f939a59d86bb24b3438dd64b6edf25afc34","modified":1520859282509},{"_id":"public/2015/03/12/技术/2015-03-09-c语言2-补码/cpu对内存的读写操作详解.png","hash":"71d005bc4486533fe249cd6986137ed73413656a","modified":1520859282509},{"_id":"public/2015/03/22/技术/2015-03-09-c语言11-进程空间-结构/mystack.c","hash":"3aed17cf338ca7048be9a50f27d6c80afa686727","modified":1520859282509},{"_id":"public/2016/03/24/技术/2018-03-09-c语言提高1-进程空间,一维数组/1.c","hash":"2726b133cb2e002e7bc072cc0277fd1852d35140","modified":1520859282509},{"_id":"public/2016/03/24/技术/2018-03-09-c语言提高1-进程空间,一维数组/1.jpg","hash":"8aaf0bf15112435aced6baf63b28a79b0cca665e","modified":1520859282509},{"_id":"public/2016/04/12/技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数/利用二级指针的方式读取文件到堆内存.c","hash":"40a72c47b02f368c329c34805f7f42bb8cfc2653","modified":1520859282509},{"_id":"public/2016/04/12/技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数/堆上根据二级,三级指针做形参,做返回值来申请二维空间.c","hash":"52fe709251ad89b76efbd96e6eb3183b9c8db68f","modified":1520859282509},{"_id":"public/2018/03/12/技术/2015-04-13-c语言提高5-字符串/字符串操作函数代码.c","hash":"9a39cde3bc97d0df759cc288ab4044c07897d283","modified":1520859282509},{"_id":"public/2018/03/12/技术/2015-04-13-c语言提高5-字符串/内存操作函数代码.c","hash":"e9d03837c6fe95d7294de533aa56997ba6fda3fe","modified":1520859282509},{"_id":"public/2018/03/12/生活/2018-03-10-图片/1.png","hash":"699012251c1cad4c88c1207b9095554771289f81","modified":1520859282509},{"_id":"public/2016/04/10/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/main.c","hash":"09402439b26f83f92604da9878db5ce123f60a0f","modified":1520859282509},{"_id":"public/2016/04/12/技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数/序列加密的代码.c","hash":"8b66b9f1558348cf51de2a58602ccc118d05791e","modified":1520859282509},{"_id":"public/2016/04/10/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/二级指针.c","hash":"dc16363c56f9d4ec6d7daeacdc05686e83aef195","modified":1520859282509},{"_id":"public/2016/04/10/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/二维数组.c","hash":"d24e4a75a9b6632acc2483b4b57d910d33a846e8","modified":1520859282509},{"_id":"public/2016/04/10/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/指针数组.c","hash":"422d302e8fa88a73a14a395799b4f6f65c5a3805","modified":1520859282509},{"_id":"public/2016/04/10/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/数组指针.c","hash":"a5b389a17bcb092d47b5b14233ef30b28bbdae02","modified":1520859282509},{"_id":"public/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png","hash":"10e7e1165feeb3b847962f92cd3f640d8c09dfa6","modified":1520859282510},{"_id":"public/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png","hash":"e2eb9f4687fcf27e18e21fc66c8fba6cfffb0db5","modified":1520859282510},{"_id":"public/2018/03/12/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/qsort代码.c","hash":"6a3762b70bff4e69793aebb6bb451888405e9b95","modified":1520859282510},{"_id":"public/2018/03/12/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/标准库函数qsort2.jpg","hash":"e9554ebdbcc605970a0f50fe11d0f69b82d2b165","modified":1520859282510},{"_id":"public/2018/03/12/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/qsotr实现二级排序_对结构体.c","hash":"d6883b5cd6a1f240a32c00754f07ed47f4031efd","modified":1520859282510},{"_id":"public/2018/03/12/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/标准库函数qsort1.png","hash":"b03b7ac1783521d611db07aae71bc9c8bd6f3a74","modified":1520859282510},{"_id":"public/2018/03/12/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/数组排序优化版.c","hash":"592e73789c915797022b46c4abeba89a9e6cb85b","modified":1520859282510},{"_id":"public/2015/03/25/技术/2015-03-09-c语言14-文件操作/fclose.jpg","hash":"1561d9964a78f324ea19efe59e89df5e9401b41b","modified":1520859282510},{"_id":"public/2015/03/25/技术/2015-03-09-c语言14-文件操作/fgetc.jpg","hash":"5cc8a52b02fe8bd7de0bc7ce9a8701eb15c016c5","modified":1520859282510},{"_id":"public/2015/03/25/技术/2015-03-09-c语言14-文件操作/fgets.jpg","hash":"640dc9537ecf7265ebc26b72f2a08a7e305c38fc","modified":1520859282510},{"_id":"public/2015/03/25/技术/2015-03-09-c语言14-文件操作/fputs.jpg","hash":"9b9b3f3bfe8e9afe283e5d9246bbfe2f5daa1e4a","modified":1520859282510},{"_id":"public/2015/03/25/技术/2015-03-09-c语言14-文件操作/fputc.jpg","hash":"3c33d19d52fa4971155f103edceb35b85fcadf75","modified":1520859282510},{"_id":"public/2015/03/25/技术/2015-03-09-c语言14-文件操作/fopen.jpg","hash":"54b98278b1f60e65c681228f4b1a92264f6c7281","modified":1520859282510},{"_id":"public/2015/03/25/技术/2015-03-09-c语言14-文件操作/文件读取代码例子.c","hash":"7b04b9172cc07184c5884ef31d218497cabedf7d","modified":1520859282510},{"_id":"public/2015/03/25/技术/2015-03-09-c语言14-文件操作/rewind.jpg","hash":"2c8a3f5fae166034ba5f1038dee10be8901347ce","modified":1520859282510},{"_id":"public/2015/03/25/技术/2015-03-09-c语言14-文件操作/ftell.jpg","hash":"212d9fa6e05d348e68ea9d0b179183db4bb47d9f","modified":1520859282510},{"_id":"public/2015/03/25/技术/2015-03-09-c语言14-文件操作/fseek.jpg","hash":"ce322a3f789eb18e2ee41cdd54e315198b485f1d","modified":1520859282511},{"_id":"public/2015/03/20/技术/2015-03-09-c语言10-字符串和命名空间/数组指针传递以及二级指针接收的流程概括.png","hash":"7e64b13467a8c6651b407e0d20d1b4322ad7b97d","modified":1520859282518},{"_id":"public/2018/03/12/技术/2018-03-10-csharp代码的编译过程/csharp代码的编译过程.png","hash":"e2089a091746ba7ca55a25164cfb4545a8fa9e7a","modified":1520859282520},{"_id":"public/2015/03/12/技术/2015-03-09-c语言2-补码/补码求原.png","hash":"d4eb11d2f7237d6ccb0b172e5acb2d4cda4f31ac","modified":1520859282521},{"_id":"public/2015/03/22/技术/2015-03-09-c语言11-进程空间-结构/内存对齐.png","hash":"09da2091dbe00315a96201e8097816765496047e","modified":1520859282521},{"_id":"public/2015/03/25/技术/2015-03-09-c语言14-文件操作/freadAndfwrite.jpg","hash":"f687e894e0dd254f977291b61d1f3a41a4fa8666","modified":1520859282521},{"_id":"public/fonts/README.html","hash":"43b6265aeccff3f9d495e2b44d07b249a2197bd7","modified":1520859282529},{"_id":"public/js/application.min.js","hash":"e5ae432339928ee0166ec444bcc5e12065944f3d","modified":1520859282529},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1520859282529},{"_id":"public/js/application.js","hash":"cd1b8d06880ab1b80d45c8f53b53a23b6b8fb7ac","modified":1520859282529},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1520859282529},{"_id":"public/js/plugin.min.js","hash":"7970a38501066965aae8272299ccd0bcb1614d30","modified":1520859282529},{"_id":"public/css/style.css","hash":"1f062b6f241af278d4383bcdb3c74189096a3247","modified":1520859282529},{"_id":"public/fonts/iconfont.svg","hash":"cfb4b76ae705fcc3e279104bec956f9a398f8518","modified":1520859282529},{"_id":"public/images/donate/ali_bak.png","hash":"a467830116946b225614028f3d27ab23e99a22d9","modified":1520859282530},{"_id":"public/2018/03/12/技术/2018-03-10-csharp控件属性事件大全/csharp控件属性事件大全.doc","hash":"b72106e56429d1ce205ce0e6ef6b457f25d59e3c","modified":1520859282530},{"_id":"public/images/donate/wx_bak.png","hash":"aa7513282fa935e576eba7830e4b5f5db185cefe","modified":1520859282553},{"_id":"public/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png","hash":"45182eb2bf9b4bb31d7391388ef5556be7d03f12","modified":1520859282576},{"_id":"public/2018/03/12/技术/2018-03-10-csharp学习笔记/csharp学习笔记.exe","hash":"0904e41a986b764a74741ce5b50b1971672015c6","modified":1520859282585}],"Category":[{"name":"技术","_id":"cjeo8cj4a000a5oq8kmfc5t9m"},{"name":"生活","_id":"cjeo8cj5w00345oq8mzx1l7lp"}],"Data":[{"_id":"links","data":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}},{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}},{"_id":"movies","data":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}],"Page":[{"_content":"## 标题标准\n标题默认从##开始，","source":"标准.md","raw":"## 标题标准\n标题默认从##开始，","date":"2018-03-12T03:05:06.362Z","updated":"2018-03-12T03:05:06.362Z","path":"标准.html","title":"","comments":1,"layout":"page","_id":"cjeo8cj1100005oq8q2ozlzq6","content":"<h2 id=\"标题标准\"><a href=\"#标题标准\" class=\"headerlink\" title=\"标题标准\"></a>标题标准</h2><p>标题默认从##开始，</p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"标题标准\"><a href=\"#标题标准\" class=\"headerlink\" title=\"标题标准\"></a>标题标准</h2><p>标题默认从##开始，</p>\n"},{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://blog.cofess.com\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://blog.cofess.com\" homePageName=\"回到我的主页\"></script>\n","date":"2018-03-10T05:20:27.693Z","updated":"2018-03-10T05:20:27.693Z","path":"/404.html","layout":"page","_id":"cjeo8cj2n00015oq8gk8x8vhw","content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://blog.cofess.com\" homepagename=\"回到我的主页\"></script>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://blog.cofess.com\" homepagename=\"回到我的主页\"></script>\n"},{"title":"关于/留言","layout":"about","comments":1,"sidebar":"custom","_content":"<div align=center>\n<img src='../images/avatar.jpg' width=\"100px\" height=\"100px\" alt=\"图片描述文字\"/>\n</div>\n\n```csharp\n{\n  name: '阿兴',\n  address: '广东省广州市',\n  QQ: 1069784176\n  github: 'https://github.com/GuoXingGitHub',\n  blog: 'https://GuoXingGitHub.github.io',\n  email: '15692413487@163.com',\n  description: 'hahaha...',\n\n  skills: [\n    ['C', 'C++', 'C#', '.Net', 'Sql', 'Js'],\n    ['Linux', 'Qt'],\n    ['网站开发', '游戏服务器'],\n    ['数据库'], \n  ]\n}\n```\n\n\n\n\n ","source":"about/index.md","raw":"---\ntitle: 关于/留言\nlayout: about\ncomments: true\nsidebar: custom\n---\n<div align=center>\n<img src='../images/avatar.jpg' width=\"100px\" height=\"100px\" alt=\"图片描述文字\"/>\n</div>\n\n```csharp\n{\n  name: '阿兴',\n  address: '广东省广州市',\n  QQ: 1069784176\n  github: 'https://github.com/GuoXingGitHub',\n  blog: 'https://GuoXingGitHub.github.io',\n  email: '15692413487@163.com',\n  description: 'hahaha...',\n\n  skills: [\n    ['C', 'C++', 'C#', '.Net', 'Sql', 'Js'],\n    ['Linux', 'Qt'],\n    ['网站开发', '游戏服务器'],\n    ['数据库'], \n  ]\n}\n```\n\n\n\n\n ","date":"2018-03-12T09:12:58.381Z","updated":"2018-03-12T09:12:58.381Z","path":"about/index.html","_id":"cjeo8cj2o00025oq8djyecdxc","content":"<div align=\"center\"><br><img src=\"/about/../images/avatar.jpg\" width=\"100px\" height=\"100px\" alt=\"图片描述文字\"><br></div>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'阿兴'</span>,</span><br><span class=\"line\">  address: <span class=\"string\">'广东省广州市'</span>,</span><br><span class=\"line\">  QQ: <span class=\"number\">1069784176</span></span><br><span class=\"line\">  github: <span class=\"string\">'https://github.com/GuoXingGitHub'</span>,</span><br><span class=\"line\">  blog: <span class=\"string\">'https://GuoXingGitHub.github.io'</span>,</span><br><span class=\"line\">  email: <span class=\"string\">'15692413487@163.com'</span>,</span><br><span class=\"line\">  description: <span class=\"string\">'hahaha...'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  skills: [</span><br><span class=\"line\">    [<span class=\"meta\">'C', 'C++', 'C#', '.Net', 'Sql', 'Js'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'Linux', 'Qt'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'网站开发', '游戏服务器'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'数据库'</span>], </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<div align=\"center\"><br><img src=\"/about/../images/avatar.jpg\" width=\"100px\" height=\"100px\" alt=\"图片描述文字\"><br></div>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'阿兴'</span>,</span><br><span class=\"line\">  address: <span class=\"string\">'广东省广州市'</span>,</span><br><span class=\"line\">  QQ: <span class=\"number\">1069784176</span></span><br><span class=\"line\">  github: <span class=\"string\">'https://github.com/GuoXingGitHub'</span>,</span><br><span class=\"line\">  blog: <span class=\"string\">'https://GuoXingGitHub.github.io'</span>,</span><br><span class=\"line\">  email: <span class=\"string\">'15692413487@163.com'</span>,</span><br><span class=\"line\">  description: <span class=\"string\">'hahaha...'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  skills: [</span><br><span class=\"line\">    [<span class=\"meta\">'C', 'C++', 'C#', '.Net', 'Sql', 'Js'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'Linux', 'Qt'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'网站开发', '游戏服务器'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'数据库'</span>], </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---","date":"2018-03-07T06:30:17.354Z","updated":"2017-12-30T17:50:24.000Z","path":"books/index.html","_id":"cjeo8cj2p00035oq82gc80o9o","content":"","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"分类","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\n#HUGO 随笔\n---\n","date":"2018-03-08T03:02:35.636Z","updated":"2018-03-08T03:02:35.636Z","path":"categories/index.html","_id":"cjeo8cj2q00045oq85w6h14uf","content":"","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2018-03-07T07:45:27.558Z","updated":"2017-12-30T17:50:24.000Z","path":"links/index.html","_id":"cjeo8cj2s00055oq8gk9rus8l","content":"","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2018-03-08T03:05:16.367Z","updated":"2018-03-08T03:05:16.366Z","path":"repository/index.html","_id":"cjeo8cj2t00065oq8iw83g8cr","content":"","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\n---\n","date":"2018-03-08T05:27:36.280Z","updated":"2018-03-08T05:27:36.280Z","path":"tags/index.html","_id":"cjeo8cj2u00075oq8w5s5as4y","content":"","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""}],"Post":[{"title":"c语言1-c程序的处理过程","date":"2015-03-11T15:16:39.000Z","_content":"\n### c程序的处理过程\n预处理-->预编译-->汇编-->链接；备注：.o文件为二进制文件\n![c语言编译过程](c语言编译过程.PNG)\n\n### 步骤解析\n1. vim hello.c\n2. gcc -E hello.c -o hello.i //处理文件包含， 宏和注释\n3. gcc -S hello.i -o hello.s //编译为汇编文件\n4. gcc -c hello.s -o hello.o //经汇编后为二进制的机器指令\n5. gcc hello.o -o hello //链接所用的到库\n","source":"_posts/技术/2015-03-01-c语言1-c程序的处理过程.md","raw":"---\ntitle: c语言1-c程序的处理过程\ndate: 2015-03-11 23:16:39\ncategories: 技术\ntags: c语言\n---\n\n### c程序的处理过程\n预处理-->预编译-->汇编-->链接；备注：.o文件为二进制文件\n![c语言编译过程](c语言编译过程.PNG)\n\n### 步骤解析\n1. vim hello.c\n2. gcc -E hello.c -o hello.i //处理文件包含， 宏和注释\n3. gcc -S hello.i -o hello.s //编译为汇编文件\n4. gcc -c hello.s -o hello.o //经汇编后为二进制的机器指令\n5. gcc hello.o -o hello //链接所用的到库\n","slug":"技术/2015-03-01-c语言1-c程序的处理过程","published":1,"updated":"2018-03-12T04:28:29.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4300085oq8t2olcp9z","content":"<h3 id=\"c程序的处理过程\"><a href=\"#c程序的处理过程\" class=\"headerlink\" title=\"c程序的处理过程\"></a>c程序的处理过程</h3><p>预处理–&gt;预编译–&gt;汇编–&gt;链接；备注：.o文件为二进制文件<br><img src=\"/2015/03/11/技术/2015-03-01-c语言1-c程序的处理过程/c语言编译过程.PNG\" alt=\"c语言编译过程\"></p>\n<h3 id=\"步骤解析\"><a href=\"#步骤解析\" class=\"headerlink\" title=\"步骤解析\"></a>步骤解析</h3><ol>\n<li>vim hello.c</li>\n<li>gcc -E hello.c -o hello.i //处理文件包含， 宏和注释</li>\n<li>gcc -S hello.i -o hello.s //编译为汇编文件</li>\n<li>gcc -c hello.s -o hello.o //经汇编后为二进制的机器指令</li>\n<li>gcc hello.o -o hello //链接所用的到库</li>\n</ol>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"c程序的处理过程\"><a href=\"#c程序的处理过程\" class=\"headerlink\" title=\"c程序的处理过程\"></a>c程序的处理过程</h3><p>预处理–&gt;预编译–&gt;汇编–&gt;链接；备注：.o文件为二进制文件<br><img src=\"/2015/03/11/技术/2015-03-01-c语言1-c程序的处理过程/c语言编译过程.PNG\" alt=\"c语言编译过程\"></p>\n<h3 id=\"步骤解析\"><a href=\"#步骤解析\" class=\"headerlink\" title=\"步骤解析\"></a>步骤解析</h3><ol>\n<li>vim hello.c</li>\n<li>gcc -E hello.c -o hello.i //处理文件包含， 宏和注释</li>\n<li>gcc -S hello.i -o hello.s //编译为汇编文件</li>\n<li>gcc -c hello.s -o hello.o //经汇编后为二进制的机器指令</li>\n<li>gcc hello.o -o hello //链接所用的到库</li>\n</ol>\n"},{"title":"c语言11-进程空间,结构","date":"2015-03-21T16:16:12.000Z","_content":"## 进程空间\nree:释放空间的时候  保存指针的变量还是不变的，释放的只是保存数据的空间，所以我们还可以通过该指针变量来访问数据，可能该空间重新保存了别的数据，所以释放后我们也需要将指针变量设置为NULL，避免通过该指针非法访问导致系统崩溃\n\n申请，判空，使用，释放，置NULL\n\n在自定义方法里面申请栈空间返回地址时特别注意:栈里的空间不能返回，也就是说不能通过返回栈空间的地址的方式访问栈空间，但是堆空间是可以返回的，也就是说可以通过堆空间返回的地址来操作堆空间\n\n## 内存泄漏\n申请返回的指针，是我们操作堆空间唯一的标识，如果该标识丢了，那么就会造成内存泄漏\n\nmalloc和free:\n1. malloc的个数大雨free导致内存泄漏\n2. free大于malloc出现double free\n3. free和malloc必须配对使用  \n\n## 进程空间和程序之间的关系\n每个程序启动都会开辟一个新的进程空间，所以进程空间和程序是一对一的关系\n\n## 申请内存时易犯错的三点\n### malloc申请内存判断是否申请失败\n```c\nchar * ch=(char*)malloc(100);              \nif(NULL==ch)                               \n    return -1;                             \nfree(ch);     \n```\n\n### 服务器模型:未释放内存空间，重新开辟新的空间，导致内存泄漏\nwhile(1)\n{\n    char*ch=(char*)malloc(100);\n    printf(\"xxxxxxxxxxxxxxxx\\n\");\n    printf(\"xxxxxxxxxxxxxxxx\\n\");\n    printf(\"xxxxxxxxxxxxxxxx\\n\");\n    ch=(char*)malloc(100);//中途忘记已经是申请了导致重新开辟了一个新的空间\n    free(ch);//每次循环都只是释放了一个空间还剩下一个空间没有释放导致越来越多的内存泄漏（没有释放）\n}\n\n### 内存空间最好谁申请谁释放(非绝对)\n\n## 自实现栈空间模型的代码\n```c\n#include <stdio.h>\n\n//FILO  LIFO\n\n#define N   100\n\nstruct Stack\n{\n    char space[N];\n    int top;\n};\n\nstruct Stack  st = {{0},0};\n\nint isFull()  //满返真\n{\n    if(st.top == 100)\n        return 1;\n    else\n        return 0;\n}\n\nint isEmpty()     //空返真\n{\n    if(st.top == 0)\n        return 1;\n    else\n        return 0;\n}\n\nvoid push(char ch)\n{\n    st.space[st.top] = ch;\n    st.top++;\n}\n\nint pop()\n{\n    st.top--;\n    return st.space[st.top];\n}\n\nint main(void)\n{\n    char ch = 'a';\n    for(int i=0; i<26; i++)\n    {\n        if(!isFull())\n            push(ch++);\n    }\n\n    while(!isEmpty())\n        putchar(pop());\n\n    return 0;\n}\n```\n\n## 结构体\n### 使用情景\n结构体设计出来就是为了处理我们在一个情况下需要处理多种不同类型而设计出来的，可以自定义类型的方法\n\n### 内存对齐\n![内存对齐](内存对齐.png)\n\n### 结构体的几种定义方式\n1.无名构造体:\nstruct{}stu;:仅在本地使用，并且申明的时候必须带上变量名\n2.有名构造体:\nstruct 结构体名{}stu; 申明变量:struct 结构体名 变量名\n3.别名构造体类型:\ntypedef struct 结构体名{} 别名; 以后 别名=struct 结构体名\n\n## 小结\n1:我们定义的新类型，只要没有申明变量是步占空间的\n2:结构体的类型是 struct+结构体名，struct不能省悦\n3:凡是基本类型都可以先申明后初始化，或者直接在申明的时候初始化,凡是构造类型必须在申明的时候初始化，或者先申明然后对单独的每个“元素”单独初始化，例如:如果是二级数组在先申明后初始化应该对[][]的每个元素单独初始化\n4:切记，数组名是数组元素的首地址，是个常量，不能修改，所以我们对字符数组进行赋值的时候不能直接将字符串用=的符号进行复赋值（接收数据的变量是个指针（字符数组首元素的指针（常量）），应该用strcpy进行赋值操作\n5:结构体做形参，实参，返回值，接收值时，都是用结构体类型\n6:typedef:申明别名的方法  例:typedef 类型  别名（别名我们一般用大写，和系统的类型进行区分）\n7:结构体数组如果未初始化，不设值的会默认为0（整形的为0，字符型的为'\\0'，ascii码为0）\n8:如果结构体中有数组的话需要把数组散开看，再来拿出最大值，不能把整个数组一起看","source":"_posts/技术/2015-03-09-c语言11-进程空间-结构.md","raw":"---\ntitle: c语言11-进程空间,结构\ndate: 2015-03-22 00:16:12\ncategories: 技术\ntags: c语言\n---\n## 进程空间\nree:释放空间的时候  保存指针的变量还是不变的，释放的只是保存数据的空间，所以我们还可以通过该指针变量来访问数据，可能该空间重新保存了别的数据，所以释放后我们也需要将指针变量设置为NULL，避免通过该指针非法访问导致系统崩溃\n\n申请，判空，使用，释放，置NULL\n\n在自定义方法里面申请栈空间返回地址时特别注意:栈里的空间不能返回，也就是说不能通过返回栈空间的地址的方式访问栈空间，但是堆空间是可以返回的，也就是说可以通过堆空间返回的地址来操作堆空间\n\n## 内存泄漏\n申请返回的指针，是我们操作堆空间唯一的标识，如果该标识丢了，那么就会造成内存泄漏\n\nmalloc和free:\n1. malloc的个数大雨free导致内存泄漏\n2. free大于malloc出现double free\n3. free和malloc必须配对使用  \n\n## 进程空间和程序之间的关系\n每个程序启动都会开辟一个新的进程空间，所以进程空间和程序是一对一的关系\n\n## 申请内存时易犯错的三点\n### malloc申请内存判断是否申请失败\n```c\nchar * ch=(char*)malloc(100);              \nif(NULL==ch)                               \n    return -1;                             \nfree(ch);     \n```\n\n### 服务器模型:未释放内存空间，重新开辟新的空间，导致内存泄漏\nwhile(1)\n{\n    char*ch=(char*)malloc(100);\n    printf(\"xxxxxxxxxxxxxxxx\\n\");\n    printf(\"xxxxxxxxxxxxxxxx\\n\");\n    printf(\"xxxxxxxxxxxxxxxx\\n\");\n    ch=(char*)malloc(100);//中途忘记已经是申请了导致重新开辟了一个新的空间\n    free(ch);//每次循环都只是释放了一个空间还剩下一个空间没有释放导致越来越多的内存泄漏（没有释放）\n}\n\n### 内存空间最好谁申请谁释放(非绝对)\n\n## 自实现栈空间模型的代码\n```c\n#include <stdio.h>\n\n//FILO  LIFO\n\n#define N   100\n\nstruct Stack\n{\n    char space[N];\n    int top;\n};\n\nstruct Stack  st = {{0},0};\n\nint isFull()  //满返真\n{\n    if(st.top == 100)\n        return 1;\n    else\n        return 0;\n}\n\nint isEmpty()     //空返真\n{\n    if(st.top == 0)\n        return 1;\n    else\n        return 0;\n}\n\nvoid push(char ch)\n{\n    st.space[st.top] = ch;\n    st.top++;\n}\n\nint pop()\n{\n    st.top--;\n    return st.space[st.top];\n}\n\nint main(void)\n{\n    char ch = 'a';\n    for(int i=0; i<26; i++)\n    {\n        if(!isFull())\n            push(ch++);\n    }\n\n    while(!isEmpty())\n        putchar(pop());\n\n    return 0;\n}\n```\n\n## 结构体\n### 使用情景\n结构体设计出来就是为了处理我们在一个情况下需要处理多种不同类型而设计出来的，可以自定义类型的方法\n\n### 内存对齐\n![内存对齐](内存对齐.png)\n\n### 结构体的几种定义方式\n1.无名构造体:\nstruct{}stu;:仅在本地使用，并且申明的时候必须带上变量名\n2.有名构造体:\nstruct 结构体名{}stu; 申明变量:struct 结构体名 变量名\n3.别名构造体类型:\ntypedef struct 结构体名{} 别名; 以后 别名=struct 结构体名\n\n## 小结\n1:我们定义的新类型，只要没有申明变量是步占空间的\n2:结构体的类型是 struct+结构体名，struct不能省悦\n3:凡是基本类型都可以先申明后初始化，或者直接在申明的时候初始化,凡是构造类型必须在申明的时候初始化，或者先申明然后对单独的每个“元素”单独初始化，例如:如果是二级数组在先申明后初始化应该对[][]的每个元素单独初始化\n4:切记，数组名是数组元素的首地址，是个常量，不能修改，所以我们对字符数组进行赋值的时候不能直接将字符串用=的符号进行复赋值（接收数据的变量是个指针（字符数组首元素的指针（常量）），应该用strcpy进行赋值操作\n5:结构体做形参，实参，返回值，接收值时，都是用结构体类型\n6:typedef:申明别名的方法  例:typedef 类型  别名（别名我们一般用大写，和系统的类型进行区分）\n7:结构体数组如果未初始化，不设值的会默认为0（整形的为0，字符型的为'\\0'，ascii码为0）\n8:如果结构体中有数组的话需要把数组散开看，再来拿出最大值，不能把整个数组一起看","slug":"技术/2015-03-09-c语言11-进程空间-结构","published":1,"updated":"2018-03-12T03:15:39.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4700095oq8hr80o1g3","content":"<h2 id=\"进程空间\"><a href=\"#进程空间\" class=\"headerlink\" title=\"进程空间\"></a>进程空间</h2><p>ree:释放空间的时候  保存指针的变量还是不变的，释放的只是保存数据的空间，所以我们还可以通过该指针变量来访问数据，可能该空间重新保存了别的数据，所以释放后我们也需要将指针变量设置为NULL，避免通过该指针非法访问导致系统崩溃</p>\n<p>申请，判空，使用，释放，置NULL</p>\n<p>在自定义方法里面申请栈空间返回地址时特别注意:栈里的空间不能返回，也就是说不能通过返回栈空间的地址的方式访问栈空间，但是堆空间是可以返回的，也就是说可以通过堆空间返回的地址来操作堆空间</p>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>申请返回的指针，是我们操作堆空间唯一的标识，如果该标识丢了，那么就会造成内存泄漏</p>\n<p>malloc和free:</p>\n<ol>\n<li>malloc的个数大雨free导致内存泄漏</li>\n<li>free大于malloc出现double free</li>\n<li>free和malloc必须配对使用  </li>\n</ol>\n<h2 id=\"进程空间和程序之间的关系\"><a href=\"#进程空间和程序之间的关系\" class=\"headerlink\" title=\"进程空间和程序之间的关系\"></a>进程空间和程序之间的关系</h2><p>每个程序启动都会开辟一个新的进程空间，所以进程空间和程序是一对一的关系</p>\n<h2 id=\"申请内存时易犯错的三点\"><a href=\"#申请内存时易犯错的三点\" class=\"headerlink\" title=\"申请内存时易犯错的三点\"></a>申请内存时易犯错的三点</h2><h3 id=\"malloc申请内存判断是否申请失败\"><a href=\"#malloc申请内存判断是否申请失败\" class=\"headerlink\" title=\"malloc申请内存判断是否申请失败\"></a>malloc申请内存判断是否申请失败</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> * ch=(<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);              </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span>==ch)                               </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;                             </span><br><span class=\"line\"><span class=\"built_in\">free</span>(ch);</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务器模型-未释放内存空间，重新开辟新的空间，导致内存泄漏\"><a href=\"#服务器模型-未释放内存空间，重新开辟新的空间，导致内存泄漏\" class=\"headerlink\" title=\"服务器模型:未释放内存空间，重新开辟新的空间，导致内存泄漏\"></a>服务器模型:未释放内存空间，重新开辟新的空间，导致内存泄漏</h3><p>while(1)<br>{<br>    char<em>ch=(char</em>)malloc(100);<br>    printf(“xxxxxxxxxxxxxxxx\\n”);<br>    printf(“xxxxxxxxxxxxxxxx\\n”);<br>    printf(“xxxxxxxxxxxxxxxx\\n”);<br>    ch=(char*)malloc(100);//中途忘记已经是申请了导致重新开辟了一个新的空间<br>    free(ch);//每次循环都只是释放了一个空间还剩下一个空间没有释放导致越来越多的内存泄漏（没有释放）<br>}</p>\n<h3 id=\"内存空间最好谁申请谁释放-非绝对\"><a href=\"#内存空间最好谁申请谁释放-非绝对\" class=\"headerlink\" title=\"内存空间最好谁申请谁释放(非绝对)\"></a>内存空间最好谁申请谁释放(非绝对)</h3><h2 id=\"自实现栈空间模型的代码\"><a href=\"#自实现栈空间模型的代码\" class=\"headerlink\" title=\"自实现栈空间模型的代码\"></a>自实现栈空间模型的代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//FILO  LIFO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N   100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> space[N];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>  <span class=\"title\">st</span> = &#123;</span>&#123;<span class=\"number\">0</span>&#125;,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isFull</span><span class=\"params\">()</span>  <span class=\"comment\">//满返真</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(st.top == <span class=\"number\">100</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span>     <span class=\"comment\">//空返真</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(st.top == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st.space[st.top] = ch;</span><br><span class=\"line\">    st.top++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st.top--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> st.space[st.top];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">26</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isFull())</span><br><span class=\"line\">            push(ch++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!isEmpty())</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(pop());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><h3 id=\"使用情景\"><a href=\"#使用情景\" class=\"headerlink\" title=\"使用情景\"></a>使用情景</h3><p>结构体设计出来就是为了处理我们在一个情况下需要处理多种不同类型而设计出来的，可以自定义类型的方法</p>\n<h3 id=\"内存对齐\"><a href=\"#内存对齐\" class=\"headerlink\" title=\"内存对齐\"></a>内存对齐</h3><p><img src=\"/2015/03/22/技术/2015-03-09-c语言11-进程空间-结构/内存对齐.png\" alt=\"内存对齐\"></p>\n<h3 id=\"结构体的几种定义方式\"><a href=\"#结构体的几种定义方式\" class=\"headerlink\" title=\"结构体的几种定义方式\"></a>结构体的几种定义方式</h3><p>1.无名构造体:<br>struct{}stu;:仅在本地使用，并且申明的时候必须带上变量名<br>2.有名构造体:<br>struct 结构体名{}stu; 申明变量:struct 结构体名 变量名<br>3.别名构造体类型:<br>typedef struct 结构体名{} 别名; 以后 别名=struct 结构体名</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>1:我们定义的新类型，只要没有申明变量是步占空间的<br>2:结构体的类型是 struct+结构体名，struct不能省悦<br>3:凡是基本类型都可以先申明后初始化，或者直接在申明的时候初始化,凡是构造类型必须在申明的时候初始化，或者先申明然后对单独的每个“元素”单独初始化，例如:如果是二级数组在先申明后初始化应该对[][]的每个元素单独初始化<br>4:切记，数组名是数组元素的首地址，是个常量，不能修改，所以我们对字符数组进行赋值的时候不能直接将字符串用=的符号进行复赋值（接收数据的变量是个指针（字符数组首元素的指针（常量）），应该用strcpy进行赋值操作<br>5:结构体做形参，实参，返回值，接收值时，都是用结构体类型<br>6:typedef:申明别名的方法  例:typedef 类型  别名（别名我们一般用大写，和系统的类型进行区分）<br>7:结构体数组如果未初始化，不设值的会默认为0（整形的为0，字符型的为’\\0’，ascii码为0）<br>8:如果结构体中有数组的话需要把数组散开看，再来拿出最大值，不能把整个数组一起看</p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"进程空间\"><a href=\"#进程空间\" class=\"headerlink\" title=\"进程空间\"></a>进程空间</h2><p>ree:释放空间的时候  保存指针的变量还是不变的，释放的只是保存数据的空间，所以我们还可以通过该指针变量来访问数据，可能该空间重新保存了别的数据，所以释放后我们也需要将指针变量设置为NULL，避免通过该指针非法访问导致系统崩溃</p>\n<p>申请，判空，使用，释放，置NULL</p>\n<p>在自定义方法里面申请栈空间返回地址时特别注意:栈里的空间不能返回，也就是说不能通过返回栈空间的地址的方式访问栈空间，但是堆空间是可以返回的，也就是说可以通过堆空间返回的地址来操作堆空间</p>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>申请返回的指针，是我们操作堆空间唯一的标识，如果该标识丢了，那么就会造成内存泄漏</p>\n<p>malloc和free:</p>\n<ol>\n<li>malloc的个数大雨free导致内存泄漏</li>\n<li>free大于malloc出现double free</li>\n<li>free和malloc必须配对使用  </li>\n</ol>\n<h2 id=\"进程空间和程序之间的关系\"><a href=\"#进程空间和程序之间的关系\" class=\"headerlink\" title=\"进程空间和程序之间的关系\"></a>进程空间和程序之间的关系</h2><p>每个程序启动都会开辟一个新的进程空间，所以进程空间和程序是一对一的关系</p>\n<h2 id=\"申请内存时易犯错的三点\"><a href=\"#申请内存时易犯错的三点\" class=\"headerlink\" title=\"申请内存时易犯错的三点\"></a>申请内存时易犯错的三点</h2><h3 id=\"malloc申请内存判断是否申请失败\"><a href=\"#malloc申请内存判断是否申请失败\" class=\"headerlink\" title=\"malloc申请内存判断是否申请失败\"></a>malloc申请内存判断是否申请失败</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> * ch=(<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);              </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span>==ch)                               </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;                             </span><br><span class=\"line\"><span class=\"built_in\">free</span>(ch);</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务器模型-未释放内存空间，重新开辟新的空间，导致内存泄漏\"><a href=\"#服务器模型-未释放内存空间，重新开辟新的空间，导致内存泄漏\" class=\"headerlink\" title=\"服务器模型:未释放内存空间，重新开辟新的空间，导致内存泄漏\"></a>服务器模型:未释放内存空间，重新开辟新的空间，导致内存泄漏</h3><p>while(1)<br>{<br>    char<em>ch=(char</em>)malloc(100);<br>    printf(“xxxxxxxxxxxxxxxx\\n”);<br>    printf(“xxxxxxxxxxxxxxxx\\n”);<br>    printf(“xxxxxxxxxxxxxxxx\\n”);<br>    ch=(char*)malloc(100);//中途忘记已经是申请了导致重新开辟了一个新的空间<br>    free(ch);//每次循环都只是释放了一个空间还剩下一个空间没有释放导致越来越多的内存泄漏（没有释放）<br>}</p>\n<h3 id=\"内存空间最好谁申请谁释放-非绝对\"><a href=\"#内存空间最好谁申请谁释放-非绝对\" class=\"headerlink\" title=\"内存空间最好谁申请谁释放(非绝对)\"></a>内存空间最好谁申请谁释放(非绝对)</h3><h2 id=\"自实现栈空间模型的代码\"><a href=\"#自实现栈空间模型的代码\" class=\"headerlink\" title=\"自实现栈空间模型的代码\"></a>自实现栈空间模型的代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//FILO  LIFO</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N   100</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> space[N];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>  <span class=\"title\">st</span> = &#123;</span>&#123;<span class=\"number\">0</span>&#125;,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isFull</span><span class=\"params\">()</span>  <span class=\"comment\">//满返真</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(st.top == <span class=\"number\">100</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span>     <span class=\"comment\">//空返真</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(st.top == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st.space[st.top] = ch;</span><br><span class=\"line\">    st.top++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st.top--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> st.space[st.top];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">26</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isFull())</span><br><span class=\"line\">            push(ch++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!isEmpty())</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(pop());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><h3 id=\"使用情景\"><a href=\"#使用情景\" class=\"headerlink\" title=\"使用情景\"></a>使用情景</h3><p>结构体设计出来就是为了处理我们在一个情况下需要处理多种不同类型而设计出来的，可以自定义类型的方法</p>\n<h3 id=\"内存对齐\"><a href=\"#内存对齐\" class=\"headerlink\" title=\"内存对齐\"></a>内存对齐</h3><p><img src=\"/2015/03/22/技术/2015-03-09-c语言11-进程空间-结构/内存对齐.png\" alt=\"内存对齐\"></p>\n<h3 id=\"结构体的几种定义方式\"><a href=\"#结构体的几种定义方式\" class=\"headerlink\" title=\"结构体的几种定义方式\"></a>结构体的几种定义方式</h3><p>1.无名构造体:<br>struct{}stu;:仅在本地使用，并且申明的时候必须带上变量名<br>2.有名构造体:<br>struct 结构体名{}stu; 申明变量:struct 结构体名 变量名<br>3.别名构造体类型:<br>typedef struct 结构体名{} 别名; 以后 别名=struct 结构体名</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>1:我们定义的新类型，只要没有申明变量是步占空间的<br>2:结构体的类型是 struct+结构体名，struct不能省悦<br>3:凡是基本类型都可以先申明后初始化，或者直接在申明的时候初始化,凡是构造类型必须在申明的时候初始化，或者先申明然后对单独的每个“元素”单独初始化，例如:如果是二级数组在先申明后初始化应该对[][]的每个元素单独初始化<br>4:切记，数组名是数组元素的首地址，是个常量，不能修改，所以我们对字符数组进行赋值的时候不能直接将字符串用=的符号进行复赋值（接收数据的变量是个指针（字符数组首元素的指针（常量）），应该用strcpy进行赋值操作<br>5:结构体做形参，实参，返回值，接收值时，都是用结构体类型<br>6:typedef:申明别名的方法  例:typedef 类型  别名（别名我们一般用大写，和系统的类型进行区分）<br>7:结构体数组如果未初始化，不设值的会默认为0（整形的为0，字符型的为’\\0’，ascii码为0）<br>8:如果结构体中有数组的话需要把数组散开看，再来拿出最大值，不能把整个数组一起看</p>\n"},{"title":"c语言10-字符串和命名空间","date":"2015-03-19T16:04:29.000Z","_content":"\n## c语言里面的字符串\n理解:1:因为c语言中没有字符串类型，所以只能用char类型的数组来代替，\n          2:在编译阶段，系统会将字符串编译加载到data空间的只读区域，以字符数组的方式存放，并且字符串就相当于是数组名（字符串元素的首地址）【常量不能修改】\n          3:注意:字符串的首地址是个常量，不能修改和移动的，因为如果修改了首地址的话，后面的其他元素也就找不到了，如果我们要修改的化，可以将首元素的地址复制到一个新的char*类型变量中，然后根据这个新的指针变量来进行修改操作\n          4:一串字符的结束标识是'\\0'ascii码为0，我们正常输入的字符的ascii码范围为32~127，我们常用这个作为验证字符串是否结束\n          5:没有'\\0'的字符串不能称为字符串，只能称作字符数组   \n          6:用char数组来申明字符串的时候，我们可以利用数组可以省阅长度的特点来申明变量   \n          7:c语言中对字符串进行排序是先比较长度，如果长度相同再将其转换为ascii码单个字符进行比较的，所以strmp就是这样实现的\n\nc语言中常用的字符串标准库函数:头文件string.h\n```c\ngets:可以获取到屏幕中的字符串，在遇到回车才会停止，遇到空格也会加载（scanf遇到空格会结束自动加上\\0）\nputs:往屏幕追加字符\nstrlen（求字符串长度）:size_t strlen ( const char * str );\nstrcat（将两个字符串叠加）:char * strcat ( char * dest, const char * src );\nstrcpy（将字符串完全复制到一个新的字符数组中）:char * strcpy ( char * dest, const char * src );\nstrcmp（比较两个字符串的大小）:int strcmp ( const char * str1, const char * str2 );\n```\n\n## 多文件编程\n注意:我们需要在头文件加上#ifndefCP_H #defineCP_H  #endif//CP_H  的作用是防止头文件冲突\n\n## 指针数组\n理解:指针数组的本质就是数组，只不过里面存储的是指针（字符数组名），当我们要传递指针数组时，形参和实参的类型应该为二级指针\n\n## 内存空间\n理解:1:我们说的内存空间不是我们说的内存条，而是虚拟内存（总的内存=系统内核空间+用户空间）的用户空间部分\n          2:我们开发中常用的两部分内存，栈空间和堆空间:栈空间:自上向下发展，先申请的为高位，后申请的为低位\n3:我们每运行一个程序都会开辟一个新的进程空间，每个进程空间现在可以理解为独立的\n特点:随用随开，用完即销；堆空间:自下向上发展:先申请的为低位，后申请的为高位，对于栈来说，无限大，但在实际开发中，受限于是否连续空间\nc语言中申请内存空间的函数:头文件  stdlib.h\n特点:申请的都是堆空间\n注意:每次申请都要记得释放\nmalloc:void * malloc(size_t _Size);\ncalloc:void *calloc(size_t nmemb, size_t size);:开辟nmemb个size大小的空间\nrealloc:void *realloc(void *ptr, size_t size); :根据原有空间来扩容，先直接在原有空间后面找，看是否有size大小的空间，如果有就直接创建，如果没有，会去其他地方找，找到后会将原空间的内容复制进去，并且返回新的地址    \nfree:void free(void *p);\n\n## 数组指针传递以及二级指针接收的流程概括\n![数组指针传递以及二级指针接收的流程概括](数组指针传递以及二级指针接收的流程概括.png)\n\n\n## 自实现c语言常用字符函数\n```c\n//1:myStrlen:\nvoid myStrLen( char*str1 )\n{\n\tint num = 0;\n\twhile (*str1++) /* 验证完了再加加如果符合才进 */\n\t{\n\t\tnum++;\n\t}\n\tprintf( \"%d\\n\", num );\n}\n//2:myStrCat:\nvoid myStrCat( char*str1, char*str2 )\n{\n/* 首先将首空间的地址储存 */\n\tchar*newStr = str1;\n/* 将首空间的地址移动到空间的最后 */\n\tfor (; *str1; str1++ );\n/* 将要追加的内容进行追加 */\n\tfor (; *str1 = *str2; str1++, str2++ );\n\tprintf( \"%s\", newStr );\n}\n//3:myStrCmp\nint myStrCmp( char*str1, intnum1, char*str2, intnum2 )\n{\n\tif(num1>num2)\n\t\treturn 1;\n\telse if(num1 < num2 )\n\t{\n\t\treturn(-1);\n\t}else {\n\t\twhile ( 1 )\n\t\t{\n\t\t\tif ( *str1 > *str2 )\n\t\t\t\treturn1;\n\t\t\telse if( *str1 == *str2 && *str1 == '\\0' && *str2 == '\\0' )\n\t\t\t    return0;\n\t\t\telse if( *str1 < *str2 )\n\t\t\t    return(-1);\n\t\t\tstr1++; str2++;\n\t\t}\n\t}\n}\n//4:myStrCopy:\nvoid myStrCpy( char*str1, char*str2 )\n{\n\tchar * newStr = str2;\n\tfor (;*str2 = *str1; str1++, str2++ );\n\tprintf( \"%s\\n\", newStr );\n}\n//5:对字 符 串 数组进行排序:\nvoid myStrSort( char**str1, intnum )\n{\n\tfor ( inti = 0; i < num; i++ )\n\t{\n\t\tfor ( intj = 0; j < num - i - 1; j++ )\n\t\t{\n\t\t\tif ( strcmp( *(str1 + j), *(str1 + j + 1) ) > 0 )\n\t\t\t{\n\t\t\t\tchar*temp = *(str1 + j);\n\t\t\t\t*(str1 + j)\t= *(str1 + j + 1);\n\t\t\t\t*(str1 + j + 1) = *(str1 + j);\n\t\t\t}\n\t\t}\n\t}\n\tfor ( inti = 0; i < num; i++ )\n\t\tprintf(\"%s\\n\", *(str1 + i));\n}\n\n```","source":"_posts/技术/2015-03-09-c语言10-字符串和命名空间.md","raw":"---\ntitle: c语言10-字符串和命名空间\ndate: 2015-03-20 00:04:29\ncategories: 技术\ntags: c语言\n---\n\n## c语言里面的字符串\n理解:1:因为c语言中没有字符串类型，所以只能用char类型的数组来代替，\n          2:在编译阶段，系统会将字符串编译加载到data空间的只读区域，以字符数组的方式存放，并且字符串就相当于是数组名（字符串元素的首地址）【常量不能修改】\n          3:注意:字符串的首地址是个常量，不能修改和移动的，因为如果修改了首地址的话，后面的其他元素也就找不到了，如果我们要修改的化，可以将首元素的地址复制到一个新的char*类型变量中，然后根据这个新的指针变量来进行修改操作\n          4:一串字符的结束标识是'\\0'ascii码为0，我们正常输入的字符的ascii码范围为32~127，我们常用这个作为验证字符串是否结束\n          5:没有'\\0'的字符串不能称为字符串，只能称作字符数组   \n          6:用char数组来申明字符串的时候，我们可以利用数组可以省阅长度的特点来申明变量   \n          7:c语言中对字符串进行排序是先比较长度，如果长度相同再将其转换为ascii码单个字符进行比较的，所以strmp就是这样实现的\n\nc语言中常用的字符串标准库函数:头文件string.h\n```c\ngets:可以获取到屏幕中的字符串，在遇到回车才会停止，遇到空格也会加载（scanf遇到空格会结束自动加上\\0）\nputs:往屏幕追加字符\nstrlen（求字符串长度）:size_t strlen ( const char * str );\nstrcat（将两个字符串叠加）:char * strcat ( char * dest, const char * src );\nstrcpy（将字符串完全复制到一个新的字符数组中）:char * strcpy ( char * dest, const char * src );\nstrcmp（比较两个字符串的大小）:int strcmp ( const char * str1, const char * str2 );\n```\n\n## 多文件编程\n注意:我们需要在头文件加上#ifndefCP_H #defineCP_H  #endif//CP_H  的作用是防止头文件冲突\n\n## 指针数组\n理解:指针数组的本质就是数组，只不过里面存储的是指针（字符数组名），当我们要传递指针数组时，形参和实参的类型应该为二级指针\n\n## 内存空间\n理解:1:我们说的内存空间不是我们说的内存条，而是虚拟内存（总的内存=系统内核空间+用户空间）的用户空间部分\n          2:我们开发中常用的两部分内存，栈空间和堆空间:栈空间:自上向下发展，先申请的为高位，后申请的为低位\n3:我们每运行一个程序都会开辟一个新的进程空间，每个进程空间现在可以理解为独立的\n特点:随用随开，用完即销；堆空间:自下向上发展:先申请的为低位，后申请的为高位，对于栈来说，无限大，但在实际开发中，受限于是否连续空间\nc语言中申请内存空间的函数:头文件  stdlib.h\n特点:申请的都是堆空间\n注意:每次申请都要记得释放\nmalloc:void * malloc(size_t _Size);\ncalloc:void *calloc(size_t nmemb, size_t size);:开辟nmemb个size大小的空间\nrealloc:void *realloc(void *ptr, size_t size); :根据原有空间来扩容，先直接在原有空间后面找，看是否有size大小的空间，如果有就直接创建，如果没有，会去其他地方找，找到后会将原空间的内容复制进去，并且返回新的地址    \nfree:void free(void *p);\n\n## 数组指针传递以及二级指针接收的流程概括\n![数组指针传递以及二级指针接收的流程概括](数组指针传递以及二级指针接收的流程概括.png)\n\n\n## 自实现c语言常用字符函数\n```c\n//1:myStrlen:\nvoid myStrLen( char*str1 )\n{\n\tint num = 0;\n\twhile (*str1++) /* 验证完了再加加如果符合才进 */\n\t{\n\t\tnum++;\n\t}\n\tprintf( \"%d\\n\", num );\n}\n//2:myStrCat:\nvoid myStrCat( char*str1, char*str2 )\n{\n/* 首先将首空间的地址储存 */\n\tchar*newStr = str1;\n/* 将首空间的地址移动到空间的最后 */\n\tfor (; *str1; str1++ );\n/* 将要追加的内容进行追加 */\n\tfor (; *str1 = *str2; str1++, str2++ );\n\tprintf( \"%s\", newStr );\n}\n//3:myStrCmp\nint myStrCmp( char*str1, intnum1, char*str2, intnum2 )\n{\n\tif(num1>num2)\n\t\treturn 1;\n\telse if(num1 < num2 )\n\t{\n\t\treturn(-1);\n\t}else {\n\t\twhile ( 1 )\n\t\t{\n\t\t\tif ( *str1 > *str2 )\n\t\t\t\treturn1;\n\t\t\telse if( *str1 == *str2 && *str1 == '\\0' && *str2 == '\\0' )\n\t\t\t    return0;\n\t\t\telse if( *str1 < *str2 )\n\t\t\t    return(-1);\n\t\t\tstr1++; str2++;\n\t\t}\n\t}\n}\n//4:myStrCopy:\nvoid myStrCpy( char*str1, char*str2 )\n{\n\tchar * newStr = str2;\n\tfor (;*str2 = *str1; str1++, str2++ );\n\tprintf( \"%s\\n\", newStr );\n}\n//5:对字 符 串 数组进行排序:\nvoid myStrSort( char**str1, intnum )\n{\n\tfor ( inti = 0; i < num; i++ )\n\t{\n\t\tfor ( intj = 0; j < num - i - 1; j++ )\n\t\t{\n\t\t\tif ( strcmp( *(str1 + j), *(str1 + j + 1) ) > 0 )\n\t\t\t{\n\t\t\t\tchar*temp = *(str1 + j);\n\t\t\t\t*(str1 + j)\t= *(str1 + j + 1);\n\t\t\t\t*(str1 + j + 1) = *(str1 + j);\n\t\t\t}\n\t\t}\n\t}\n\tfor ( inti = 0; i < num; i++ )\n\t\tprintf(\"%s\\n\", *(str1 + i));\n}\n\n```","slug":"技术/2015-03-09-c语言10-字符串和命名空间","published":1,"updated":"2018-03-12T03:15:32.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4d000c5oq837bxyirv","content":"<h2 id=\"c语言里面的字符串\"><a href=\"#c语言里面的字符串\" class=\"headerlink\" title=\"c语言里面的字符串\"></a>c语言里面的字符串</h2><p>理解:1:因为c语言中没有字符串类型，所以只能用char类型的数组来代替，<br>          2:在编译阶段，系统会将字符串编译加载到data空间的只读区域，以字符数组的方式存放，并且字符串就相当于是数组名（字符串元素的首地址）【常量不能修改】<br>          3:注意:字符串的首地址是个常量，不能修改和移动的，因为如果修改了首地址的话，后面的其他元素也就找不到了，如果我们要修改的化，可以将首元素的地址复制到一个新的char*类型变量中，然后根据这个新的指针变量来进行修改操作<br>          4:一串字符的结束标识是’\\0’ascii码为0，我们正常输入的字符的ascii码范围为32~127，我们常用这个作为验证字符串是否结束<br>          5:没有’\\0’的字符串不能称为字符串，只能称作字符数组<br>          6:用char数组来申明字符串的时候，我们可以利用数组可以省阅长度的特点来申明变量<br>          7:c语言中对字符串进行排序是先比较长度，如果长度相同再将其转换为ascii码单个字符进行比较的，所以strmp就是这样实现的</p>\n<p>c语言中常用的字符串标准库函数:头文件string.h<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gets:可以获取到屏幕中的字符串，在遇到回车才会停止，遇到空格也会加载（<span class=\"built_in\">scanf</span>遇到空格会结束自动加上\\<span class=\"number\">0</span>）</span><br><span class=\"line\"><span class=\"built_in\">puts</span>:往屏幕追加字符</span><br><span class=\"line\"><span class=\"built_in\">strlen</span>（求字符串长度）:<span class=\"keyword\">size_t</span> <span class=\"built_in\">strlen</span> ( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * str );</span><br><span class=\"line\"><span class=\"built_in\">strcat</span>（将两个字符串叠加）:<span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">strcat</span> <span class=\"params\">( <span class=\"keyword\">char</span> * dest, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src )</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>（将字符串完全复制到一个新的字符数组中）:<span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">strcpy</span> <span class=\"params\">( <span class=\"keyword\">char</span> * dest, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src )</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">strcmp</span>（比较两个字符串的大小）:<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">strcmp</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * str1, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * str2 )</span></span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多文件编程\"><a href=\"#多文件编程\" class=\"headerlink\" title=\"多文件编程\"></a>多文件编程</h2><p>注意:我们需要在头文件加上#ifndefCP_H #defineCP_H  #endif//CP_H  的作用是防止头文件冲突</p>\n<h2 id=\"指针数组\"><a href=\"#指针数组\" class=\"headerlink\" title=\"指针数组\"></a>指针数组</h2><p>理解:指针数组的本质就是数组，只不过里面存储的是指针（字符数组名），当我们要传递指针数组时，形参和实参的类型应该为二级指针</p>\n<h2 id=\"内存空间\"><a href=\"#内存空间\" class=\"headerlink\" title=\"内存空间\"></a>内存空间</h2><p>理解:1:我们说的内存空间不是我们说的内存条，而是虚拟内存（总的内存=系统内核空间+用户空间）的用户空间部分<br>          2:我们开发中常用的两部分内存，栈空间和堆空间:栈空间:自上向下发展，先申请的为高位，后申请的为低位<br>3:我们每运行一个程序都会开辟一个新的进程空间，每个进程空间现在可以理解为独立的<br>特点:随用随开，用完即销；堆空间:自下向上发展:先申请的为低位，后申请的为高位，对于栈来说，无限大，但在实际开发中，受限于是否连续空间<br>c语言中申请内存空间的函数:头文件  stdlib.h<br>特点:申请的都是堆空间<br>注意:每次申请都要记得释放<br>malloc:void <em> malloc(size_t _Size);<br>calloc:void </em>calloc(size_t nmemb, size_t size);:开辟nmemb个size大小的空间<br>realloc:void <em>realloc(void </em>ptr, size_t size); :根据原有空间来扩容，先直接在原有空间后面找，看是否有size大小的空间，如果有就直接创建，如果没有，会去其他地方找，找到后会将原空间的内容复制进去，并且返回新的地址<br>free:void free(void *p);</p>\n<h2 id=\"数组指针传递以及二级指针接收的流程概括\"><a href=\"#数组指针传递以及二级指针接收的流程概括\" class=\"headerlink\" title=\"数组指针传递以及二级指针接收的流程概括\"></a>数组指针传递以及二级指针接收的流程概括</h2><p><img src=\"/2015/03/20/技术/2015-03-09-c语言10-字符串和命名空间/数组指针传递以及二级指针接收的流程概括.png\" alt=\"数组指针传递以及二级指针接收的流程概括\"></p>\n<h2 id=\"自实现c语言常用字符函数\"><a href=\"#自实现c语言常用字符函数\" class=\"headerlink\" title=\"自实现c语言常用字符函数\"></a>自实现c语言常用字符函数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1:myStrlen:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrLen</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (*str1++) <span class=\"comment\">/* 验证完了再加加如果符合才进 */</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnum++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%d\\n\"</span>, num );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2:myStrCat:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrCat</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1, <span class=\"keyword\">char</span>*str2 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/* 首先将首空间的地址储存 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>*newStr = str1;</span><br><span class=\"line\"><span class=\"comment\">/* 将首空间的地址移动到空间的最后 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; *str1; str1++ );</span><br><span class=\"line\"><span class=\"comment\">/* 将要追加的内容进行追加 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; *str1 = *str2; str1++, str2++ );</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\"</span>, newStr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3:myStrCmp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">myStrCmp</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1, intnum1, <span class=\"keyword\">char</span>*str2, intnum2 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num1&gt;num2)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num1 &lt; num2 )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( *str1 &gt; *str2 )</span><br><span class=\"line\">\t\t\t\treturn1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( *str1 == *str2 &amp;&amp; *str1 == <span class=\"string\">'\\0'</span> &amp;&amp; *str2 == <span class=\"string\">'\\0'</span> )</span><br><span class=\"line\">\t\t\t    return0;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( *str1 &lt; *str2 )</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">return</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\tstr1++; str2++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//4:myStrCopy:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrCpy</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1, <span class=\"keyword\">char</span>*str2 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * newStr = str2;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;*str2 = *str1; str1++, str2++ );</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\\n\"</span>, newStr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//5:对字 符 串 数组进行排序:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrSort</span><span class=\"params\">( <span class=\"keyword\">char</span>**str1, intnum )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ( inti = <span class=\"number\">0</span>; i &lt; num; i++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ( intj = <span class=\"number\">0</span>; j &lt; num - i - <span class=\"number\">1</span>; j++ )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( <span class=\"built_in\">strcmp</span>( *(str1 + j), *(str1 + j + <span class=\"number\">1</span>) ) &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">char</span>*temp = *(str1 + j);</span><br><span class=\"line\">\t\t\t\t*(str1 + j)\t= *(str1 + j + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t*(str1 + j + <span class=\"number\">1</span>) = *(str1 + j);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ( inti = <span class=\"number\">0</span>; i &lt; num; i++ )</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, *(str1 + i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"c语言里面的字符串\"><a href=\"#c语言里面的字符串\" class=\"headerlink\" title=\"c语言里面的字符串\"></a>c语言里面的字符串</h2><p>理解:1:因为c语言中没有字符串类型，所以只能用char类型的数组来代替，<br>          2:在编译阶段，系统会将字符串编译加载到data空间的只读区域，以字符数组的方式存放，并且字符串就相当于是数组名（字符串元素的首地址）【常量不能修改】<br>          3:注意:字符串的首地址是个常量，不能修改和移动的，因为如果修改了首地址的话，后面的其他元素也就找不到了，如果我们要修改的化，可以将首元素的地址复制到一个新的char*类型变量中，然后根据这个新的指针变量来进行修改操作<br>          4:一串字符的结束标识是’\\0’ascii码为0，我们正常输入的字符的ascii码范围为32~127，我们常用这个作为验证字符串是否结束<br>          5:没有’\\0’的字符串不能称为字符串，只能称作字符数组<br>          6:用char数组来申明字符串的时候，我们可以利用数组可以省阅长度的特点来申明变量<br>          7:c语言中对字符串进行排序是先比较长度，如果长度相同再将其转换为ascii码单个字符进行比较的，所以strmp就是这样实现的</p>\n<p>c语言中常用的字符串标准库函数:头文件string.h<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gets:可以获取到屏幕中的字符串，在遇到回车才会停止，遇到空格也会加载（<span class=\"built_in\">scanf</span>遇到空格会结束自动加上\\<span class=\"number\">0</span>）</span><br><span class=\"line\"><span class=\"built_in\">puts</span>:往屏幕追加字符</span><br><span class=\"line\"><span class=\"built_in\">strlen</span>（求字符串长度）:<span class=\"keyword\">size_t</span> <span class=\"built_in\">strlen</span> ( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * str );</span><br><span class=\"line\"><span class=\"built_in\">strcat</span>（将两个字符串叠加）:<span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">strcat</span> <span class=\"params\">( <span class=\"keyword\">char</span> * dest, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src )</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>（将字符串完全复制到一个新的字符数组中）:<span class=\"function\"><span class=\"keyword\">char</span> * <span class=\"title\">strcpy</span> <span class=\"params\">( <span class=\"keyword\">char</span> * dest, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * src )</span></span>;</span><br><span class=\"line\"><span class=\"built_in\">strcmp</span>（比较两个字符串的大小）:<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">strcmp</span> <span class=\"params\">( <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * str1, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * str2 )</span></span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"多文件编程\"><a href=\"#多文件编程\" class=\"headerlink\" title=\"多文件编程\"></a>多文件编程</h2><p>注意:我们需要在头文件加上#ifndefCP_H #defineCP_H  #endif//CP_H  的作用是防止头文件冲突</p>\n<h2 id=\"指针数组\"><a href=\"#指针数组\" class=\"headerlink\" title=\"指针数组\"></a>指针数组</h2><p>理解:指针数组的本质就是数组，只不过里面存储的是指针（字符数组名），当我们要传递指针数组时，形参和实参的类型应该为二级指针</p>\n<h2 id=\"内存空间\"><a href=\"#内存空间\" class=\"headerlink\" title=\"内存空间\"></a>内存空间</h2><p>理解:1:我们说的内存空间不是我们说的内存条，而是虚拟内存（总的内存=系统内核空间+用户空间）的用户空间部分<br>          2:我们开发中常用的两部分内存，栈空间和堆空间:栈空间:自上向下发展，先申请的为高位，后申请的为低位<br>3:我们每运行一个程序都会开辟一个新的进程空间，每个进程空间现在可以理解为独立的<br>特点:随用随开，用完即销；堆空间:自下向上发展:先申请的为低位，后申请的为高位，对于栈来说，无限大，但在实际开发中，受限于是否连续空间<br>c语言中申请内存空间的函数:头文件  stdlib.h<br>特点:申请的都是堆空间<br>注意:每次申请都要记得释放<br>malloc:void <em> malloc(size_t _Size);<br>calloc:void </em>calloc(size_t nmemb, size_t size);:开辟nmemb个size大小的空间<br>realloc:void <em>realloc(void </em>ptr, size_t size); :根据原有空间来扩容，先直接在原有空间后面找，看是否有size大小的空间，如果有就直接创建，如果没有，会去其他地方找，找到后会将原空间的内容复制进去，并且返回新的地址<br>free:void free(void *p);</p>\n<h2 id=\"数组指针传递以及二级指针接收的流程概括\"><a href=\"#数组指针传递以及二级指针接收的流程概括\" class=\"headerlink\" title=\"数组指针传递以及二级指针接收的流程概括\"></a>数组指针传递以及二级指针接收的流程概括</h2><p><img src=\"/2015/03/20/技术/2015-03-09-c语言10-字符串和命名空间/数组指针传递以及二级指针接收的流程概括.png\" alt=\"数组指针传递以及二级指针接收的流程概括\"></p>\n<h2 id=\"自实现c语言常用字符函数\"><a href=\"#自实现c语言常用字符函数\" class=\"headerlink\" title=\"自实现c语言常用字符函数\"></a>自实现c语言常用字符函数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1:myStrlen:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrLen</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (*str1++) <span class=\"comment\">/* 验证完了再加加如果符合才进 */</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnum++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%d\\n\"</span>, num );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2:myStrCat:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrCat</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1, <span class=\"keyword\">char</span>*str2 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/* 首先将首空间的地址储存 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>*newStr = str1;</span><br><span class=\"line\"><span class=\"comment\">/* 将首空间的地址移动到空间的最后 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; *str1; str1++ );</span><br><span class=\"line\"><span class=\"comment\">/* 将要追加的内容进行追加 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; *str1 = *str2; str1++, str2++ );</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\"</span>, newStr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3:myStrCmp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">myStrCmp</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1, intnum1, <span class=\"keyword\">char</span>*str2, intnum2 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num1&gt;num2)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num1 &lt; num2 )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( *str1 &gt; *str2 )</span><br><span class=\"line\">\t\t\t\treturn1;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( *str1 == *str2 &amp;&amp; *str1 == <span class=\"string\">'\\0'</span> &amp;&amp; *str2 == <span class=\"string\">'\\0'</span> )</span><br><span class=\"line\">\t\t\t    return0;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( *str1 &lt; *str2 )</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">return</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\tstr1++; str2++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//4:myStrCopy:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrCpy</span><span class=\"params\">( <span class=\"keyword\">char</span>*str1, <span class=\"keyword\">char</span>*str2 )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * newStr = str2;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;*str2 = *str1; str1++, str2++ );</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>( <span class=\"string\">\"%s\\n\"</span>, newStr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//5:对字 符 串 数组进行排序:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myStrSort</span><span class=\"params\">( <span class=\"keyword\">char</span>**str1, intnum )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ( inti = <span class=\"number\">0</span>; i &lt; num; i++ )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ( intj = <span class=\"number\">0</span>; j &lt; num - i - <span class=\"number\">1</span>; j++ )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( <span class=\"built_in\">strcmp</span>( *(str1 + j), *(str1 + j + <span class=\"number\">1</span>) ) &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">char</span>*temp = *(str1 + j);</span><br><span class=\"line\">\t\t\t\t*(str1 + j)\t= *(str1 + j + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t*(str1 + j + <span class=\"number\">1</span>) = *(str1 + j);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ( inti = <span class=\"number\">0</span>; i &lt; num; i++ )</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, *(str1 + i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"c语言13-链表","date":"2015-03-24T12:49:16.000Z","_content":"\n## 链表的总结\n1. 链表由多个结构组成，每个结构都必须要有一个指向一个和自身大小相同的指针\n2. 做链表类型的题目我们需要灵活的保存临时变量来保存指针位置\n3. 链表的指针交换的效率一般来讲总是比直接值交换的效率高\n\n头插法和尾插法:头插法的效率比尾插法效率高，因为尾插法的首先需要定位到最后 \n\n判断节点是否是最后一个节点:是判断head.next 是否为空 不是判断head\n\n## 链表的增删查改代码\n```c\n\n#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n#include <stdlib.h>\n\n\n\n\n\ntypedef struct node\n{\n        int data;\n        struct node * next;\n}Node;\n\n//创建链表\nNode * createHeadNode()\n{\n        Node * head = (Node*)malloc(sizeof(Node));\n        Node* cur = NULL;\n        head->next = NULL;\n        printf(\"请输入您要新增的数据！\\n\");\n        int data;\n        scanf(\"%d\", &data);\n        while (data)\n        {\n                cur = (Node*)malloc(sizeof(Node));\n                cur->data = data;\n                cur->next = head->next;//头插法，先为新申请的链表加上地址\n                head->next = cur;\n                scanf(\"%d\", &data);\n        }\n        return head;\n}\n\n//新增  尾插入   保存头结点不变\nNode * createTallNode()\n{\n        Node * head = (Node*)malloc(sizeof(Node));\n        Node * pro = NULL;\n        Node* cur = NULL;\n        head->next = NULL;\n        pro = head;\n        printf(\"请输入您要新增的数据！\\n\");\n        int data;\n        scanf(\"%d\", &data);\n        while (data)\n        {\n                cur = (Node*)malloc(sizeof(Node));\n                cur->data = data;\n                cur->next = NULL;\n                pro->next = cur;\n                pro = cur;\n                scanf(\"%d\", &data);\n        }\n        return head;\n}\n\n//查询  获取到链表的长度  不加头结点\nint getLen(Node * head)//传进来的是\n{\n        int i = 0;\n        head = head->next;\n        while (head)//直接接从第第一个开始遍历\n        {\n                i++;\n                head = head->next;\n        }\n        return i;\n}\n\n//查询  根据输入的数据返回查找到的指针\nNode * searchNode(Node * head, int data)\n{\n        head = head->next;\n        while (head)\n        {\n                if (head->data == data)\n                {\n                        break;\n                }\n                head = head->next;\n        }\n        return head;\n}\n\n//删除1 根据指针进行删除数据\nvoid delNode(Node * head, Node * delpointer)\n{\n\n        //    while(head->next!=findPointer)\n        //        head=head->next;\n        //    head->next=findPointer->next;\n        //    free(findPointer);\n        head = head->next;\n        while (head->next != delpointer)//一直遍历 获取到下一个节点是符合数据的指针\n        {\n                head = head->next;\n        }\n        head->next = delpointer->next;\n        free(delpointer);\n}\n\n//排序 选择排序  数据jiaohuan交换\nvoid xzSort(Node * head)\n{\n        int len = getLen(head);\n        head = head->next;\n        for (int i = 0; i < len - 1; i++)\n        {\n                Node * temp = head;\n                for (int j = 0; j<len; j++)\n                {\n                        //将链表的外层循环跟里面所有的元素比较\n                        if (temp->data>temp->next->data)\n                        {\n                                temp->data = temp->data^temp->next->data;\n                                temp->next->data = temp->data^temp->next->data;\n                                temp->data = temp->data^temp->next->data;\n                        }\n                        temp = temp->next;\n                }\n                head = head->next;\n        }\n}\n\n//排序 选择排序  地址交换\nvoid xzSort1(Node * head)\n{\n        int len = getLen(head);\n        head = head->next;\n        Node * oldTemp1 = head;\n        Node * oldTemp2 = head;\n        for (int i = 0; i < len - 1; i++)\n        {\n                Node * temp = head;\n                for (int j = 0; j<len; j++)\n                {\n                        Node * temp2 = head;\n                        if (temp->data>temp2->data)\n                        {\n                                //如果满足条件的话  将两个节点的指针进行交换  首先我们需要获取到两个指针的前一个节点和后一个节点\n                                while (oldTemp1->next != temp)\n                                        oldTemp1 = oldTemp1->next;\n                                while (oldTemp2->next != temp2)\n                                        oldTemp2 = oldTemp2->next;\n\n                                Node * newTemp1 = temp->next;\n                                Node * newTemp2 = temp2->next;\n                                oldTemp1->next = temp2;\n                                temp2->next = newTemp1;\n                                oldTemp2->next = temp;\n                                temp->next = newTemp2;\n                        }\n                        temp2 = temp2->next;\n                }\n                temp = temp->next;\n        }\n}\n\n//排序  冒泡排序  数据交换\nvoid mpSort(Node * head)\n{\n        int len = getLen(head);\n        head = head->next;\n        for (int i = 0; i < len - 1; i++)\n        {\n                Node * temp = head;\n                for (int j = 0; j<len - i - 1; j++)\n                {\n                        //将链表的外层循环跟里面所有的元素比较\n                        if (temp->data>temp->next->data)\n                        {\n                                temp->data = temp->data^temp->next->data;\n                                temp->next->data = temp->data^temp->next->data;\n                                temp->data = temp->data^temp->next->data;\n                        }\n                        temp = temp->next;\n                }\n                head = head->next;\n        }\n}\n\n//排序  冒泡排序  地址交换\nvoid mpSort2(Node * head)\n{\n        Node *  sh = NULL;\n        Node * p = NULL;\n        Node * q = NULL;\n        Node *t = NULL;\n        int len = getLen(head) + 1;\n        //    head=head->next;//这里不能直接取下一个节点 因为我们获取到的长度就不包含头结点\n        for (int i = 0; i < len - 1; i++)\n        {\n                //初始化sh p q 因为冒泡排序都是从0开始排序的\n                sh = head;\n                p = sh->next;\n                q = p->next;\n                for (int j = 0; j<len - i - 1; j++)\n                {\n                        if (p->data > q->data)\n                        {\n                                sh->next = q->next;\n\n\n                        }\n\n                        sh = sh->next;\n                        p = p->next;\n                        q = q->next;\n                }\n        }\n}\n\n\n\n\n\n//遍历节点\nvoid listAll(Node * head)\n{\n        head = head->next;//头结点不保存数据\n        while (head)//没有多加\n        {\n                printf(\"%d\\n\", head->data);\n                head = head->next;\n        }\n}\n\n\nvoid myfree(Node * head)\n{\n        Node * temp=NULL;\n        while (head)//没有多加\n        {\n                temp = head->next;\n                free(head);\n                head = temp;\n        }\n\n}\n\n\nint main(void)\n{\n        printf(\"新增----------------\\n\");\n        Node * head = createTallNode();//返回的节点是头结点  不是头指针\n        //mpSort2(head);\n        listAll(head);\n        myfree(head);\n        system(\"pause\");\n        //    printf(\"删除----------------\\n\");\n        //    printf(\"请输入您要查找的数据！\\n\");\n        //    fflush(stdin);\n        //    int data;\n        //    scanf(\"%d\",&data);\n        //    Node  *  temp =   searchNode(head,data);\n        //    delNode(head,temp);//返回的节点是头结点  不是头指针\n        //    listAll(head);\n        return 0;\n}\n```","source":"_posts/技术/2015-03-09-c语言13-链表.md","raw":"---\ntitle: c语言13-链表\ndate: 2015-03-24 20:49:16\ncategories: 技术\ntags: c语言\n---\n\n## 链表的总结\n1. 链表由多个结构组成，每个结构都必须要有一个指向一个和自身大小相同的指针\n2. 做链表类型的题目我们需要灵活的保存临时变量来保存指针位置\n3. 链表的指针交换的效率一般来讲总是比直接值交换的效率高\n\n头插法和尾插法:头插法的效率比尾插法效率高，因为尾插法的首先需要定位到最后 \n\n判断节点是否是最后一个节点:是判断head.next 是否为空 不是判断head\n\n## 链表的增删查改代码\n```c\n\n#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n#include <stdlib.h>\n\n\n\n\n\ntypedef struct node\n{\n        int data;\n        struct node * next;\n}Node;\n\n//创建链表\nNode * createHeadNode()\n{\n        Node * head = (Node*)malloc(sizeof(Node));\n        Node* cur = NULL;\n        head->next = NULL;\n        printf(\"请输入您要新增的数据！\\n\");\n        int data;\n        scanf(\"%d\", &data);\n        while (data)\n        {\n                cur = (Node*)malloc(sizeof(Node));\n                cur->data = data;\n                cur->next = head->next;//头插法，先为新申请的链表加上地址\n                head->next = cur;\n                scanf(\"%d\", &data);\n        }\n        return head;\n}\n\n//新增  尾插入   保存头结点不变\nNode * createTallNode()\n{\n        Node * head = (Node*)malloc(sizeof(Node));\n        Node * pro = NULL;\n        Node* cur = NULL;\n        head->next = NULL;\n        pro = head;\n        printf(\"请输入您要新增的数据！\\n\");\n        int data;\n        scanf(\"%d\", &data);\n        while (data)\n        {\n                cur = (Node*)malloc(sizeof(Node));\n                cur->data = data;\n                cur->next = NULL;\n                pro->next = cur;\n                pro = cur;\n                scanf(\"%d\", &data);\n        }\n        return head;\n}\n\n//查询  获取到链表的长度  不加头结点\nint getLen(Node * head)//传进来的是\n{\n        int i = 0;\n        head = head->next;\n        while (head)//直接接从第第一个开始遍历\n        {\n                i++;\n                head = head->next;\n        }\n        return i;\n}\n\n//查询  根据输入的数据返回查找到的指针\nNode * searchNode(Node * head, int data)\n{\n        head = head->next;\n        while (head)\n        {\n                if (head->data == data)\n                {\n                        break;\n                }\n                head = head->next;\n        }\n        return head;\n}\n\n//删除1 根据指针进行删除数据\nvoid delNode(Node * head, Node * delpointer)\n{\n\n        //    while(head->next!=findPointer)\n        //        head=head->next;\n        //    head->next=findPointer->next;\n        //    free(findPointer);\n        head = head->next;\n        while (head->next != delpointer)//一直遍历 获取到下一个节点是符合数据的指针\n        {\n                head = head->next;\n        }\n        head->next = delpointer->next;\n        free(delpointer);\n}\n\n//排序 选择排序  数据jiaohuan交换\nvoid xzSort(Node * head)\n{\n        int len = getLen(head);\n        head = head->next;\n        for (int i = 0; i < len - 1; i++)\n        {\n                Node * temp = head;\n                for (int j = 0; j<len; j++)\n                {\n                        //将链表的外层循环跟里面所有的元素比较\n                        if (temp->data>temp->next->data)\n                        {\n                                temp->data = temp->data^temp->next->data;\n                                temp->next->data = temp->data^temp->next->data;\n                                temp->data = temp->data^temp->next->data;\n                        }\n                        temp = temp->next;\n                }\n                head = head->next;\n        }\n}\n\n//排序 选择排序  地址交换\nvoid xzSort1(Node * head)\n{\n        int len = getLen(head);\n        head = head->next;\n        Node * oldTemp1 = head;\n        Node * oldTemp2 = head;\n        for (int i = 0; i < len - 1; i++)\n        {\n                Node * temp = head;\n                for (int j = 0; j<len; j++)\n                {\n                        Node * temp2 = head;\n                        if (temp->data>temp2->data)\n                        {\n                                //如果满足条件的话  将两个节点的指针进行交换  首先我们需要获取到两个指针的前一个节点和后一个节点\n                                while (oldTemp1->next != temp)\n                                        oldTemp1 = oldTemp1->next;\n                                while (oldTemp2->next != temp2)\n                                        oldTemp2 = oldTemp2->next;\n\n                                Node * newTemp1 = temp->next;\n                                Node * newTemp2 = temp2->next;\n                                oldTemp1->next = temp2;\n                                temp2->next = newTemp1;\n                                oldTemp2->next = temp;\n                                temp->next = newTemp2;\n                        }\n                        temp2 = temp2->next;\n                }\n                temp = temp->next;\n        }\n}\n\n//排序  冒泡排序  数据交换\nvoid mpSort(Node * head)\n{\n        int len = getLen(head);\n        head = head->next;\n        for (int i = 0; i < len - 1; i++)\n        {\n                Node * temp = head;\n                for (int j = 0; j<len - i - 1; j++)\n                {\n                        //将链表的外层循环跟里面所有的元素比较\n                        if (temp->data>temp->next->data)\n                        {\n                                temp->data = temp->data^temp->next->data;\n                                temp->next->data = temp->data^temp->next->data;\n                                temp->data = temp->data^temp->next->data;\n                        }\n                        temp = temp->next;\n                }\n                head = head->next;\n        }\n}\n\n//排序  冒泡排序  地址交换\nvoid mpSort2(Node * head)\n{\n        Node *  sh = NULL;\n        Node * p = NULL;\n        Node * q = NULL;\n        Node *t = NULL;\n        int len = getLen(head) + 1;\n        //    head=head->next;//这里不能直接取下一个节点 因为我们获取到的长度就不包含头结点\n        for (int i = 0; i < len - 1; i++)\n        {\n                //初始化sh p q 因为冒泡排序都是从0开始排序的\n                sh = head;\n                p = sh->next;\n                q = p->next;\n                for (int j = 0; j<len - i - 1; j++)\n                {\n                        if (p->data > q->data)\n                        {\n                                sh->next = q->next;\n\n\n                        }\n\n                        sh = sh->next;\n                        p = p->next;\n                        q = q->next;\n                }\n        }\n}\n\n\n\n\n\n//遍历节点\nvoid listAll(Node * head)\n{\n        head = head->next;//头结点不保存数据\n        while (head)//没有多加\n        {\n                printf(\"%d\\n\", head->data);\n                head = head->next;\n        }\n}\n\n\nvoid myfree(Node * head)\n{\n        Node * temp=NULL;\n        while (head)//没有多加\n        {\n                temp = head->next;\n                free(head);\n                head = temp;\n        }\n\n}\n\n\nint main(void)\n{\n        printf(\"新增----------------\\n\");\n        Node * head = createTallNode();//返回的节点是头结点  不是头指针\n        //mpSort2(head);\n        listAll(head);\n        myfree(head);\n        system(\"pause\");\n        //    printf(\"删除----------------\\n\");\n        //    printf(\"请输入您要查找的数据！\\n\");\n        //    fflush(stdin);\n        //    int data;\n        //    scanf(\"%d\",&data);\n        //    Node  *  temp =   searchNode(head,data);\n        //    delNode(head,temp);//返回的节点是头结点  不是头指针\n        //    listAll(head);\n        return 0;\n}\n```","slug":"技术/2015-03-09-c语言13-链表","published":1,"updated":"2018-03-12T06:28:19.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4g000d5oq8bl5mdowu","content":"<h2 id=\"链表的总结\"><a href=\"#链表的总结\" class=\"headerlink\" title=\"链表的总结\"></a>链表的总结</h2><ol>\n<li>链表由多个结构组成，每个结构都必须要有一个指向一个和自身大小相同的指针</li>\n<li>做链表类型的题目我们需要灵活的保存临时变量来保存指针位置</li>\n<li>链表的指针交换的效率一般来讲总是比直接值交换的效率高</li>\n</ol>\n<p>头插法和尾插法:头插法的效率比尾插法效率高，因为尾插法的首先需要定位到最后 </p>\n<p>判断节点是否是最后一个节点:是判断head.next 是否为空 不是判断head</p>\n<h2 id=\"链表的增删查改代码\"><a href=\"#链表的增删查改代码\" class=\"headerlink\" title=\"链表的增删查改代码\"></a>链表的增删查改代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> * <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;Node;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建链表</span></span><br><span class=\"line\"><span class=\"function\">Node * <span class=\"title\">createHeadNode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        Node * head = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br><span class=\"line\">        Node* cur = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入您要新增的数据！\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;data);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                cur = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br><span class=\"line\">                cur-&gt;data = data;</span><br><span class=\"line\">                cur-&gt;next = head-&gt;next;<span class=\"comment\">//头插法，先为新申请的链表加上地址</span></span><br><span class=\"line\">                head-&gt;next = cur;</span><br><span class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//新增  尾插入   保存头结点不变</span></span><br><span class=\"line\"><span class=\"function\">Node * <span class=\"title\">createTallNode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        Node * head = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br><span class=\"line\">        Node * pro = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        Node* cur = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        pro = head;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入您要新增的数据！\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;data);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                cur = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br><span class=\"line\">                cur-&gt;data = data;</span><br><span class=\"line\">                cur-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                pro-&gt;next = cur;</span><br><span class=\"line\">                pro = cur;</span><br><span class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询  获取到链表的长度  不加头结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getLen</span><span class=\"params\">(Node * head)</span><span class=\"comment\">//传进来的是</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head)<span class=\"comment\">//直接接从第第一个开始遍历</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询  根据输入的数据返回查找到的指针</span></span><br><span class=\"line\"><span class=\"function\">Node * <span class=\"title\">searchNode</span><span class=\"params\">(Node * head, <span class=\"keyword\">int</span> data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (head-&gt;data == data)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除1 根据指针进行删除数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(Node * head, Node * delpointer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//    while(head-&gt;next!=findPointer)</span></span><br><span class=\"line\">        <span class=\"comment\">//        head=head-&gt;next;</span></span><br><span class=\"line\">        <span class=\"comment\">//    head-&gt;next=findPointer-&gt;next;</span></span><br><span class=\"line\">        <span class=\"comment\">//    free(findPointer);</span></span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head-&gt;next != delpointer)<span class=\"comment\">//一直遍历 获取到下一个节点是符合数据的指针</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head-&gt;next = delpointer-&gt;next;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(delpointer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序 选择排序  数据jiaohuan交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">xzSort</span><span class=\"params\">(Node * head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = getLen(head);</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                Node * temp = head;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j&lt;len; j++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//将链表的外层循环跟里面所有的元素比较</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (temp-&gt;data&gt;temp-&gt;next-&gt;data)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                temp-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class=\"line\">                                temp-&gt;next-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class=\"line\">                                temp-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        temp = temp-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序 选择排序  地址交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">xzSort1</span><span class=\"params\">(Node * head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = getLen(head);</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        Node * oldTemp1 = head;</span><br><span class=\"line\">        Node * oldTemp2 = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                Node * temp = head;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j&lt;len; j++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        Node * temp2 = head;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (temp-&gt;data&gt;temp2-&gt;data)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                <span class=\"comment\">//如果满足条件的话  将两个节点的指针进行交换  首先我们需要获取到两个指针的前一个节点和后一个节点</span></span><br><span class=\"line\">                                <span class=\"keyword\">while</span> (oldTemp1-&gt;next != temp)</span><br><span class=\"line\">                                        oldTemp1 = oldTemp1-&gt;next;</span><br><span class=\"line\">                                <span class=\"keyword\">while</span> (oldTemp2-&gt;next != temp2)</span><br><span class=\"line\">                                        oldTemp2 = oldTemp2-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">                                Node * newTemp1 = temp-&gt;next;</span><br><span class=\"line\">                                Node * newTemp2 = temp2-&gt;next;</span><br><span class=\"line\">                                oldTemp1-&gt;next = temp2;</span><br><span class=\"line\">                                temp2-&gt;next = newTemp1;</span><br><span class=\"line\">                                oldTemp2-&gt;next = temp;</span><br><span class=\"line\">                                temp-&gt;next = newTemp2;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        temp2 = temp2-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                temp = temp-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序  冒泡排序  数据交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mpSort</span><span class=\"params\">(Node * head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = getLen(head);</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                Node * temp = head;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j&lt;len - i - <span class=\"number\">1</span>; j++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//将链表的外层循环跟里面所有的元素比较</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (temp-&gt;data&gt;temp-&gt;next-&gt;data)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                temp-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class=\"line\">                                temp-&gt;next-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class=\"line\">                                temp-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        temp = temp-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序  冒泡排序  地址交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mpSort2</span><span class=\"params\">(Node * head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        Node *  sh = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        Node * p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        Node * q = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        Node *t = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = getLen(head) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//    head=head-&gt;next;//这里不能直接取下一个节点 因为我们获取到的长度就不包含头结点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"comment\">//初始化sh p q 因为冒泡排序都是从0开始排序的</span></span><br><span class=\"line\">                sh = head;</span><br><span class=\"line\">                p = sh-&gt;next;</span><br><span class=\"line\">                q = p-&gt;next;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j&lt;len - i - <span class=\"number\">1</span>; j++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (p-&gt;data &gt; q-&gt;data)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                sh-&gt;next = q-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        sh = sh-&gt;next;</span><br><span class=\"line\">                        p = p-&gt;next;</span><br><span class=\"line\">                        q = q-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listAll</span><span class=\"params\">(Node * head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        head = head-&gt;next;<span class=\"comment\">//头结点不保存数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head)<span class=\"comment\">//没有多加</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, head-&gt;data);</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myfree</span><span class=\"params\">(Node * head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        Node * temp=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head)<span class=\"comment\">//没有多加</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                temp = head-&gt;next;</span><br><span class=\"line\">                <span class=\"built_in\">free</span>(head);</span><br><span class=\"line\">                head = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"新增----------------\\n\"</span>);</span><br><span class=\"line\">        Node * head = createTallNode();<span class=\"comment\">//返回的节点是头结点  不是头指针</span></span><br><span class=\"line\">        <span class=\"comment\">//mpSort2(head);</span></span><br><span class=\"line\">        listAll(head);</span><br><span class=\"line\">        myfree(head);</span><br><span class=\"line\">        system(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//    printf(\"删除----------------\\n\");</span></span><br><span class=\"line\">        <span class=\"comment\">//    printf(\"请输入您要查找的数据！\\n\");</span></span><br><span class=\"line\">        <span class=\"comment\">//    fflush(stdin);</span></span><br><span class=\"line\">        <span class=\"comment\">//    int data;</span></span><br><span class=\"line\">        <span class=\"comment\">//    scanf(\"%d\",&amp;data);</span></span><br><span class=\"line\">        <span class=\"comment\">//    Node  *  temp =   searchNode(head,data);</span></span><br><span class=\"line\">        <span class=\"comment\">//    delNode(head,temp);//返回的节点是头结点  不是头指针</span></span><br><span class=\"line\">        <span class=\"comment\">//    listAll(head);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"链表的总结\"><a href=\"#链表的总结\" class=\"headerlink\" title=\"链表的总结\"></a>链表的总结</h2><ol>\n<li>链表由多个结构组成，每个结构都必须要有一个指向一个和自身大小相同的指针</li>\n<li>做链表类型的题目我们需要灵活的保存临时变量来保存指针位置</li>\n<li>链表的指针交换的效率一般来讲总是比直接值交换的效率高</li>\n</ol>\n<p>头插法和尾插法:头插法的效率比尾插法效率高，因为尾插法的首先需要定位到最后 </p>\n<p>判断节点是否是最后一个节点:是判断head.next 是否为空 不是判断head</p>\n<h2 id=\"链表的增删查改代码\"><a href=\"#链表的增删查改代码\" class=\"headerlink\" title=\"链表的增删查改代码\"></a>链表的增删查改代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> * <span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;Node;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建链表</span></span><br><span class=\"line\"><span class=\"function\">Node * <span class=\"title\">createHeadNode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        Node * head = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br><span class=\"line\">        Node* cur = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入您要新增的数据！\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;data);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                cur = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br><span class=\"line\">                cur-&gt;data = data;</span><br><span class=\"line\">                cur-&gt;next = head-&gt;next;<span class=\"comment\">//头插法，先为新申请的链表加上地址</span></span><br><span class=\"line\">                head-&gt;next = cur;</span><br><span class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//新增  尾插入   保存头结点不变</span></span><br><span class=\"line\"><span class=\"function\">Node * <span class=\"title\">createTallNode</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        Node * head = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br><span class=\"line\">        Node * pro = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        Node* cur = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        pro = head;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"请输入您要新增的数据！\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;data);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                cur = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br><span class=\"line\">                cur-&gt;data = data;</span><br><span class=\"line\">                cur-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                pro-&gt;next = cur;</span><br><span class=\"line\">                pro = cur;</span><br><span class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询  获取到链表的长度  不加头结点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getLen</span><span class=\"params\">(Node * head)</span><span class=\"comment\">//传进来的是</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head)<span class=\"comment\">//直接接从第第一个开始遍历</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询  根据输入的数据返回查找到的指针</span></span><br><span class=\"line\"><span class=\"function\">Node * <span class=\"title\">searchNode</span><span class=\"params\">(Node * head, <span class=\"keyword\">int</span> data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (head-&gt;data == data)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除1 根据指针进行删除数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(Node * head, Node * delpointer)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//    while(head-&gt;next!=findPointer)</span></span><br><span class=\"line\">        <span class=\"comment\">//        head=head-&gt;next;</span></span><br><span class=\"line\">        <span class=\"comment\">//    head-&gt;next=findPointer-&gt;next;</span></span><br><span class=\"line\">        <span class=\"comment\">//    free(findPointer);</span></span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head-&gt;next != delpointer)<span class=\"comment\">//一直遍历 获取到下一个节点是符合数据的指针</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head-&gt;next = delpointer-&gt;next;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(delpointer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序 选择排序  数据jiaohuan交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">xzSort</span><span class=\"params\">(Node * head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = getLen(head);</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                Node * temp = head;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j&lt;len; j++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//将链表的外层循环跟里面所有的元素比较</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (temp-&gt;data&gt;temp-&gt;next-&gt;data)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                temp-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class=\"line\">                                temp-&gt;next-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class=\"line\">                                temp-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        temp = temp-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序 选择排序  地址交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">xzSort1</span><span class=\"params\">(Node * head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = getLen(head);</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        Node * oldTemp1 = head;</span><br><span class=\"line\">        Node * oldTemp2 = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                Node * temp = head;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j&lt;len; j++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        Node * temp2 = head;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (temp-&gt;data&gt;temp2-&gt;data)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                <span class=\"comment\">//如果满足条件的话  将两个节点的指针进行交换  首先我们需要获取到两个指针的前一个节点和后一个节点</span></span><br><span class=\"line\">                                <span class=\"keyword\">while</span> (oldTemp1-&gt;next != temp)</span><br><span class=\"line\">                                        oldTemp1 = oldTemp1-&gt;next;</span><br><span class=\"line\">                                <span class=\"keyword\">while</span> (oldTemp2-&gt;next != temp2)</span><br><span class=\"line\">                                        oldTemp2 = oldTemp2-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">                                Node * newTemp1 = temp-&gt;next;</span><br><span class=\"line\">                                Node * newTemp2 = temp2-&gt;next;</span><br><span class=\"line\">                                oldTemp1-&gt;next = temp2;</span><br><span class=\"line\">                                temp2-&gt;next = newTemp1;</span><br><span class=\"line\">                                oldTemp2-&gt;next = temp;</span><br><span class=\"line\">                                temp-&gt;next = newTemp2;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        temp2 = temp2-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                temp = temp-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序  冒泡排序  数据交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mpSort</span><span class=\"params\">(Node * head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = getLen(head);</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                Node * temp = head;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j&lt;len - i - <span class=\"number\">1</span>; j++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//将链表的外层循环跟里面所有的元素比较</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (temp-&gt;data&gt;temp-&gt;next-&gt;data)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                temp-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class=\"line\">                                temp-&gt;next-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class=\"line\">                                temp-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        temp = temp-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//排序  冒泡排序  地址交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mpSort2</span><span class=\"params\">(Node * head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        Node *  sh = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        Node * p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        Node * q = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        Node *t = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = getLen(head) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//    head=head-&gt;next;//这里不能直接取下一个节点 因为我们获取到的长度就不包含头结点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"comment\">//初始化sh p q 因为冒泡排序都是从0开始排序的</span></span><br><span class=\"line\">                sh = head;</span><br><span class=\"line\">                p = sh-&gt;next;</span><br><span class=\"line\">                q = p-&gt;next;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j&lt;len - i - <span class=\"number\">1</span>; j++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (p-&gt;data &gt; q-&gt;data)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                sh-&gt;next = q-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        sh = sh-&gt;next;</span><br><span class=\"line\">                        p = p-&gt;next;</span><br><span class=\"line\">                        q = q-&gt;next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listAll</span><span class=\"params\">(Node * head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        head = head-&gt;next;<span class=\"comment\">//头结点不保存数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head)<span class=\"comment\">//没有多加</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, head-&gt;data);</span><br><span class=\"line\">                head = head-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myfree</span><span class=\"params\">(Node * head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        Node * temp=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head)<span class=\"comment\">//没有多加</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                temp = head-&gt;next;</span><br><span class=\"line\">                <span class=\"built_in\">free</span>(head);</span><br><span class=\"line\">                head = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"新增----------------\\n\"</span>);</span><br><span class=\"line\">        Node * head = createTallNode();<span class=\"comment\">//返回的节点是头结点  不是头指针</span></span><br><span class=\"line\">        <span class=\"comment\">//mpSort2(head);</span></span><br><span class=\"line\">        listAll(head);</span><br><span class=\"line\">        myfree(head);</span><br><span class=\"line\">        system(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//    printf(\"删除----------------\\n\");</span></span><br><span class=\"line\">        <span class=\"comment\">//    printf(\"请输入您要查找的数据！\\n\");</span></span><br><span class=\"line\">        <span class=\"comment\">//    fflush(stdin);</span></span><br><span class=\"line\">        <span class=\"comment\">//    int data;</span></span><br><span class=\"line\">        <span class=\"comment\">//    scanf(\"%d\",&amp;data);</span></span><br><span class=\"line\">        <span class=\"comment\">//    Node  *  temp =   searchNode(head,data);</span></span><br><span class=\"line\">        <span class=\"comment\">//    delNode(head,temp);//返回的节点是头结点  不是头指针</span></span><br><span class=\"line\">        <span class=\"comment\">//    listAll(head);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"c语言14-文件操作","date":"2015-03-25T03:34:12.000Z","_content":"\n## 文件操作\n### 文本文件操作\n储存在内存中的都是二进制文件（我们正常输入的数据都是以文本方式储存在内存中的）\n读取. 将内存中的二进制转化为ascii码，然后将ascii码转化为对应的字符显示\n写入. 首先将指定的字符转化为ascii码，然后将ascii码转化为2进制储存在内存中\n\n### 文件字符读取的置位\n都是先读取完再置位的\n\n### feof\nfeof是先判断标志位是否置位，如果没有置位则继续读，而字符的置位需要先读取才能置位，所以我们使用feof就需要先读取再判断\n\n### 二进制文件操作\n读取到的文件都是二进制，写入到内存的数据也是一二进制的方式存储在内存中，所以该效率最快\n\n### 出现乱码的原因\n由于编码和解码的格式不同，比如如果我们一开始的文本文件以ascii码的编码格式存入到内存中，然后我们再以解析二进制的格式来解析，就会造成乱码\n\n### 文件的操作流程\n硬盘->开辟一定大小内存的缓存区域->创建用来描述缓存区域的结构体->返回结构体指针（根据文件结构体体指针来对文件进行读写操作）\n\n### 文件三种读取方法代码例子\n```c\n#include <stdio.h>\n\n\nvoid myfgetc()\n{\n    //单字符\n    /*\n      1:先赋值再读取  因为文件的置位是先读才会置位的（表示已经读取完了），而feof是根据标志位是否置位的，所以我们需要先读才能用feof来判断是否读取完成\n   */\n    FILE * fp=fopen(\"1.txt\",\"r+\");\n    if(!fp)\n        return -1;\n    char buff;\n    //错误的读取方法  会造成多读一个的效果\n    //    while(!feof(fp))//fgetc和fgets都是返回\n    //    {\n    //    buff=fgetc(fp);\n    //        printf(\"%c\",buff);\n    //    }\n\n    //1. 第一种验证结束的方法\n    //    while((buff=fgetc(fp))&&!feof(fp))//fgetc和fgets都是返回\n    //    {\n    //        printf(\"%c\",buff);\n    //    }\n\n    //2:第二种验证结束的方法\n    //    while((buff=fgetc(fp))!=EOF)//fgetc和fgets都是返回\n    //    {\n    //        printf(\"%c\",buff);\n    //    }\n\n    fclose(fp);\n}\n\nvoid myfgets()\n{\n    FILE * fp=fopen(\"1.txt\",\"r+\");\n    if(!fp)\n        return -1;\n    char buff[1024];\n    while(fgets(buff,1024,fp)!=NULL) //判断结束条件是否为null  遇到'\\0'\n    {\n        printf(\"%s\",buff);\n    }\n    return 0;\n}\n\nvoid myfread()\n{\n    FILE * fp=fopen(\"1.txt\",\"r+\");\n    if(!fp)\n        return -1;\n    char buff[1024];\n    while(fread((void*)buff,1,1,fp)>0) //注意每次读取的字节数量必须是最小单元，不然如果某次读取的时候没有读满会返回0 也就说明会少打印\n    {\n        printf(\"%s\",buff);\n    }\n}\n\nint main(void)\n{\n\n    return 0;\n}\n\n```\n\n### 读取文件的判断\n1. 单字符. 读到文件尾时，返回EOF表示结束 ，也可以借用feof来验证\n2. 单行读. 遇到\\n结束一次读取  \n\n\n#### 文本文件的读取和写入方法  \n![fopen](fopen.jpg)\n\n![fclose](fclose.jpg)\n\n\nrewind: 每次我们写入的时候都会将文件指针移动到写入的最后，但是当我们需要读取文件内容的时候需要重头开始读，所以需要重置文件指针\n![rewind](rewind.jpg)\n\nfputc: 单个字符写入\n![fputc](fputc.jpg)\n\n\nfgetc: 单个字符读取，根据eof进行判断是否结束\n![fgetc](fgetc.jpg)\n\nfputs: 多个字符写入\n![fputs](fputs.jpg)\n\nfgets: 多个字符读取，至多读取n-1个字符，最后一个会是'\\0'\n![fgets](fgets.jpg)\n\nfeof: 是去读标志位判断文件是否结束的，每验证完一次标志位都会加加\n\n![fseek](fseek.jpg)\n\n![ftell](ftell.jpg)\n\n\n二进制文件的读取和写入: 因为二进制的文件的读取和写入是完全操控二进制的，所以不受影响读取文本文件的字符的影响，所以我们常用该种方法来操作结构体的数据读取和写入\n\n![freadAndfwrite](freadAndfwrite.jpg)\n\n\n### 文件操作总结\n1. 我们确定是否是最后的最后的节点的时候需要先获取到才能判断，所以我们需要先读，再判断，跟链表相反，链表是直接判断当前节点，而文件是先获取到数据再判断\n2. linux总是会给我们创建的文本文件默认在末尾加上\\n\n\n3. 切记每次操作完文件后，都要释放缓存\n\n4. 清除缓存的方法  fclose \\n  fflush(跨平台性不好)\n\n5. fgets和scanf的比较，fgets的安全性比scanf好  fgets的三个参数  stdin  stdout  stdeorr，fgets遇到'\\n'才结束，所以如果最后一行没有\\n的话会少读一行，并且gets至多只能读n-1个字符，因为最后一个空间要自动补\\0\n\n6. linux的换行字符是直接\\n windows是\\r\\n 存在平台差异性\n\n7. 二进制文件的读取操作对影响文本文件的读取操作的字符免疫（'\\0'，'\\n'，'\\r\\n'）\n\n8. 操作结构体的数据到文件中，我们用二进制操作会很灵活\n","source":"_posts/技术/2015-03-09-c语言14-文件操作.md","raw":"---\ntitle: c语言14-文件操作\ndate: 2015-03-25 11:34:12\ncategories: 技术\ntags: c语言\n---\n\n## 文件操作\n### 文本文件操作\n储存在内存中的都是二进制文件（我们正常输入的数据都是以文本方式储存在内存中的）\n读取. 将内存中的二进制转化为ascii码，然后将ascii码转化为对应的字符显示\n写入. 首先将指定的字符转化为ascii码，然后将ascii码转化为2进制储存在内存中\n\n### 文件字符读取的置位\n都是先读取完再置位的\n\n### feof\nfeof是先判断标志位是否置位，如果没有置位则继续读，而字符的置位需要先读取才能置位，所以我们使用feof就需要先读取再判断\n\n### 二进制文件操作\n读取到的文件都是二进制，写入到内存的数据也是一二进制的方式存储在内存中，所以该效率最快\n\n### 出现乱码的原因\n由于编码和解码的格式不同，比如如果我们一开始的文本文件以ascii码的编码格式存入到内存中，然后我们再以解析二进制的格式来解析，就会造成乱码\n\n### 文件的操作流程\n硬盘->开辟一定大小内存的缓存区域->创建用来描述缓存区域的结构体->返回结构体指针（根据文件结构体体指针来对文件进行读写操作）\n\n### 文件三种读取方法代码例子\n```c\n#include <stdio.h>\n\n\nvoid myfgetc()\n{\n    //单字符\n    /*\n      1:先赋值再读取  因为文件的置位是先读才会置位的（表示已经读取完了），而feof是根据标志位是否置位的，所以我们需要先读才能用feof来判断是否读取完成\n   */\n    FILE * fp=fopen(\"1.txt\",\"r+\");\n    if(!fp)\n        return -1;\n    char buff;\n    //错误的读取方法  会造成多读一个的效果\n    //    while(!feof(fp))//fgetc和fgets都是返回\n    //    {\n    //    buff=fgetc(fp);\n    //        printf(\"%c\",buff);\n    //    }\n\n    //1. 第一种验证结束的方法\n    //    while((buff=fgetc(fp))&&!feof(fp))//fgetc和fgets都是返回\n    //    {\n    //        printf(\"%c\",buff);\n    //    }\n\n    //2:第二种验证结束的方法\n    //    while((buff=fgetc(fp))!=EOF)//fgetc和fgets都是返回\n    //    {\n    //        printf(\"%c\",buff);\n    //    }\n\n    fclose(fp);\n}\n\nvoid myfgets()\n{\n    FILE * fp=fopen(\"1.txt\",\"r+\");\n    if(!fp)\n        return -1;\n    char buff[1024];\n    while(fgets(buff,1024,fp)!=NULL) //判断结束条件是否为null  遇到'\\0'\n    {\n        printf(\"%s\",buff);\n    }\n    return 0;\n}\n\nvoid myfread()\n{\n    FILE * fp=fopen(\"1.txt\",\"r+\");\n    if(!fp)\n        return -1;\n    char buff[1024];\n    while(fread((void*)buff,1,1,fp)>0) //注意每次读取的字节数量必须是最小单元，不然如果某次读取的时候没有读满会返回0 也就说明会少打印\n    {\n        printf(\"%s\",buff);\n    }\n}\n\nint main(void)\n{\n\n    return 0;\n}\n\n```\n\n### 读取文件的判断\n1. 单字符. 读到文件尾时，返回EOF表示结束 ，也可以借用feof来验证\n2. 单行读. 遇到\\n结束一次读取  \n\n\n#### 文本文件的读取和写入方法  \n![fopen](fopen.jpg)\n\n![fclose](fclose.jpg)\n\n\nrewind: 每次我们写入的时候都会将文件指针移动到写入的最后，但是当我们需要读取文件内容的时候需要重头开始读，所以需要重置文件指针\n![rewind](rewind.jpg)\n\nfputc: 单个字符写入\n![fputc](fputc.jpg)\n\n\nfgetc: 单个字符读取，根据eof进行判断是否结束\n![fgetc](fgetc.jpg)\n\nfputs: 多个字符写入\n![fputs](fputs.jpg)\n\nfgets: 多个字符读取，至多读取n-1个字符，最后一个会是'\\0'\n![fgets](fgets.jpg)\n\nfeof: 是去读标志位判断文件是否结束的，每验证完一次标志位都会加加\n\n![fseek](fseek.jpg)\n\n![ftell](ftell.jpg)\n\n\n二进制文件的读取和写入: 因为二进制的文件的读取和写入是完全操控二进制的，所以不受影响读取文本文件的字符的影响，所以我们常用该种方法来操作结构体的数据读取和写入\n\n![freadAndfwrite](freadAndfwrite.jpg)\n\n\n### 文件操作总结\n1. 我们确定是否是最后的最后的节点的时候需要先获取到才能判断，所以我们需要先读，再判断，跟链表相反，链表是直接判断当前节点，而文件是先获取到数据再判断\n2. linux总是会给我们创建的文本文件默认在末尾加上\\n\n\n3. 切记每次操作完文件后，都要释放缓存\n\n4. 清除缓存的方法  fclose \\n  fflush(跨平台性不好)\n\n5. fgets和scanf的比较，fgets的安全性比scanf好  fgets的三个参数  stdin  stdout  stdeorr，fgets遇到'\\n'才结束，所以如果最后一行没有\\n的话会少读一行，并且gets至多只能读n-1个字符，因为最后一个空间要自动补\\0\n\n6. linux的换行字符是直接\\n windows是\\r\\n 存在平台差异性\n\n7. 二进制文件的读取操作对影响文本文件的读取操作的字符免疫（'\\0'，'\\n'，'\\r\\n'）\n\n8. 操作结构体的数据到文件中，我们用二进制操作会很灵活\n","slug":"技术/2015-03-09-c语言14-文件操作","published":1,"updated":"2018-03-12T06:30:18.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4i000e5oq8t3nhdrp5","content":"<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><h3 id=\"文本文件操作\"><a href=\"#文本文件操作\" class=\"headerlink\" title=\"文本文件操作\"></a>文本文件操作</h3><p>储存在内存中的都是二进制文件（我们正常输入的数据都是以文本方式储存在内存中的）<br>读取. 将内存中的二进制转化为ascii码，然后将ascii码转化为对应的字符显示<br>写入. 首先将指定的字符转化为ascii码，然后将ascii码转化为2进制储存在内存中</p>\n<h3 id=\"文件字符读取的置位\"><a href=\"#文件字符读取的置位\" class=\"headerlink\" title=\"文件字符读取的置位\"></a>文件字符读取的置位</h3><p>都是先读取完再置位的</p>\n<h3 id=\"feof\"><a href=\"#feof\" class=\"headerlink\" title=\"feof\"></a>feof</h3><p>feof是先判断标志位是否置位，如果没有置位则继续读，而字符的置位需要先读取才能置位，所以我们使用feof就需要先读取再判断</p>\n<h3 id=\"二进制文件操作\"><a href=\"#二进制文件操作\" class=\"headerlink\" title=\"二进制文件操作\"></a>二进制文件操作</h3><p>读取到的文件都是二进制，写入到内存的数据也是一二进制的方式存储在内存中，所以该效率最快</p>\n<h3 id=\"出现乱码的原因\"><a href=\"#出现乱码的原因\" class=\"headerlink\" title=\"出现乱码的原因\"></a>出现乱码的原因</h3><p>由于编码和解码的格式不同，比如如果我们一开始的文本文件以ascii码的编码格式存入到内存中，然后我们再以解析二进制的格式来解析，就会造成乱码</p>\n<h3 id=\"文件的操作流程\"><a href=\"#文件的操作流程\" class=\"headerlink\" title=\"文件的操作流程\"></a>文件的操作流程</h3><p>硬盘-&gt;开辟一定大小内存的缓存区域-&gt;创建用来描述缓存区域的结构体-&gt;返回结构体指针（根据文件结构体体指针来对文件进行读写操作）</p>\n<h3 id=\"文件三种读取方法代码例子\"><a href=\"#文件三种读取方法代码例子\" class=\"headerlink\" title=\"文件三种读取方法代码例子\"></a>文件三种读取方法代码例子</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myfgetc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//单字符</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      1:先赋值再读取  因为文件的置位是先读才会置位的（表示已经读取完了），而feof是根据标志位是否置位的，所以我们需要先读才能用feof来判断是否读取完成</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">    FILE * fp=fopen(<span class=\"string\">\"1.txt\"</span>,<span class=\"string\">\"r+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fp)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buff;</span><br><span class=\"line\">    <span class=\"comment\">//错误的读取方法  会造成多读一个的效果</span></span><br><span class=\"line\">    <span class=\"comment\">//    while(!feof(fp))//fgetc和fgets都是返回</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//    buff=fgetc(fp);</span></span><br><span class=\"line\">    <span class=\"comment\">//        printf(\"%c\",buff);</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1. 第一种验证结束的方法</span></span><br><span class=\"line\">    <span class=\"comment\">//    while((buff=fgetc(fp))&amp;&amp;!feof(fp))//fgetc和fgets都是返回</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//        printf(\"%c\",buff);</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2:第二种验证结束的方法</span></span><br><span class=\"line\">    <span class=\"comment\">//    while((buff=fgetc(fp))!=EOF)//fgetc和fgets都是返回</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//        printf(\"%c\",buff);</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fclose(fp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myfgets</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE * fp=fopen(<span class=\"string\">\"1.txt\"</span>,<span class=\"string\">\"r+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fp)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buff[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fgets(buff,<span class=\"number\">1024</span>,fp)!=<span class=\"literal\">NULL</span>) <span class=\"comment\">//判断结束条件是否为null  遇到'\\0'</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,buff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myfread</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE * fp=fopen(<span class=\"string\">\"1.txt\"</span>,<span class=\"string\">\"r+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fp)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buff[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fread((<span class=\"keyword\">void</span>*)buff,<span class=\"number\">1</span>,<span class=\"number\">1</span>,fp)&gt;<span class=\"number\">0</span>) <span class=\"comment\">//注意每次读取的字节数量必须是最小单元，不然如果某次读取的时候没有读满会返回0 也就说明会少打印</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,buff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"读取文件的判断\"><a href=\"#读取文件的判断\" class=\"headerlink\" title=\"读取文件的判断\"></a>读取文件的判断</h3><ol>\n<li>单字符. 读到文件尾时，返回EOF表示结束 ，也可以借用feof来验证</li>\n<li>单行读. 遇到\\n结束一次读取  </li>\n</ol>\n<h4 id=\"文本文件的读取和写入方法\"><a href=\"#文本文件的读取和写入方法\" class=\"headerlink\" title=\"文本文件的读取和写入方法\"></a>文本文件的读取和写入方法</h4><p><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fopen.jpg\" alt=\"fopen\"></p>\n<p><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fclose.jpg\" alt=\"fclose\"></p>\n<p>rewind: 每次我们写入的时候都会将文件指针移动到写入的最后，但是当我们需要读取文件内容的时候需要重头开始读，所以需要重置文件指针<br><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/rewind.jpg\" alt=\"rewind\"></p>\n<p>fputc: 单个字符写入<br><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fputc.jpg\" alt=\"fputc\"></p>\n<p>fgetc: 单个字符读取，根据eof进行判断是否结束<br><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fgetc.jpg\" alt=\"fgetc\"></p>\n<p>fputs: 多个字符写入<br><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fputs.jpg\" alt=\"fputs\"></p>\n<p>fgets: 多个字符读取，至多读取n-1个字符，最后一个会是’\\0’<br><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fgets.jpg\" alt=\"fgets\"></p>\n<p>feof: 是去读标志位判断文件是否结束的，每验证完一次标志位都会加加</p>\n<p><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fseek.jpg\" alt=\"fseek\"></p>\n<p><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/ftell.jpg\" alt=\"ftell\"></p>\n<p>二进制文件的读取和写入: 因为二进制的文件的读取和写入是完全操控二进制的，所以不受影响读取文本文件的字符的影响，所以我们常用该种方法来操作结构体的数据读取和写入</p>\n<p><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/freadAndfwrite.jpg\" alt=\"freadAndfwrite\"></p>\n<h3 id=\"文件操作总结\"><a href=\"#文件操作总结\" class=\"headerlink\" title=\"文件操作总结\"></a>文件操作总结</h3><ol>\n<li>我们确定是否是最后的最后的节点的时候需要先获取到才能判断，所以我们需要先读，再判断，跟链表相反，链表是直接判断当前节点，而文件是先获取到数据再判断</li>\n<li><p>linux总是会给我们创建的文本文件默认在末尾加上\\n</p>\n</li>\n<li><p>切记每次操作完文件后，都要释放缓存</p>\n</li>\n<li><p>清除缓存的方法  fclose \\n  fflush(跨平台性不好)</p>\n</li>\n<li><p>fgets和scanf的比较，fgets的安全性比scanf好  fgets的三个参数  stdin  stdout  stdeorr，fgets遇到’\\n’才结束，所以如果最后一行没有\\n的话会少读一行，并且gets至多只能读n-1个字符，因为最后一个空间要自动补\\0</p>\n</li>\n<li><p>linux的换行字符是直接\\n windows是\\r\\n 存在平台差异性</p>\n</li>\n<li><p>二进制文件的读取操作对影响文本文件的读取操作的字符免疫（’\\0’，’\\n’，’\\r\\n’）</p>\n</li>\n<li><p>操作结构体的数据到文件中，我们用二进制操作会很灵活</p>\n</li>\n</ol>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><h3 id=\"文本文件操作\"><a href=\"#文本文件操作\" class=\"headerlink\" title=\"文本文件操作\"></a>文本文件操作</h3><p>储存在内存中的都是二进制文件（我们正常输入的数据都是以文本方式储存在内存中的）<br>读取. 将内存中的二进制转化为ascii码，然后将ascii码转化为对应的字符显示<br>写入. 首先将指定的字符转化为ascii码，然后将ascii码转化为2进制储存在内存中</p>\n<h3 id=\"文件字符读取的置位\"><a href=\"#文件字符读取的置位\" class=\"headerlink\" title=\"文件字符读取的置位\"></a>文件字符读取的置位</h3><p>都是先读取完再置位的</p>\n<h3 id=\"feof\"><a href=\"#feof\" class=\"headerlink\" title=\"feof\"></a>feof</h3><p>feof是先判断标志位是否置位，如果没有置位则继续读，而字符的置位需要先读取才能置位，所以我们使用feof就需要先读取再判断</p>\n<h3 id=\"二进制文件操作\"><a href=\"#二进制文件操作\" class=\"headerlink\" title=\"二进制文件操作\"></a>二进制文件操作</h3><p>读取到的文件都是二进制，写入到内存的数据也是一二进制的方式存储在内存中，所以该效率最快</p>\n<h3 id=\"出现乱码的原因\"><a href=\"#出现乱码的原因\" class=\"headerlink\" title=\"出现乱码的原因\"></a>出现乱码的原因</h3><p>由于编码和解码的格式不同，比如如果我们一开始的文本文件以ascii码的编码格式存入到内存中，然后我们再以解析二进制的格式来解析，就会造成乱码</p>\n<h3 id=\"文件的操作流程\"><a href=\"#文件的操作流程\" class=\"headerlink\" title=\"文件的操作流程\"></a>文件的操作流程</h3><p>硬盘-&gt;开辟一定大小内存的缓存区域-&gt;创建用来描述缓存区域的结构体-&gt;返回结构体指针（根据文件结构体体指针来对文件进行读写操作）</p>\n<h3 id=\"文件三种读取方法代码例子\"><a href=\"#文件三种读取方法代码例子\" class=\"headerlink\" title=\"文件三种读取方法代码例子\"></a>文件三种读取方法代码例子</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myfgetc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//单字符</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      1:先赋值再读取  因为文件的置位是先读才会置位的（表示已经读取完了），而feof是根据标志位是否置位的，所以我们需要先读才能用feof来判断是否读取完成</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">    FILE * fp=fopen(<span class=\"string\">\"1.txt\"</span>,<span class=\"string\">\"r+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fp)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buff;</span><br><span class=\"line\">    <span class=\"comment\">//错误的读取方法  会造成多读一个的效果</span></span><br><span class=\"line\">    <span class=\"comment\">//    while(!feof(fp))//fgetc和fgets都是返回</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//    buff=fgetc(fp);</span></span><br><span class=\"line\">    <span class=\"comment\">//        printf(\"%c\",buff);</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1. 第一种验证结束的方法</span></span><br><span class=\"line\">    <span class=\"comment\">//    while((buff=fgetc(fp))&amp;&amp;!feof(fp))//fgetc和fgets都是返回</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//        printf(\"%c\",buff);</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2:第二种验证结束的方法</span></span><br><span class=\"line\">    <span class=\"comment\">//    while((buff=fgetc(fp))!=EOF)//fgetc和fgets都是返回</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//        printf(\"%c\",buff);</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fclose(fp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myfgets</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE * fp=fopen(<span class=\"string\">\"1.txt\"</span>,<span class=\"string\">\"r+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fp)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buff[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fgets(buff,<span class=\"number\">1024</span>,fp)!=<span class=\"literal\">NULL</span>) <span class=\"comment\">//判断结束条件是否为null  遇到'\\0'</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,buff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myfread</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE * fp=fopen(<span class=\"string\">\"1.txt\"</span>,<span class=\"string\">\"r+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fp)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buff[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fread((<span class=\"keyword\">void</span>*)buff,<span class=\"number\">1</span>,<span class=\"number\">1</span>,fp)&gt;<span class=\"number\">0</span>) <span class=\"comment\">//注意每次读取的字节数量必须是最小单元，不然如果某次读取的时候没有读满会返回0 也就说明会少打印</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,buff);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"读取文件的判断\"><a href=\"#读取文件的判断\" class=\"headerlink\" title=\"读取文件的判断\"></a>读取文件的判断</h3><ol>\n<li>单字符. 读到文件尾时，返回EOF表示结束 ，也可以借用feof来验证</li>\n<li>单行读. 遇到\\n结束一次读取  </li>\n</ol>\n<h4 id=\"文本文件的读取和写入方法\"><a href=\"#文本文件的读取和写入方法\" class=\"headerlink\" title=\"文本文件的读取和写入方法\"></a>文本文件的读取和写入方法</h4><p><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fopen.jpg\" alt=\"fopen\"></p>\n<p><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fclose.jpg\" alt=\"fclose\"></p>\n<p>rewind: 每次我们写入的时候都会将文件指针移动到写入的最后，但是当我们需要读取文件内容的时候需要重头开始读，所以需要重置文件指针<br><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/rewind.jpg\" alt=\"rewind\"></p>\n<p>fputc: 单个字符写入<br><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fputc.jpg\" alt=\"fputc\"></p>\n<p>fgetc: 单个字符读取，根据eof进行判断是否结束<br><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fgetc.jpg\" alt=\"fgetc\"></p>\n<p>fputs: 多个字符写入<br><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fputs.jpg\" alt=\"fputs\"></p>\n<p>fgets: 多个字符读取，至多读取n-1个字符，最后一个会是’\\0’<br><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fgets.jpg\" alt=\"fgets\"></p>\n<p>feof: 是去读标志位判断文件是否结束的，每验证完一次标志位都会加加</p>\n<p><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/fseek.jpg\" alt=\"fseek\"></p>\n<p><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/ftell.jpg\" alt=\"ftell\"></p>\n<p>二进制文件的读取和写入: 因为二进制的文件的读取和写入是完全操控二进制的，所以不受影响读取文本文件的字符的影响，所以我们常用该种方法来操作结构体的数据读取和写入</p>\n<p><img src=\"/2015/03/25/技术/2015-03-09-c语言14-文件操作/freadAndfwrite.jpg\" alt=\"freadAndfwrite\"></p>\n<h3 id=\"文件操作总结\"><a href=\"#文件操作总结\" class=\"headerlink\" title=\"文件操作总结\"></a>文件操作总结</h3><ol>\n<li>我们确定是否是最后的最后的节点的时候需要先获取到才能判断，所以我们需要先读，再判断，跟链表相反，链表是直接判断当前节点，而文件是先获取到数据再判断</li>\n<li><p>linux总是会给我们创建的文本文件默认在末尾加上\\n</p>\n</li>\n<li><p>切记每次操作完文件后，都要释放缓存</p>\n</li>\n<li><p>清除缓存的方法  fclose \\n  fflush(跨平台性不好)</p>\n</li>\n<li><p>fgets和scanf的比较，fgets的安全性比scanf好  fgets的三个参数  stdin  stdout  stdeorr，fgets遇到’\\n’才结束，所以如果最后一行没有\\n的话会少读一行，并且gets至多只能读n-1个字符，因为最后一个空间要自动补\\0</p>\n</li>\n<li><p>linux的换行字符是直接\\n windows是\\r\\n 存在平台差异性</p>\n</li>\n<li><p>二进制文件的读取操作对影响文本文件的读取操作的字符免疫（’\\0’，’\\n’，’\\r\\n’）</p>\n</li>\n<li><p>操作结构体的数据到文件中，我们用二进制操作会很灵活</p>\n</li>\n</ol>\n"},{"title":"c语言15-位操作","date":"2015-03-26T03:34:12.000Z","_content":"\n## 位操作\n&（清零运算符）：结论：同1与数据不变，同0与清零\n|（置一运算符）：结论：跟0位或保持不变，与1位或置一\n^（异或运算符）：结论：对应位相同时清零，不同时置一\n\n### 掩码(mask)\n掩码是位操作很重要的一部分，我们可以根据掩码来操作二进制字符里的每一位\n掩码的功能：1：打开位（置一：flag|mask）；2：关闭位（清零：flag&(~mask)）；3：转置位（位转反：flag^=mask）;4：查看某一位的值\n\n### 移位\n左移：低位补零，高位溢出\n右移：对于有符号和无符号的正整数来说，高位补零，低位溢出；但是对于有符号的负数来说，取决于系统，补零的为“逻辑右移动”，补一的为“算术右移”\n\n### 二进制文件的加密和解密\n1. 特点: 不会溢出\n2. 步骤: 根据fread读取文件的每一个字符，然后对每位进行移位操作，然后fwrite写一个新的文件，解密也是如此\n代码事例:\n```c++\n#include <stdio.h>\n#include <string.h>\n\nvoid encrypt(char * ch1,int num)\n{\n    int i;\n    for(i=0;i<num;i++)\n    {\n         unsigned char ch=ch1[i];\n         ch=ch<<1|ch>>7;//char  八位\n         ch1[i]=ch;\n    }\n}\n\nvoid decode(char * ch1,int num)\n{\n    int i;\n    for(i=0;i<num;i++)\n    {\n         unsigned char ch=ch1[i];\n         ch=ch>>1|ch<<7;//char  八位\n         ch1[i]=ch;\n    }\n}\n\n//二进制加密文件\nint main(void)\n{\n    FILE * fpr=fopen(\"2.wmv\",\"rb+\");\n    if(NULL==fpr)\n        return -1;\n    FILE * fpw=fopen(\"3.wmv\",\"wb+\");\n    if(NULL==fpw)\n        return -1;\n\n    char buff[1024];\n    int num=0;//read 返回fread读取的数据的长度\n    while(num=fread((void*)buff,sizeof(char),1,fpr)>0)\n    {\n        decode(buff,num);\n        fwrite((void*)buff,num,1,fpw);\n    }\n    fclose(fpr);\n    fclose(fpw);\n    return 0;\n}\n```\n\n\n###总结\n关于位操作的问题都是需要先求出掩码，然后再根据情况将数据对掩码进行位逻辑运算符操作\n\n\n### 将十进制转化为二进制数的方法\n```c\nvoid binDis(intnum)\n{\ninti=32;\nwhile(i--)\n{\n    if(num&1<<i)\n    printf(\"1\");\nelse\n    printf(\"0\");\nif(i%8==0)\n{\n    printf(\"\");\n}\nputchar('\\n');}\n\n//例题：\n//循环移位\n\nvoid circulation(int*num,intn)\n{\n\n//验证是整数还是负数\n\nint m=n>0?n:-n;\n\nunsigned int mask=0;\nwhile(m--)\n{\n    mask|=(1<<m);\n    if(n>0)\n    {\n        //做这类题目可以先拿移动一位和10000001来做测试\n        *num=(*num<<n)|((*num>>(sizeof(*num)*8-n))&mask);\n    }\n    else\n    {\n        //首先右移根据掩码求出数据右移需要清零\n        *num=(*num>>(-n))&(~(mask<<sizeof(*num)*8-(-n)))|(*num<<sizeof(*num)*8-(-n));\n    }\n}\n\n//题目： 从键盘上输入 1 个正整数给 int 变量 num， 输出由 3～ 6 位构成的数（ 从\n低 0 号开始编号）\n基本思路：\n1.截取 3~6 位的数， 位移到 0~3 位\na)构建 3~6 位上为 1 其余为 0 的数\nb)位与输入数\nc)得到的结果右移 3 位\n2.先将 3~6 位移到 0~3 位， 截取 0~3 位\na)输入数右移 3 位\nb)构建 0~3 位为 1 其余为 0 的数\nc)位与， 得到结果\n1： \nint data=0xaa55;\n//求出掩码 \nint mask=1<<7|1<<6|1<<5|1<<4;\n//让掩码跟数据进行位操作，需要保证我们需要的数据不变\ndata & =mask; \n//将数据移动到最低位，得到结果\ndata>>=3;  \n2：\nint data=0xaa55;\n\ndata>>=3;\n\nint mask=0xf;  \n\ndata&=mask;\n```\n","source":"_posts/技术/2015-03-09-c语言15-位操作.md","raw":"---\ntitle: c语言15-位操作\ndate: 2015-03-26 11:34:12\ncategories: 技术\ntags: c语言\n---\n\n## 位操作\n&（清零运算符）：结论：同1与数据不变，同0与清零\n|（置一运算符）：结论：跟0位或保持不变，与1位或置一\n^（异或运算符）：结论：对应位相同时清零，不同时置一\n\n### 掩码(mask)\n掩码是位操作很重要的一部分，我们可以根据掩码来操作二进制字符里的每一位\n掩码的功能：1：打开位（置一：flag|mask）；2：关闭位（清零：flag&(~mask)）；3：转置位（位转反：flag^=mask）;4：查看某一位的值\n\n### 移位\n左移：低位补零，高位溢出\n右移：对于有符号和无符号的正整数来说，高位补零，低位溢出；但是对于有符号的负数来说，取决于系统，补零的为“逻辑右移动”，补一的为“算术右移”\n\n### 二进制文件的加密和解密\n1. 特点: 不会溢出\n2. 步骤: 根据fread读取文件的每一个字符，然后对每位进行移位操作，然后fwrite写一个新的文件，解密也是如此\n代码事例:\n```c++\n#include <stdio.h>\n#include <string.h>\n\nvoid encrypt(char * ch1,int num)\n{\n    int i;\n    for(i=0;i<num;i++)\n    {\n         unsigned char ch=ch1[i];\n         ch=ch<<1|ch>>7;//char  八位\n         ch1[i]=ch;\n    }\n}\n\nvoid decode(char * ch1,int num)\n{\n    int i;\n    for(i=0;i<num;i++)\n    {\n         unsigned char ch=ch1[i];\n         ch=ch>>1|ch<<7;//char  八位\n         ch1[i]=ch;\n    }\n}\n\n//二进制加密文件\nint main(void)\n{\n    FILE * fpr=fopen(\"2.wmv\",\"rb+\");\n    if(NULL==fpr)\n        return -1;\n    FILE * fpw=fopen(\"3.wmv\",\"wb+\");\n    if(NULL==fpw)\n        return -1;\n\n    char buff[1024];\n    int num=0;//read 返回fread读取的数据的长度\n    while(num=fread((void*)buff,sizeof(char),1,fpr)>0)\n    {\n        decode(buff,num);\n        fwrite((void*)buff,num,1,fpw);\n    }\n    fclose(fpr);\n    fclose(fpw);\n    return 0;\n}\n```\n\n\n###总结\n关于位操作的问题都是需要先求出掩码，然后再根据情况将数据对掩码进行位逻辑运算符操作\n\n\n### 将十进制转化为二进制数的方法\n```c\nvoid binDis(intnum)\n{\ninti=32;\nwhile(i--)\n{\n    if(num&1<<i)\n    printf(\"1\");\nelse\n    printf(\"0\");\nif(i%8==0)\n{\n    printf(\"\");\n}\nputchar('\\n');}\n\n//例题：\n//循环移位\n\nvoid circulation(int*num,intn)\n{\n\n//验证是整数还是负数\n\nint m=n>0?n:-n;\n\nunsigned int mask=0;\nwhile(m--)\n{\n    mask|=(1<<m);\n    if(n>0)\n    {\n        //做这类题目可以先拿移动一位和10000001来做测试\n        *num=(*num<<n)|((*num>>(sizeof(*num)*8-n))&mask);\n    }\n    else\n    {\n        //首先右移根据掩码求出数据右移需要清零\n        *num=(*num>>(-n))&(~(mask<<sizeof(*num)*8-(-n)))|(*num<<sizeof(*num)*8-(-n));\n    }\n}\n\n//题目： 从键盘上输入 1 个正整数给 int 变量 num， 输出由 3～ 6 位构成的数（ 从\n低 0 号开始编号）\n基本思路：\n1.截取 3~6 位的数， 位移到 0~3 位\na)构建 3~6 位上为 1 其余为 0 的数\nb)位与输入数\nc)得到的结果右移 3 位\n2.先将 3~6 位移到 0~3 位， 截取 0~3 位\na)输入数右移 3 位\nb)构建 0~3 位为 1 其余为 0 的数\nc)位与， 得到结果\n1： \nint data=0xaa55;\n//求出掩码 \nint mask=1<<7|1<<6|1<<5|1<<4;\n//让掩码跟数据进行位操作，需要保证我们需要的数据不变\ndata & =mask; \n//将数据移动到最低位，得到结果\ndata>>=3;  \n2：\nint data=0xaa55;\n\ndata>>=3;\n\nint mask=0xf;  \n\ndata&=mask;\n```\n","slug":"技术/2015-03-09-c语言15-位操作","published":1,"updated":"2018-03-12T06:30:29.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4l000i5oq8rfmazdgp","content":"<h2 id=\"位操作\"><a href=\"#位操作\" class=\"headerlink\" title=\"位操作\"></a>位操作</h2><p>&amp;（清零运算符）：结论：同1与数据不变，同0与清零<br>|（置一运算符）：结论：跟0位或保持不变，与1位或置一<br>^（异或运算符）：结论：对应位相同时清零，不同时置一</p>\n<h3 id=\"掩码-mask\"><a href=\"#掩码-mask\" class=\"headerlink\" title=\"掩码(mask)\"></a>掩码(mask)</h3><p>掩码是位操作很重要的一部分，我们可以根据掩码来操作二进制字符里的每一位<br>掩码的功能：1：打开位（置一：flag|mask）；2：关闭位（清零：flag&amp;(~mask)）；3：转置位（位转反：flag^=mask）;4：查看某一位的值</p>\n<h3 id=\"移位\"><a href=\"#移位\" class=\"headerlink\" title=\"移位\"></a>移位</h3><p>左移：低位补零，高位溢出<br>右移：对于有符号和无符号的正整数来说，高位补零，低位溢出；但是对于有符号的负数来说，取决于系统，补零的为“逻辑右移动”，补一的为“算术右移”</p>\n<h3 id=\"二进制文件的加密和解密\"><a href=\"#二进制文件的加密和解密\" class=\"headerlink\" title=\"二进制文件的加密和解密\"></a>二进制文件的加密和解密</h3><ol>\n<li>特点: 不会溢出</li>\n<li>步骤: 根据fread读取文件的每一个字符，然后对每位进行移位操作，然后fwrite写一个新的文件，解密也是如此<br>代码事例:<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encrypt</span><span class=\"params\">(<span class=\"keyword\">char</span> * ch1,<span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;num;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ch=ch1[i];</span><br><span class=\"line\">         ch=ch&lt;&lt;<span class=\"number\">1</span>|ch&gt;&gt;<span class=\"number\">7</span>;<span class=\"comment\">//char  八位</span></span><br><span class=\"line\">         ch1[i]=ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(<span class=\"keyword\">char</span> * ch1,<span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;num;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ch=ch1[i];</span><br><span class=\"line\">         ch=ch&gt;&gt;<span class=\"number\">1</span>|ch&lt;&lt;<span class=\"number\">7</span>;<span class=\"comment\">//char  八位</span></span><br><span class=\"line\">         ch1[i]=ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二进制加密文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE * fpr=fopen(<span class=\"string\">\"2.wmv\"</span>,<span class=\"string\">\"rb+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span>==fpr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    FILE * fpw=fopen(<span class=\"string\">\"3.wmv\"</span>,<span class=\"string\">\"wb+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span>==fpw)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buff[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">0</span>;<span class=\"comment\">//read 返回fread读取的数据的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(num=fread((<span class=\"keyword\">void</span>*)buff,<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>),<span class=\"number\">1</span>,fpr)&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        decode(buff,num);</span><br><span class=\"line\">        fwrite((<span class=\"keyword\">void</span>*)buff,num,<span class=\"number\">1</span>,fpw);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fclose(fpr);</span><br><span class=\"line\">    fclose(fpw);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>###总结<br>关于位操作的问题都是需要先求出掩码，然后再根据情况将数据对掩码进行位逻辑运算符操作</p>\n<h3 id=\"将十进制转化为二进制数的方法\"><a href=\"#将十进制转化为二进制数的方法\" class=\"headerlink\" title=\"将十进制转化为二进制数的方法\"></a>将十进制转化为二进制数的方法</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">binDis</span><span class=\"params\">(intnum)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">inti=<span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i--)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num&amp;<span class=\"number\">1</span>&lt;&lt;i)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(i%<span class=\"number\">8</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例题：</span></span><br><span class=\"line\"><span class=\"comment\">//循环移位</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">circulation</span><span class=\"params\">(<span class=\"keyword\">int</span>*num,intn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//验证是整数还是负数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> m=n&gt;<span class=\"number\">0</span>?n:-n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> mask=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(m--)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    mask|=(<span class=\"number\">1</span>&lt;&lt;m);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//做这类题目可以先拿移动一位和10000001来做测试</span></span><br><span class=\"line\">        *num=(*num&lt;&lt;n)|((*num&gt;&gt;(<span class=\"keyword\">sizeof</span>(*num)*<span class=\"number\">8</span>-n))&amp;mask);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//首先右移根据掩码求出数据右移需要清零</span></span><br><span class=\"line\">        *num=(*num&gt;&gt;(-n))&amp;(~(mask&lt;&lt;<span class=\"keyword\">sizeof</span>(*num)*<span class=\"number\">8</span>-(-n)))|(*num&lt;&lt;<span class=\"keyword\">sizeof</span>(*num)*<span class=\"number\">8</span>-(-n));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//题目： 从键盘上输入 1 个正整数给 int 变量 num， 输出由 3～ 6 位构成的数（ 从</span></span><br><span class=\"line\">低 <span class=\"number\">0</span> 号开始编号）</span><br><span class=\"line\">基本思路：</span><br><span class=\"line\"><span class=\"number\">1.</span>截取 <span class=\"number\">3</span>~<span class=\"number\">6</span> 位的数， 位移到 <span class=\"number\">0</span>~<span class=\"number\">3</span> 位</span><br><span class=\"line\">a)构建 <span class=\"number\">3</span>~<span class=\"number\">6</span> 位上为 <span class=\"number\">1</span> 其余为 <span class=\"number\">0</span> 的数</span><br><span class=\"line\">b)位与输入数</span><br><span class=\"line\">c)得到的结果右移 <span class=\"number\">3</span> 位</span><br><span class=\"line\"><span class=\"number\">2.</span>先将 <span class=\"number\">3</span>~<span class=\"number\">6</span> 位移到 <span class=\"number\">0</span>~<span class=\"number\">3</span> 位， 截取 <span class=\"number\">0</span>~<span class=\"number\">3</span> 位</span><br><span class=\"line\">a)输入数右移 <span class=\"number\">3</span> 位</span><br><span class=\"line\">b)构建 <span class=\"number\">0</span>~<span class=\"number\">3</span> 位为 <span class=\"number\">1</span> 其余为 <span class=\"number\">0</span> 的数</span><br><span class=\"line\">c)位与， 得到结果</span><br><span class=\"line\"><span class=\"number\">1</span>： </span><br><span class=\"line\"><span class=\"keyword\">int</span> data=<span class=\"number\">0xaa55</span>;</span><br><span class=\"line\"><span class=\"comment\">//求出掩码 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> mask=<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">7</span>|<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">6</span>|<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">5</span>|<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"comment\">//让掩码跟数据进行位操作，需要保证我们需要的数据不变</span></span><br><span class=\"line\">data &amp; =mask; </span><br><span class=\"line\"><span class=\"comment\">//将数据移动到最低位，得到结果</span></span><br><span class=\"line\">data&gt;&gt;=<span class=\"number\">3</span>;  </span><br><span class=\"line\"><span class=\"number\">2</span>：</span><br><span class=\"line\"><span class=\"keyword\">int</span> data=<span class=\"number\">0xaa55</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">data&gt;&gt;=<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> mask=<span class=\"number\">0xf</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">data&amp;=mask;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"位操作\"><a href=\"#位操作\" class=\"headerlink\" title=\"位操作\"></a>位操作</h2><p>&amp;（清零运算符）：结论：同1与数据不变，同0与清零<br>|（置一运算符）：结论：跟0位或保持不变，与1位或置一<br>^（异或运算符）：结论：对应位相同时清零，不同时置一</p>\n<h3 id=\"掩码-mask\"><a href=\"#掩码-mask\" class=\"headerlink\" title=\"掩码(mask)\"></a>掩码(mask)</h3><p>掩码是位操作很重要的一部分，我们可以根据掩码来操作二进制字符里的每一位<br>掩码的功能：1：打开位（置一：flag|mask）；2：关闭位（清零：flag&amp;(~mask)）；3：转置位（位转反：flag^=mask）;4：查看某一位的值</p>\n<h3 id=\"移位\"><a href=\"#移位\" class=\"headerlink\" title=\"移位\"></a>移位</h3><p>左移：低位补零，高位溢出<br>右移：对于有符号和无符号的正整数来说，高位补零，低位溢出；但是对于有符号的负数来说，取决于系统，补零的为“逻辑右移动”，补一的为“算术右移”</p>\n<h3 id=\"二进制文件的加密和解密\"><a href=\"#二进制文件的加密和解密\" class=\"headerlink\" title=\"二进制文件的加密和解密\"></a>二进制文件的加密和解密</h3><ol>\n<li>特点: 不会溢出</li>\n<li>步骤: 根据fread读取文件的每一个字符，然后对每位进行移位操作，然后fwrite写一个新的文件，解密也是如此<br>代码事例:<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encrypt</span><span class=\"params\">(<span class=\"keyword\">char</span> * ch1,<span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;num;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ch=ch1[i];</span><br><span class=\"line\">         ch=ch&lt;&lt;<span class=\"number\">1</span>|ch&gt;&gt;<span class=\"number\">7</span>;<span class=\"comment\">//char  八位</span></span><br><span class=\"line\">         ch1[i]=ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(<span class=\"keyword\">char</span> * ch1,<span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;num;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">         <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> ch=ch1[i];</span><br><span class=\"line\">         ch=ch&gt;&gt;<span class=\"number\">1</span>|ch&lt;&lt;<span class=\"number\">7</span>;<span class=\"comment\">//char  八位</span></span><br><span class=\"line\">         ch1[i]=ch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二进制加密文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE * fpr=fopen(<span class=\"string\">\"2.wmv\"</span>,<span class=\"string\">\"rb+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span>==fpr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    FILE * fpw=fopen(<span class=\"string\">\"3.wmv\"</span>,<span class=\"string\">\"wb+\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span>==fpw)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buff[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">0</span>;<span class=\"comment\">//read 返回fread读取的数据的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(num=fread((<span class=\"keyword\">void</span>*)buff,<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>),<span class=\"number\">1</span>,fpr)&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        decode(buff,num);</span><br><span class=\"line\">        fwrite((<span class=\"keyword\">void</span>*)buff,num,<span class=\"number\">1</span>,fpw);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fclose(fpr);</span><br><span class=\"line\">    fclose(fpw);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>###总结<br>关于位操作的问题都是需要先求出掩码，然后再根据情况将数据对掩码进行位逻辑运算符操作</p>\n<h3 id=\"将十进制转化为二进制数的方法\"><a href=\"#将十进制转化为二进制数的方法\" class=\"headerlink\" title=\"将十进制转化为二进制数的方法\"></a>将十进制转化为二进制数的方法</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">binDis</span><span class=\"params\">(intnum)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">inti=<span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i--)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num&amp;<span class=\"number\">1</span>&lt;&lt;i)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(i%<span class=\"number\">8</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例题：</span></span><br><span class=\"line\"><span class=\"comment\">//循环移位</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">circulation</span><span class=\"params\">(<span class=\"keyword\">int</span>*num,intn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//验证是整数还是负数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> m=n&gt;<span class=\"number\">0</span>?n:-n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> mask=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(m--)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    mask|=(<span class=\"number\">1</span>&lt;&lt;m);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//做这类题目可以先拿移动一位和10000001来做测试</span></span><br><span class=\"line\">        *num=(*num&lt;&lt;n)|((*num&gt;&gt;(<span class=\"keyword\">sizeof</span>(*num)*<span class=\"number\">8</span>-n))&amp;mask);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//首先右移根据掩码求出数据右移需要清零</span></span><br><span class=\"line\">        *num=(*num&gt;&gt;(-n))&amp;(~(mask&lt;&lt;<span class=\"keyword\">sizeof</span>(*num)*<span class=\"number\">8</span>-(-n)))|(*num&lt;&lt;<span class=\"keyword\">sizeof</span>(*num)*<span class=\"number\">8</span>-(-n));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//题目： 从键盘上输入 1 个正整数给 int 变量 num， 输出由 3～ 6 位构成的数（ 从</span></span><br><span class=\"line\">低 <span class=\"number\">0</span> 号开始编号）</span><br><span class=\"line\">基本思路：</span><br><span class=\"line\"><span class=\"number\">1.</span>截取 <span class=\"number\">3</span>~<span class=\"number\">6</span> 位的数， 位移到 <span class=\"number\">0</span>~<span class=\"number\">3</span> 位</span><br><span class=\"line\">a)构建 <span class=\"number\">3</span>~<span class=\"number\">6</span> 位上为 <span class=\"number\">1</span> 其余为 <span class=\"number\">0</span> 的数</span><br><span class=\"line\">b)位与输入数</span><br><span class=\"line\">c)得到的结果右移 <span class=\"number\">3</span> 位</span><br><span class=\"line\"><span class=\"number\">2.</span>先将 <span class=\"number\">3</span>~<span class=\"number\">6</span> 位移到 <span class=\"number\">0</span>~<span class=\"number\">3</span> 位， 截取 <span class=\"number\">0</span>~<span class=\"number\">3</span> 位</span><br><span class=\"line\">a)输入数右移 <span class=\"number\">3</span> 位</span><br><span class=\"line\">b)构建 <span class=\"number\">0</span>~<span class=\"number\">3</span> 位为 <span class=\"number\">1</span> 其余为 <span class=\"number\">0</span> 的数</span><br><span class=\"line\">c)位与， 得到结果</span><br><span class=\"line\"><span class=\"number\">1</span>： </span><br><span class=\"line\"><span class=\"keyword\">int</span> data=<span class=\"number\">0xaa55</span>;</span><br><span class=\"line\"><span class=\"comment\">//求出掩码 </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> mask=<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">7</span>|<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">6</span>|<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">5</span>|<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"comment\">//让掩码跟数据进行位操作，需要保证我们需要的数据不变</span></span><br><span class=\"line\">data &amp; =mask; </span><br><span class=\"line\"><span class=\"comment\">//将数据移动到最低位，得到结果</span></span><br><span class=\"line\">data&gt;&gt;=<span class=\"number\">3</span>;  </span><br><span class=\"line\"><span class=\"number\">2</span>：</span><br><span class=\"line\"><span class=\"keyword\">int</span> data=<span class=\"number\">0xaa55</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">data&gt;&gt;=<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> mask=<span class=\"number\">0xf</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\">data&amp;=mask;</span><br></pre></td></tr></table></figure>\n"},{"title":"c语言16-条件编译","date":"2015-03-30T03:34:12.000Z","_content":"\n\n### 编译过程\n预处理->预编译->汇编->链接\n\n### 宏(define)\n1. 宏的后面不用\"；\"符号，宏只是起的替换的作用，在预处理阶段完成（typedef是在链接的时候完成的）\n2. 我们常用比较短并且比较常用的的删除进行宏化，这样嵌入到代码中，减少调用的开销，但是代价就是编译出来的文件会非常大（因为文件中出现了比较多的重复的代码）\n3. \\#: 利用宏来创建字符串（可以达到将其他类型数据嵌入到字符串中）\n4. \\##: 预处理的粘合剂\n5. 预定义宏: 常用语打印日志\n__DATE__ 进行预处理的日期（“MMmm dd yyyy”形式的字符串文字）\n__FILE__ 代表当前源代码文件名的字符串文字\n__LINE__ 代表当前源代码中的行号的整数常量\n__TIME__ 源文件编译时间，格式“hh: mm: ss”\n__func__ 当前所在函数名\n在打印调试信息时打印这两\n个宏 __FILE__ __LINE__ 可以给开发者非常有用的提示 \n\n### 条件编译\n单路: #if #endif \n双路: #if #else #endif\n多路: #if #elif #elif #endif\n\n### 头文件包含\n1: 头文件的内容会被写入到包含该头文件的文件中\n2: <>（一般用于系统文件）: 系统路径下面找  whereis stdio.h    \n3: \"\"（一般用于自定义头文件）: 现在当前路径下找 ，找不到再去系统路径下找\n4: 头文件自包含: 免去多余的前向申明\n5: 避免头文件被重复包含: #ifndef __XX_H__ #define __XX_H__ //数据类型声明 //函数声明#endif （假设文件名为xx.h）\n6: c语言是以文件单位进行编译的，编译期只需要函数申明即可，所以我们在给别人接口时候，先给.h（函数的申明文件即可），到时再把.o文件给他进行链接即可","source":"_posts/技术/2015-03-09-c语言16-条件编译.md","raw":"---\ntitle: c语言16-条件编译\ndate: 2015-03-30 11:34:12\ncategories: 技术\ntags: c语言\n---\n\n\n### 编译过程\n预处理->预编译->汇编->链接\n\n### 宏(define)\n1. 宏的后面不用\"；\"符号，宏只是起的替换的作用，在预处理阶段完成（typedef是在链接的时候完成的）\n2. 我们常用比较短并且比较常用的的删除进行宏化，这样嵌入到代码中，减少调用的开销，但是代价就是编译出来的文件会非常大（因为文件中出现了比较多的重复的代码）\n3. \\#: 利用宏来创建字符串（可以达到将其他类型数据嵌入到字符串中）\n4. \\##: 预处理的粘合剂\n5. 预定义宏: 常用语打印日志\n__DATE__ 进行预处理的日期（“MMmm dd yyyy”形式的字符串文字）\n__FILE__ 代表当前源代码文件名的字符串文字\n__LINE__ 代表当前源代码中的行号的整数常量\n__TIME__ 源文件编译时间，格式“hh: mm: ss”\n__func__ 当前所在函数名\n在打印调试信息时打印这两\n个宏 __FILE__ __LINE__ 可以给开发者非常有用的提示 \n\n### 条件编译\n单路: #if #endif \n双路: #if #else #endif\n多路: #if #elif #elif #endif\n\n### 头文件包含\n1: 头文件的内容会被写入到包含该头文件的文件中\n2: <>（一般用于系统文件）: 系统路径下面找  whereis stdio.h    \n3: \"\"（一般用于自定义头文件）: 现在当前路径下找 ，找不到再去系统路径下找\n4: 头文件自包含: 免去多余的前向申明\n5: 避免头文件被重复包含: #ifndef __XX_H__ #define __XX_H__ //数据类型声明 //函数声明#endif （假设文件名为xx.h）\n6: c语言是以文件单位进行编译的，编译期只需要函数申明即可，所以我们在给别人接口时候，先给.h（函数的申明文件即可），到时再把.o文件给他进行链接即可","slug":"技术/2015-03-09-c语言16-条件编译","published":1,"updated":"2018-03-12T06:29:58.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4o000k5oq8mkzwva3t","content":"<h3 id=\"编译过程\"><a href=\"#编译过程\" class=\"headerlink\" title=\"编译过程\"></a>编译过程</h3><p>预处理-&gt;预编译-&gt;汇编-&gt;链接</p>\n<h3 id=\"宏-define\"><a href=\"#宏-define\" class=\"headerlink\" title=\"宏(define)\"></a>宏(define)</h3><ol>\n<li>宏的后面不用”；”符号，宏只是起的替换的作用，在预处理阶段完成（typedef是在链接的时候完成的）</li>\n<li>我们常用比较短并且比较常用的的删除进行宏化，这样嵌入到代码中，减少调用的开销，但是代价就是编译出来的文件会非常大（因为文件中出现了比较多的重复的代码）</li>\n<li>#: 利用宏来创建字符串（可以达到将其他类型数据嵌入到字符串中）</li>\n<li>##: 预处理的粘合剂</li>\n<li>预定义宏: 常用语打印日志<br><strong>DATE</strong> 进行预处理的日期（“MMmm dd yyyy”形式的字符串文字）<br><strong>FILE</strong> 代表当前源代码文件名的字符串文字<br><strong>LINE</strong> 代表当前源代码中的行号的整数常量<br><strong>TIME</strong> 源文件编译时间，格式“hh: mm: ss”<br><strong>func</strong> 当前所在函数名<br>在打印调试信息时打印这两<br>个宏 <strong>FILE</strong> <strong>LINE</strong> 可以给开发者非常有用的提示 </li>\n</ol>\n<h3 id=\"条件编译\"><a href=\"#条件编译\" class=\"headerlink\" title=\"条件编译\"></a>条件编译</h3><p>单路: #if #endif<br>双路: #if #else #endif<br>多路: #if #elif #elif #endif</p>\n<h3 id=\"头文件包含\"><a href=\"#头文件包含\" class=\"headerlink\" title=\"头文件包含\"></a>头文件包含</h3><p>1: 头文件的内容会被写入到包含该头文件的文件中<br>2: &lt;&gt;（一般用于系统文件）: 系统路径下面找  whereis stdio.h<br>3: “”（一般用于自定义头文件）: 现在当前路径下找 ，找不到再去系统路径下找<br>4: 头文件自包含: 免去多余的前向申明<br>5: 避免头文件被重复包含: #ifndef <strong>XX_H</strong> #define <strong>XX_H</strong> //数据类型声明 //函数声明#endif （假设文件名为xx.h）<br>6: c语言是以文件单位进行编译的，编译期只需要函数申明即可，所以我们在给别人接口时候，先给.h（函数的申明文件即可），到时再把.o文件给他进行链接即可</p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"编译过程\"><a href=\"#编译过程\" class=\"headerlink\" title=\"编译过程\"></a>编译过程</h3><p>预处理-&gt;预编译-&gt;汇编-&gt;链接</p>\n<h3 id=\"宏-define\"><a href=\"#宏-define\" class=\"headerlink\" title=\"宏(define)\"></a>宏(define)</h3><ol>\n<li>宏的后面不用”；”符号，宏只是起的替换的作用，在预处理阶段完成（typedef是在链接的时候完成的）</li>\n<li>我们常用比较短并且比较常用的的删除进行宏化，这样嵌入到代码中，减少调用的开销，但是代价就是编译出来的文件会非常大（因为文件中出现了比较多的重复的代码）</li>\n<li>#: 利用宏来创建字符串（可以达到将其他类型数据嵌入到字符串中）</li>\n<li>##: 预处理的粘合剂</li>\n<li>预定义宏: 常用语打印日志<br><strong>DATE</strong> 进行预处理的日期（“MMmm dd yyyy”形式的字符串文字）<br><strong>FILE</strong> 代表当前源代码文件名的字符串文字<br><strong>LINE</strong> 代表当前源代码中的行号的整数常量<br><strong>TIME</strong> 源文件编译时间，格式“hh: mm: ss”<br><strong>func</strong> 当前所在函数名<br>在打印调试信息时打印这两<br>个宏 <strong>FILE</strong> <strong>LINE</strong> 可以给开发者非常有用的提示 </li>\n</ol>\n<h3 id=\"条件编译\"><a href=\"#条件编译\" class=\"headerlink\" title=\"条件编译\"></a>条件编译</h3><p>单路: #if #endif<br>双路: #if #else #endif<br>多路: #if #elif #elif #endif</p>\n<h3 id=\"头文件包含\"><a href=\"#头文件包含\" class=\"headerlink\" title=\"头文件包含\"></a>头文件包含</h3><p>1: 头文件的内容会被写入到包含该头文件的文件中<br>2: &lt;&gt;（一般用于系统文件）: 系统路径下面找  whereis stdio.h<br>3: “”（一般用于自定义头文件）: 现在当前路径下找 ，找不到再去系统路径下找<br>4: 头文件自包含: 免去多余的前向申明<br>5: 避免头文件被重复包含: #ifndef <strong>XX_H</strong> #define <strong>XX_H</strong> //数据类型声明 //函数声明#endif （假设文件名为xx.h）<br>6: c语言是以文件单位进行编译的，编译期只需要函数申明即可，所以我们在给别人接口时候，先给.h（函数的申明文件即可），到时再把.o文件给他进行链接即可</p>\n"},{"title":"c语言2-补码","date":"2015-03-12T15:16:39.000Z","_content":"\n## 流程图简要\n椭圆：开始/结束\n平行四边行：输入\n陵行：判断\n矩行：操作\n\n\n## 类型介绍\n备注：为什么正数数值范围都是2的多少次方减1：因为由于补码规则可知，同一个补码可能表示一个正数也可能表示一个负数，所以为了避免这种歧义，就规定了补码的最高位为符号位，这样以来一个补码就对应一个正数了，但是+0和-0都是0\n          比如：八位二进制的正数最大值是 1111 1111 = 2^8-1 (数列) 0111 1111 2^7-1\n\n\n## 命名规范\n\n## 物理基础\n1. cpu在运作时，读取内存数据，首先要指定存储单元的地址，就是要确定读写哪段数据。即要明确三件事\na. 存储单元地址（地址信息）\nb. 器件的选择，读or写（控制信息）\nc. 读写的数据（数据信息）\n2. 地址总线：cpu通过地址总线告诉内存我们需要操作指定的空间 \n3. 数据总线：cpu 通过数据总线实现与内存的数据交互\n4. 控制总线：cpu对其他硬件设备发出需要对其进行的操作（读/写）的命令\n\n![cpu对内存的读写操作详解](cpu对内存的读写操作详解.png)\n\n\n\n## 补码\n概念：在计算机系统中，数值一律用补码来表述或者存储，原因在于，可以将符号和数值域统一处理；同时加法和减法也可以统一处理此外，补码和原码的运算过程是相同的，不需要额外的硬件电路\n\n备注：\n1. 补码都是二进制，以及计算机下面的所有储存地址还是数据都是补码，为什么我们看到的不同，是因为我们的ide或者cpu进行过特殊处理，因为如果全部用二进制显示会得到一串我们很难分析的字符\n2. 原码都是十进制，所以将补码转化为源码其实就是将二进制转化为十进制\n3. 正数的源码就是他本身，负数的源码是”求反加一“，负数的源码求反码也是如此\n4. 补码解决了三件事情：\na. 解决了正负零的问题\nb. 解决了符号参加运算的问题\nc. 实现了减法，乘法，除法都变加法的问题\n\n![补码求原](补码求原.png)\n\n## ASCII码\nascii码的显示效果就是cpu操作显卡的结果\n例如:97是a的asscii码，转换成ascii码的时候需要先将97转换为补码(二进制)\n\n\n## 16进制\n我们保存16进制数据时其实是直接将16进制的数据保存到了内存中，不像十进制会进行补码操作，%x因为输出的是16进制，所以每次输出都要满4个字节，如果前面的数据为0他是省略的，但是并不表示他是没有的，如果前面位数不够，会根据符号位来进行补位操作，如果符号位是0就把前面的都补0知道补满为止\n例子： short类型  0x8756   用%x输出是ffff8756\n理解：1：首先我们需要确认数据的类型，因为数据的类型是short，（如果是int就没必要补位了，因为肯定是正数，最高位（符号位）是第32位，是0，省略了） ，所以我们取到short的最高的符号位（第16位/2个字节），就是8的补码的最高位，1000，所以前面是1那么前面全部补1，知道补满32位 然后每四个1就是一个f（因为是16进制输出），所以就得到\n1111 1111 1111  1111 所以就得到ffff8756\n\n## 总结\n根据十六进制来保存数据时，其实是直接将16进制保存到内存中，不像10进制会进行补码操作\n补位补位步骤:\n1. 确定类型\n2. 根据类型确定最高位（符号位）\n3. 根据符号位来进行补位，知道补满（根据我们是要输出16进制还是8进制还是10进制来判断）为止（如果是1则补1，如果是0则补0）","source":"_posts/技术/2015-03-09-c语言2-补码.md","raw":"---\ntitle: c语言2-补码\ndate: 2015-03-12 23:16:39\ncategories: 技术\ntags: c语言\n---\n\n## 流程图简要\n椭圆：开始/结束\n平行四边行：输入\n陵行：判断\n矩行：操作\n\n\n## 类型介绍\n备注：为什么正数数值范围都是2的多少次方减1：因为由于补码规则可知，同一个补码可能表示一个正数也可能表示一个负数，所以为了避免这种歧义，就规定了补码的最高位为符号位，这样以来一个补码就对应一个正数了，但是+0和-0都是0\n          比如：八位二进制的正数最大值是 1111 1111 = 2^8-1 (数列) 0111 1111 2^7-1\n\n\n## 命名规范\n\n## 物理基础\n1. cpu在运作时，读取内存数据，首先要指定存储单元的地址，就是要确定读写哪段数据。即要明确三件事\na. 存储单元地址（地址信息）\nb. 器件的选择，读or写（控制信息）\nc. 读写的数据（数据信息）\n2. 地址总线：cpu通过地址总线告诉内存我们需要操作指定的空间 \n3. 数据总线：cpu 通过数据总线实现与内存的数据交互\n4. 控制总线：cpu对其他硬件设备发出需要对其进行的操作（读/写）的命令\n\n![cpu对内存的读写操作详解](cpu对内存的读写操作详解.png)\n\n\n\n## 补码\n概念：在计算机系统中，数值一律用补码来表述或者存储，原因在于，可以将符号和数值域统一处理；同时加法和减法也可以统一处理此外，补码和原码的运算过程是相同的，不需要额外的硬件电路\n\n备注：\n1. 补码都是二进制，以及计算机下面的所有储存地址还是数据都是补码，为什么我们看到的不同，是因为我们的ide或者cpu进行过特殊处理，因为如果全部用二进制显示会得到一串我们很难分析的字符\n2. 原码都是十进制，所以将补码转化为源码其实就是将二进制转化为十进制\n3. 正数的源码就是他本身，负数的源码是”求反加一“，负数的源码求反码也是如此\n4. 补码解决了三件事情：\na. 解决了正负零的问题\nb. 解决了符号参加运算的问题\nc. 实现了减法，乘法，除法都变加法的问题\n\n![补码求原](补码求原.png)\n\n## ASCII码\nascii码的显示效果就是cpu操作显卡的结果\n例如:97是a的asscii码，转换成ascii码的时候需要先将97转换为补码(二进制)\n\n\n## 16进制\n我们保存16进制数据时其实是直接将16进制的数据保存到了内存中，不像十进制会进行补码操作，%x因为输出的是16进制，所以每次输出都要满4个字节，如果前面的数据为0他是省略的，但是并不表示他是没有的，如果前面位数不够，会根据符号位来进行补位操作，如果符号位是0就把前面的都补0知道补满为止\n例子： short类型  0x8756   用%x输出是ffff8756\n理解：1：首先我们需要确认数据的类型，因为数据的类型是short，（如果是int就没必要补位了，因为肯定是正数，最高位（符号位）是第32位，是0，省略了） ，所以我们取到short的最高的符号位（第16位/2个字节），就是8的补码的最高位，1000，所以前面是1那么前面全部补1，知道补满32位 然后每四个1就是一个f（因为是16进制输出），所以就得到\n1111 1111 1111  1111 所以就得到ffff8756\n\n## 总结\n根据十六进制来保存数据时，其实是直接将16进制保存到内存中，不像10进制会进行补码操作\n补位补位步骤:\n1. 确定类型\n2. 根据类型确定最高位（符号位）\n3. 根据符号位来进行补位，知道补满（根据我们是要输出16进制还是8进制还是10进制来判断）为止（如果是1则补1，如果是0则补0）","slug":"技术/2015-03-09-c语言2-补码","published":1,"updated":"2018-03-12T03:12:50.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4r000p5oq8uw0m2p03","content":"<h2 id=\"流程图简要\"><a href=\"#流程图简要\" class=\"headerlink\" title=\"流程图简要\"></a>流程图简要</h2><p>椭圆：开始/结束<br>平行四边行：输入<br>陵行：判断<br>矩行：操作</p>\n<h2 id=\"类型介绍\"><a href=\"#类型介绍\" class=\"headerlink\" title=\"类型介绍\"></a>类型介绍</h2><p>备注：为什么正数数值范围都是2的多少次方减1：因为由于补码规则可知，同一个补码可能表示一个正数也可能表示一个负数，所以为了避免这种歧义，就规定了补码的最高位为符号位，这样以来一个补码就对应一个正数了，但是+0和-0都是0<br>          比如：八位二进制的正数最大值是 1111 1111 = 2^8-1 (数列) 0111 1111 2^7-1</p>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><h2 id=\"物理基础\"><a href=\"#物理基础\" class=\"headerlink\" title=\"物理基础\"></a>物理基础</h2><ol>\n<li>cpu在运作时，读取内存数据，首先要指定存储单元的地址，就是要确定读写哪段数据。即要明确三件事<br>a. 存储单元地址（地址信息）<br>b. 器件的选择，读or写（控制信息）<br>c. 读写的数据（数据信息）</li>\n<li>地址总线：cpu通过地址总线告诉内存我们需要操作指定的空间 </li>\n<li>数据总线：cpu 通过数据总线实现与内存的数据交互</li>\n<li>控制总线：cpu对其他硬件设备发出需要对其进行的操作（读/写）的命令</li>\n</ol>\n<p><img src=\"/2015/03/12/技术/2015-03-09-c语言2-补码/cpu对内存的读写操作详解.png\" alt=\"cpu对内存的读写操作详解\"></p>\n<h2 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h2><p>概念：在计算机系统中，数值一律用补码来表述或者存储，原因在于，可以将符号和数值域统一处理；同时加法和减法也可以统一处理此外，补码和原码的运算过程是相同的，不需要额外的硬件电路</p>\n<p>备注：</p>\n<ol>\n<li>补码都是二进制，以及计算机下面的所有储存地址还是数据都是补码，为什么我们看到的不同，是因为我们的ide或者cpu进行过特殊处理，因为如果全部用二进制显示会得到一串我们很难分析的字符</li>\n<li>原码都是十进制，所以将补码转化为源码其实就是将二进制转化为十进制</li>\n<li>正数的源码就是他本身，负数的源码是”求反加一“，负数的源码求反码也是如此</li>\n<li>补码解决了三件事情：<br>a. 解决了正负零的问题<br>b. 解决了符号参加运算的问题<br>c. 实现了减法，乘法，除法都变加法的问题</li>\n</ol>\n<p><img src=\"/2015/03/12/技术/2015-03-09-c语言2-补码/补码求原.png\" alt=\"补码求原\"></p>\n<h2 id=\"ASCII码\"><a href=\"#ASCII码\" class=\"headerlink\" title=\"ASCII码\"></a>ASCII码</h2><p>ascii码的显示效果就是cpu操作显卡的结果<br>例如:97是a的asscii码，转换成ascii码的时候需要先将97转换为补码(二进制)</p>\n<h2 id=\"16进制\"><a href=\"#16进制\" class=\"headerlink\" title=\"16进制\"></a>16进制</h2><p>我们保存16进制数据时其实是直接将16进制的数据保存到了内存中，不像十进制会进行补码操作，%x因为输出的是16进制，所以每次输出都要满4个字节，如果前面的数据为0他是省略的，但是并不表示他是没有的，如果前面位数不够，会根据符号位来进行补位操作，如果符号位是0就把前面的都补0知道补满为止<br>例子： short类型  0x8756   用%x输出是ffff8756<br>理解：1：首先我们需要确认数据的类型，因为数据的类型是short，（如果是int就没必要补位了，因为肯定是正数，最高位（符号位）是第32位，是0，省略了） ，所以我们取到short的最高的符号位（第16位/2个字节），就是8的补码的最高位，1000，所以前面是1那么前面全部补1，知道补满32位 然后每四个1就是一个f（因为是16进制输出），所以就得到<br>1111 1111 1111  1111 所以就得到ffff8756</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>根据十六进制来保存数据时，其实是直接将16进制保存到内存中，不像10进制会进行补码操作<br>补位补位步骤:</p>\n<ol>\n<li>确定类型</li>\n<li>根据类型确定最高位（符号位）</li>\n<li>根据符号位来进行补位，知道补满（根据我们是要输出16进制还是8进制还是10进制来判断）为止（如果是1则补1，如果是0则补0）</li>\n</ol>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"流程图简要\"><a href=\"#流程图简要\" class=\"headerlink\" title=\"流程图简要\"></a>流程图简要</h2><p>椭圆：开始/结束<br>平行四边行：输入<br>陵行：判断<br>矩行：操作</p>\n<h2 id=\"类型介绍\"><a href=\"#类型介绍\" class=\"headerlink\" title=\"类型介绍\"></a>类型介绍</h2><p>备注：为什么正数数值范围都是2的多少次方减1：因为由于补码规则可知，同一个补码可能表示一个正数也可能表示一个负数，所以为了避免这种歧义，就规定了补码的最高位为符号位，这样以来一个补码就对应一个正数了，但是+0和-0都是0<br>          比如：八位二进制的正数最大值是 1111 1111 = 2^8-1 (数列) 0111 1111 2^7-1</p>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><h2 id=\"物理基础\"><a href=\"#物理基础\" class=\"headerlink\" title=\"物理基础\"></a>物理基础</h2><ol>\n<li>cpu在运作时，读取内存数据，首先要指定存储单元的地址，就是要确定读写哪段数据。即要明确三件事<br>a. 存储单元地址（地址信息）<br>b. 器件的选择，读or写（控制信息）<br>c. 读写的数据（数据信息）</li>\n<li>地址总线：cpu通过地址总线告诉内存我们需要操作指定的空间 </li>\n<li>数据总线：cpu 通过数据总线实现与内存的数据交互</li>\n<li>控制总线：cpu对其他硬件设备发出需要对其进行的操作（读/写）的命令</li>\n</ol>\n<p><img src=\"/2015/03/12/技术/2015-03-09-c语言2-补码/cpu对内存的读写操作详解.png\" alt=\"cpu对内存的读写操作详解\"></p>\n<h2 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h2><p>概念：在计算机系统中，数值一律用补码来表述或者存储，原因在于，可以将符号和数值域统一处理；同时加法和减法也可以统一处理此外，补码和原码的运算过程是相同的，不需要额外的硬件电路</p>\n<p>备注：</p>\n<ol>\n<li>补码都是二进制，以及计算机下面的所有储存地址还是数据都是补码，为什么我们看到的不同，是因为我们的ide或者cpu进行过特殊处理，因为如果全部用二进制显示会得到一串我们很难分析的字符</li>\n<li>原码都是十进制，所以将补码转化为源码其实就是将二进制转化为十进制</li>\n<li>正数的源码就是他本身，负数的源码是”求反加一“，负数的源码求反码也是如此</li>\n<li>补码解决了三件事情：<br>a. 解决了正负零的问题<br>b. 解决了符号参加运算的问题<br>c. 实现了减法，乘法，除法都变加法的问题</li>\n</ol>\n<p><img src=\"/2015/03/12/技术/2015-03-09-c语言2-补码/补码求原.png\" alt=\"补码求原\"></p>\n<h2 id=\"ASCII码\"><a href=\"#ASCII码\" class=\"headerlink\" title=\"ASCII码\"></a>ASCII码</h2><p>ascii码的显示效果就是cpu操作显卡的结果<br>例如:97是a的asscii码，转换成ascii码的时候需要先将97转换为补码(二进制)</p>\n<h2 id=\"16进制\"><a href=\"#16进制\" class=\"headerlink\" title=\"16进制\"></a>16进制</h2><p>我们保存16进制数据时其实是直接将16进制的数据保存到了内存中，不像十进制会进行补码操作，%x因为输出的是16进制，所以每次输出都要满4个字节，如果前面的数据为0他是省略的，但是并不表示他是没有的，如果前面位数不够，会根据符号位来进行补位操作，如果符号位是0就把前面的都补0知道补满为止<br>例子： short类型  0x8756   用%x输出是ffff8756<br>理解：1：首先我们需要确认数据的类型，因为数据的类型是short，（如果是int就没必要补位了，因为肯定是正数，最高位（符号位）是第32位，是0，省略了） ，所以我们取到short的最高的符号位（第16位/2个字节），就是8的补码的最高位，1000，所以前面是1那么前面全部补1，知道补满32位 然后每四个1就是一个f（因为是16进制输出），所以就得到<br>1111 1111 1111  1111 所以就得到ffff8756</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>根据十六进制来保存数据时，其实是直接将16进制保存到内存中，不像10进制会进行补码操作<br>补位补位步骤:</p>\n<ol>\n<li>确定类型</li>\n<li>根据类型确定最高位（符号位）</li>\n<li>根据符号位来进行补位，知道补满（根据我们是要输出16进制还是8进制还是10进制来判断）为止（如果是1则补1，如果是0则补0）</li>\n</ol>\n"},{"title":"c语言3-优先级","date":"2015-03-13T15:32:22.000Z","_content":"\n## 运算表达式\n常让人混淆的表达式：\n1. 所有的常量表达式都是可以做判断的\n2. 3==3==3；得到的是0 就是两个判断\n3. 无论在if的时候判断的表达式有多长，判断的都是最左边的变量是为0还是1\n\n![优先级](优先级.jpg)\n\n\n## 例题: 判断是否是回文数\n```c\nlong long var;\nprintf(\"pls input num:\\n\");\nscanf(\"%lld\", &var);\n\nlong long sum = 0;\nlong long m = var;\n//倒置var循环12321   1 1232  12 123  3\nwhile (m) {\n    sum = m%10 + sum*10;\n    m /= 10;  // 循环条件\n}\nif(var == sum) // 判断输入var与倒置sum是否相等\n{\n    printf(\"%d是回文\\n\", var);\n}else {\n    printf(\"%d不是回文\\n\", var);\n}\n```","source":"_posts/技术/2015-03-09-c语言3-优先级.md","raw":"---\ntitle: c语言3-优先级\ndate: 2015-03-13 23:32:22\ncategories: 技术\ntags: c语言\n---\n\n## 运算表达式\n常让人混淆的表达式：\n1. 所有的常量表达式都是可以做判断的\n2. 3==3==3；得到的是0 就是两个判断\n3. 无论在if的时候判断的表达式有多长，判断的都是最左边的变量是为0还是1\n\n![优先级](优先级.jpg)\n\n\n## 例题: 判断是否是回文数\n```c\nlong long var;\nprintf(\"pls input num:\\n\");\nscanf(\"%lld\", &var);\n\nlong long sum = 0;\nlong long m = var;\n//倒置var循环12321   1 1232  12 123  3\nwhile (m) {\n    sum = m%10 + sum*10;\n    m /= 10;  // 循环条件\n}\nif(var == sum) // 判断输入var与倒置sum是否相等\n{\n    printf(\"%d是回文\\n\", var);\n}else {\n    printf(\"%d不是回文\\n\", var);\n}\n```","slug":"技术/2015-03-09-c语言3-优先级","published":1,"updated":"2018-03-12T03:13:01.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4s000s5oq8zm05jtlf","content":"<h2 id=\"运算表达式\"><a href=\"#运算表达式\" class=\"headerlink\" title=\"运算表达式\"></a>运算表达式</h2><p>常让人混淆的表达式：</p>\n<ol>\n<li>所有的常量表达式都是可以做判断的</li>\n<li>3==3==3；得到的是0 就是两个判断</li>\n<li>无论在if的时候判断的表达式有多长，判断的都是最左边的变量是为0还是1</li>\n</ol>\n<p><img src=\"/2015/03/13/技术/2015-03-09-c语言3-优先级/优先级.jpg\" alt=\"优先级\"></p>\n<h2 id=\"例题-判断是否是回文数\"><a href=\"#例题-判断是否是回文数\" class=\"headerlink\" title=\"例题: 判断是否是回文数\"></a>例题: 判断是否是回文数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> var;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"pls input num:\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>, &amp;var);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> m = var;</span><br><span class=\"line\"><span class=\"comment\">//倒置var循环12321   1 1232  12 123  3</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (m) &#123;</span><br><span class=\"line\">    sum = m%<span class=\"number\">10</span> + sum*<span class=\"number\">10</span>;</span><br><span class=\"line\">    m /= <span class=\"number\">10</span>;  <span class=\"comment\">// 循环条件</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(var == sum) <span class=\"comment\">// 判断输入var与倒置sum是否相等</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d是回文\\n\"</span>, var);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d不是回文\\n\"</span>, var);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"运算表达式\"><a href=\"#运算表达式\" class=\"headerlink\" title=\"运算表达式\"></a>运算表达式</h2><p>常让人混淆的表达式：</p>\n<ol>\n<li>所有的常量表达式都是可以做判断的</li>\n<li>3==3==3；得到的是0 就是两个判断</li>\n<li>无论在if的时候判断的表达式有多长，判断的都是最左边的变量是为0还是1</li>\n</ol>\n<p><img src=\"/2015/03/13/技术/2015-03-09-c语言3-优先级/优先级.jpg\" alt=\"优先级\"></p>\n<h2 id=\"例题-判断是否是回文数\"><a href=\"#例题-判断是否是回文数\" class=\"headerlink\" title=\"例题: 判断是否是回文数\"></a>例题: 判断是否是回文数</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> var;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"pls input num:\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>, &amp;var);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> m = var;</span><br><span class=\"line\"><span class=\"comment\">//倒置var循环12321   1 1232  12 123  3</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (m) &#123;</span><br><span class=\"line\">    sum = m%<span class=\"number\">10</span> + sum*<span class=\"number\">10</span>;</span><br><span class=\"line\">    m /= <span class=\"number\">10</span>;  <span class=\"comment\">// 循环条件</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(var == sum) <span class=\"comment\">// 判断输入var与倒置sum是否相等</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d是回文\\n\"</span>, var);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d不是回文\\n\"</span>, var);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"c语言4-程序的设计结构","date":"2015-03-14T15:41:56.000Z","_content":"\n## 程序的设计结构\ndo while的特点：先做处理再判断，常用于登录的一系列验证\nfor的特点：先加加索引在判断\nbreak：结束当前循环（相对break最里面的）\ncontinue：跳出当前循环的这次循环（相对于continue最里面的）\nreturn：结束所有循环，以及释放该方法所占的空间（表示所处的函数结束）\n","source":"_posts/技术/2015-03-09-c语言4-程序的设计结构.md","raw":"---\ntitle: c语言4-程序的设计结构\ndate: 2015-03-14 23:41:56\ncategories: 技术\ntags: c语言\n---\n\n## 程序的设计结构\ndo while的特点：先做处理再判断，常用于登录的一系列验证\nfor的特点：先加加索引在判断\nbreak：结束当前循环（相对break最里面的）\ncontinue：跳出当前循环的这次循环（相对于continue最里面的）\nreturn：结束所有循环，以及释放该方法所占的空间（表示所处的函数结束）\n","slug":"技术/2015-03-09-c语言4-程序的设计结构","published":1,"updated":"2018-03-12T03:13:08.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4u000v5oq8tdb6qnu1","content":"<h2 id=\"程序的设计结构\"><a href=\"#程序的设计结构\" class=\"headerlink\" title=\"程序的设计结构\"></a>程序的设计结构</h2><p>do while的特点：先做处理再判断，常用于登录的一系列验证<br>for的特点：先加加索引在判断<br>break：结束当前循环（相对break最里面的）<br>continue：跳出当前循环的这次循环（相对于continue最里面的）<br>return：结束所有循环，以及释放该方法所占的空间（表示所处的函数结束）</p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"程序的设计结构\"><a href=\"#程序的设计结构\" class=\"headerlink\" title=\"程序的设计结构\"></a>程序的设计结构</h2><p>do while的特点：先做处理再判断，常用于登录的一系列验证<br>for的特点：先加加索引在判断<br>break：结束当前循环（相对break最里面的）<br>continue：跳出当前循环的这次循环（相对于continue最里面的）<br>return：结束所有循环，以及释放该方法所占的空间（表示所处的函数结束）</p>\n"},{"title":"c语言5-数组的二义性","date":"2015-03-15T15:41:56.000Z","_content":"\n## 数组的二义性\n### 数组名的二义性\n数组名的二义性:整体性和个体性\n整体性用的很少情况  一般只有在我们求sizeof的时候才是 \n当我们用数组名当作地址的时候都是体现数组的元素性\n\n### 指针运算\n指针与数值：加减都是该指针指向空间的n的倍数（加减n）\n例子：\nint arr[3]={0};\n1. arr：arr是数组第一个元素的首地址，表示数组的个体性，并且该指针指向的空间为int类型，所以加减为int的倍数\n2. &arr[0]：arr与&arr[0]这两个指针相同，并且指向的空间也一样，都是int类型大小，所以&arr[0]加减也是加减int的倍数\n\nint arr[3][4]={};\n1. 我们需要将该数组转换成一维数组来看  =int[4] arr[3] =T arr[3](T=arr[4])\n2. arr：arr是该数组的第一个元素的第一个指针，指向的空间大小为int[4]\n3. &arr[0]：arr和&arr[0]这两个的指针相同，并且都指向一个T（int[4]）的空间，所以加减都是int[4]的倍数\n4. &arr[0][0]：&arr[0][0]是一个二维数组里面的一个一维数组里面的第一个指针，并且所指向的空间大小为int，所以加减int的倍数\n5. 我们将指针赋值给一个新的指针变量，新的指针变量的类型也就是该指针指向空间大小，然后加上*，总结出，指针变量的类型（除掉*）和指向空间的类型相同","source":"_posts/技术/2015-03-09-c语言5-数组的二义性.md","raw":"---\ntitle: c语言5-数组的二义性\ndate: 2015-03-15 23:41:56\ncategories: 技术\ntags: c语言\n---\n\n## 数组的二义性\n### 数组名的二义性\n数组名的二义性:整体性和个体性\n整体性用的很少情况  一般只有在我们求sizeof的时候才是 \n当我们用数组名当作地址的时候都是体现数组的元素性\n\n### 指针运算\n指针与数值：加减都是该指针指向空间的n的倍数（加减n）\n例子：\nint arr[3]={0};\n1. arr：arr是数组第一个元素的首地址，表示数组的个体性，并且该指针指向的空间为int类型，所以加减为int的倍数\n2. &arr[0]：arr与&arr[0]这两个指针相同，并且指向的空间也一样，都是int类型大小，所以&arr[0]加减也是加减int的倍数\n\nint arr[3][4]={};\n1. 我们需要将该数组转换成一维数组来看  =int[4] arr[3] =T arr[3](T=arr[4])\n2. arr：arr是该数组的第一个元素的第一个指针，指向的空间大小为int[4]\n3. &arr[0]：arr和&arr[0]这两个的指针相同，并且都指向一个T（int[4]）的空间，所以加减都是int[4]的倍数\n4. &arr[0][0]：&arr[0][0]是一个二维数组里面的一个一维数组里面的第一个指针，并且所指向的空间大小为int，所以加减int的倍数\n5. 我们将指针赋值给一个新的指针变量，新的指针变量的类型也就是该指针指向空间大小，然后加上*，总结出，指针变量的类型（除掉*）和指向空间的类型相同","slug":"技术/2015-03-09-c语言5-数组的二义性","published":1,"updated":"2018-03-12T03:13:18.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4v000y5oq8oj456xsz","content":"<h2 id=\"数组的二义性\"><a href=\"#数组的二义性\" class=\"headerlink\" title=\"数组的二义性\"></a>数组的二义性</h2><h3 id=\"数组名的二义性\"><a href=\"#数组名的二义性\" class=\"headerlink\" title=\"数组名的二义性\"></a>数组名的二义性</h3><p>数组名的二义性:整体性和个体性<br>整体性用的很少情况  一般只有在我们求sizeof的时候才是<br>当我们用数组名当作地址的时候都是体现数组的元素性</p>\n<h3 id=\"指针运算\"><a href=\"#指针运算\" class=\"headerlink\" title=\"指针运算\"></a>指针运算</h3><p>指针与数值：加减都是该指针指向空间的n的倍数（加减n）<br>例子：<br>int arr[3]={0};</p>\n<ol>\n<li>arr：arr是数组第一个元素的首地址，表示数组的个体性，并且该指针指向的空间为int类型，所以加减为int的倍数</li>\n<li>&amp;arr[0]：arr与&amp;arr[0]这两个指针相同，并且指向的空间也一样，都是int类型大小，所以&amp;arr[0]加减也是加减int的倍数</li>\n</ol>\n<p>int arr[3][4]={};</p>\n<ol>\n<li>我们需要将该数组转换成一维数组来看  =int[4] arr[3] =T arr<a href=\"T=arr[4]\">3</a></li>\n<li>arr：arr是该数组的第一个元素的第一个指针，指向的空间大小为int[4]</li>\n<li>&amp;arr[0]：arr和&amp;arr[0]这两个的指针相同，并且都指向一个T（int[4]）的空间，所以加减都是int[4]的倍数</li>\n<li>&amp;arr[0][0]：&amp;arr[0][0]是一个二维数组里面的一个一维数组里面的第一个指针，并且所指向的空间大小为int，所以加减int的倍数</li>\n<li>我们将指针赋值给一个新的指针变量，新的指针变量的类型也就是该指针指向空间大小，然后加上<em>，总结出，指针变量的类型（除掉</em>）和指向空间的类型相同</li>\n</ol>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"数组的二义性\"><a href=\"#数组的二义性\" class=\"headerlink\" title=\"数组的二义性\"></a>数组的二义性</h2><h3 id=\"数组名的二义性\"><a href=\"#数组名的二义性\" class=\"headerlink\" title=\"数组名的二义性\"></a>数组名的二义性</h3><p>数组名的二义性:整体性和个体性<br>整体性用的很少情况  一般只有在我们求sizeof的时候才是<br>当我们用数组名当作地址的时候都是体现数组的元素性</p>\n<h3 id=\"指针运算\"><a href=\"#指针运算\" class=\"headerlink\" title=\"指针运算\"></a>指针运算</h3><p>指针与数值：加减都是该指针指向空间的n的倍数（加减n）<br>例子：<br>int arr[3]={0};</p>\n<ol>\n<li>arr：arr是数组第一个元素的首地址，表示数组的个体性，并且该指针指向的空间为int类型，所以加减为int的倍数</li>\n<li>&amp;arr[0]：arr与&amp;arr[0]这两个指针相同，并且指向的空间也一样，都是int类型大小，所以&amp;arr[0]加减也是加减int的倍数</li>\n</ol>\n<p>int arr[3][4]={};</p>\n<ol>\n<li>我们需要将该数组转换成一维数组来看  =int[4] arr[3] =T arr<a href=\"T=arr[4]\">3</a></li>\n<li>arr：arr是该数组的第一个元素的第一个指针，指向的空间大小为int[4]</li>\n<li>&amp;arr[0]：arr和&amp;arr[0]这两个的指针相同，并且都指向一个T（int[4]）的空间，所以加减都是int[4]的倍数</li>\n<li>&amp;arr[0][0]：&amp;arr[0][0]是一个二维数组里面的一个一维数组里面的第一个指针，并且所指向的空间大小为int，所以加减int的倍数</li>\n<li>我们将指针赋值给一个新的指针变量，新的指针变量的类型也就是该指针指向空间大小，然后加上<em>，总结出，指针变量的类型（除掉</em>）和指向空间的类型相同</li>\n</ol>\n"},{"title":"c语言7-指针","date":"2015-03-17T15:41:56.000Z","_content":"\n## 内存\n我们计算机的所有内存都是线性的，不管是一维数组还是二维数组在内存中都是线性的，内存线性是物理基础（不要问我）\n\n机器的不同，导致指针类型的大小不同，32位机的指针类型是4个字节，64位机的指针大小是8个字节，而位数的多少又影响到地址总线的宽度，导致最大支持的内存大小（内存条），所以32位机支持的最大的内存条是4g，并且4g有一部分被其他硬件占用，所以剩3g多来给用户使用，地址总线越宽，同一时间传输的地址数据就越多，从而达到同一时间可以让跟多的软件来访问内存，起到同一时间可以运行更多的软件\n\n## 十六进制的解释\n一个十六进制位数表示4个二进制位数，我们为一个变量赋一个16进制数和一个10进制数的表达方式是一样的，只不过打出的数据不同，\n十六进制的读操作：\n因为我们的电脑是4个二进制对应一位16进制的数，所以我们内存里的一个存储单元可以存储两位16进制的数，并且我们根据指针读数据都是从低位向高位读取，并且每个变量保存的都是首地址，所以:\n```c\ninta=0x0355;\nint*a1=(int*)&a;//355\nchar*a2=(char*)&a;//55  拿到低位地址 根据类型（寻址能力）向上找到数据后用数据总线返回cpu\nshort*a3=(short*)&a;//355\n```\n0会被忽略\n\n## 从大类型转换为小类型数据截取的解释\n我们的数据在内存条中都是线性存储的并且占时的内存大小是从大到小的  但是我们此时的首地址是不变的，只是寻址能能力变化了  例如  int  a=0x12345678 char p=(char)a   printf(\"p=%x\"); p=78\n\n## 指针和地址的区别\n指针是一个有类型的地址，所以我们可以根据地址来设置地址偏移来获取数据\n备注:我们变量保存的都是首地址（当前数据空间最小的地址），然后根据数据类型来去从首地址拿指定个数的空间数据（因为现在我首地址和类型（空间个数）和每个空间的大小（8位）都确定了 所以我们可以按照规律取出数据）\n\n*：根据地址取内容  前提要有地址 \n&：根据变量取地址，如果对象是数组的话我们根据他取到的是数组的整体\n\n## 自定义地址(危险)\n直接为一个指针变量赋一个我们自己写的值的画很危险，因为我们随机写的地址可能是系统内核占用的，所以可能影响到系统，所以我们申请内存一般都是需要系统帮我申请，而不是自己随机写地址，一般4g的内存的话 0~3g为用户内存，3g~4g为系统内存，所以3g~4g的地址我们是不能申请的\n\n## 同类型数据加减的问题\n同类型相减等于相隔空格数，基本类型除外\n\n## 数组和指针的关系\n数组名是个常量  不能修改 不能进行加减计算\n*p++ 先算++ 再去值\n一级数组和指针的关系：a+1表示\n\n## 数组的首地址和数组元素的首地址之间的关系\n\"指针\"加数值，加的是该对象对应的数组的步长\n数组的整体和元素性：对数组加上&就是表述数组的整体性\n```c\nintarr[3][4]={1,2,3,4,10,20,30,40,100,200,300,400}; //T arr[3]\nprintf(\"arr=%p\\n\",arr+1);//arr的数组的步长为int[4]所以加的是int[4]的字节大小\nprintf(\"&arr=%p\\n\",&arr+1);//表示数组的整体，所以步长为整个数组，所以加的是整个数组的长度\nprintf(\"&arr[0]=%p\\n\",arr[0]+1);//arr[0]这里不是表示地址 而是取值 不考虑\nprintf(\"&arr[0]=%p\\n\",&arr[0]+1);//&arr的数组的步长为int[4]，所以加的是int[4]的字节大小\nintarr[5]={10,20,30,40,50}; \nprintf(\"arr[0]=%p\\n\",arr[0]);//这里是直接取值  不是指针 不考虑 直接加一\nprintf(\"&arr[0]=%p\\n\",&arr[0]);//&arr的数组的步长为int所以加上int类型大小\nprintf(\"arr[0]+1=%p\\n\",arr[0]+1);//\n这里是直接取值  不是指针 不考虑 直接加一\nprintf(\"&arr[0]+1=%p\\n\",&arr[0]+1);//\n&arr的数组的步长为int所以加上int类型大小\nprintf(\"&arr+1=%p\\n\",&arr+1);//&考虑的是整体性 直接加上int[5]的类型大小\nprintf(\"&arr[0]=%p\\n\",&arr[0]);//&arr[0]的数组的步长为int 所以直接加int\nprintf(\"&arr+1=%p\\n\",&arr+1);//整体  直接加int[4]\n```\n\n## 指针类型变量的二义性\n```c\nint * p1=&a;   //p1：表示的是a的地址；&p1表示的是p1变量本身的地址\n```\n\n## 根据指针偏移遍历集合的方法\n```c\nint arr[5]={10,20,30,40,50};\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",arr[i]);\nprintf(\"--------------\\n\");\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",i[arr]);\nprintf(\"--------------\\n\");\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",*(arr+i));//arr+iarr的类型为int所以偏移int的i位\nprintf(\"--------------\\n\");\nint*p=&arr;\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",*p++);//先算p++结果为*p后++\n```\na[i]=*(a+i)\n\n*也起到降级别的能力\n\n![指针偏移法](指针偏移法.png)","source":"_posts/技术/2015-03-09-c语言7-指针.md","raw":"---\ntitle: c语言7-指针\ndate: 2015-03-17 23:41:56\ncategories: 技术\ntags: c语言\n---\n\n## 内存\n我们计算机的所有内存都是线性的，不管是一维数组还是二维数组在内存中都是线性的，内存线性是物理基础（不要问我）\n\n机器的不同，导致指针类型的大小不同，32位机的指针类型是4个字节，64位机的指针大小是8个字节，而位数的多少又影响到地址总线的宽度，导致最大支持的内存大小（内存条），所以32位机支持的最大的内存条是4g，并且4g有一部分被其他硬件占用，所以剩3g多来给用户使用，地址总线越宽，同一时间传输的地址数据就越多，从而达到同一时间可以让跟多的软件来访问内存，起到同一时间可以运行更多的软件\n\n## 十六进制的解释\n一个十六进制位数表示4个二进制位数，我们为一个变量赋一个16进制数和一个10进制数的表达方式是一样的，只不过打出的数据不同，\n十六进制的读操作：\n因为我们的电脑是4个二进制对应一位16进制的数，所以我们内存里的一个存储单元可以存储两位16进制的数，并且我们根据指针读数据都是从低位向高位读取，并且每个变量保存的都是首地址，所以:\n```c\ninta=0x0355;\nint*a1=(int*)&a;//355\nchar*a2=(char*)&a;//55  拿到低位地址 根据类型（寻址能力）向上找到数据后用数据总线返回cpu\nshort*a3=(short*)&a;//355\n```\n0会被忽略\n\n## 从大类型转换为小类型数据截取的解释\n我们的数据在内存条中都是线性存储的并且占时的内存大小是从大到小的  但是我们此时的首地址是不变的，只是寻址能能力变化了  例如  int  a=0x12345678 char p=(char)a   printf(\"p=%x\"); p=78\n\n## 指针和地址的区别\n指针是一个有类型的地址，所以我们可以根据地址来设置地址偏移来获取数据\n备注:我们变量保存的都是首地址（当前数据空间最小的地址），然后根据数据类型来去从首地址拿指定个数的空间数据（因为现在我首地址和类型（空间个数）和每个空间的大小（8位）都确定了 所以我们可以按照规律取出数据）\n\n*：根据地址取内容  前提要有地址 \n&：根据变量取地址，如果对象是数组的话我们根据他取到的是数组的整体\n\n## 自定义地址(危险)\n直接为一个指针变量赋一个我们自己写的值的画很危险，因为我们随机写的地址可能是系统内核占用的，所以可能影响到系统，所以我们申请内存一般都是需要系统帮我申请，而不是自己随机写地址，一般4g的内存的话 0~3g为用户内存，3g~4g为系统内存，所以3g~4g的地址我们是不能申请的\n\n## 同类型数据加减的问题\n同类型相减等于相隔空格数，基本类型除外\n\n## 数组和指针的关系\n数组名是个常量  不能修改 不能进行加减计算\n*p++ 先算++ 再去值\n一级数组和指针的关系：a+1表示\n\n## 数组的首地址和数组元素的首地址之间的关系\n\"指针\"加数值，加的是该对象对应的数组的步长\n数组的整体和元素性：对数组加上&就是表述数组的整体性\n```c\nintarr[3][4]={1,2,3,4,10,20,30,40,100,200,300,400}; //T arr[3]\nprintf(\"arr=%p\\n\",arr+1);//arr的数组的步长为int[4]所以加的是int[4]的字节大小\nprintf(\"&arr=%p\\n\",&arr+1);//表示数组的整体，所以步长为整个数组，所以加的是整个数组的长度\nprintf(\"&arr[0]=%p\\n\",arr[0]+1);//arr[0]这里不是表示地址 而是取值 不考虑\nprintf(\"&arr[0]=%p\\n\",&arr[0]+1);//&arr的数组的步长为int[4]，所以加的是int[4]的字节大小\nintarr[5]={10,20,30,40,50}; \nprintf(\"arr[0]=%p\\n\",arr[0]);//这里是直接取值  不是指针 不考虑 直接加一\nprintf(\"&arr[0]=%p\\n\",&arr[0]);//&arr的数组的步长为int所以加上int类型大小\nprintf(\"arr[0]+1=%p\\n\",arr[0]+1);//\n这里是直接取值  不是指针 不考虑 直接加一\nprintf(\"&arr[0]+1=%p\\n\",&arr[0]+1);//\n&arr的数组的步长为int所以加上int类型大小\nprintf(\"&arr+1=%p\\n\",&arr+1);//&考虑的是整体性 直接加上int[5]的类型大小\nprintf(\"&arr[0]=%p\\n\",&arr[0]);//&arr[0]的数组的步长为int 所以直接加int\nprintf(\"&arr+1=%p\\n\",&arr+1);//整体  直接加int[4]\n```\n\n## 指针类型变量的二义性\n```c\nint * p1=&a;   //p1：表示的是a的地址；&p1表示的是p1变量本身的地址\n```\n\n## 根据指针偏移遍历集合的方法\n```c\nint arr[5]={10,20,30,40,50};\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",arr[i]);\nprintf(\"--------------\\n\");\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",i[arr]);\nprintf(\"--------------\\n\");\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",*(arr+i));//arr+iarr的类型为int所以偏移int的i位\nprintf(\"--------------\\n\");\nint*p=&arr;\nfor(inti=0;i<5;i++)\nprintf(\"%d\\n\",*p++);//先算p++结果为*p后++\n```\na[i]=*(a+i)\n\n*也起到降级别的能力\n\n![指针偏移法](指针偏移法.png)","slug":"技术/2015-03-09-c语言7-指针","published":1,"updated":"2018-03-12T03:15:07.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4x00115oq80sqo70ok","content":"<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h2><p>我们计算机的所有内存都是线性的，不管是一维数组还是二维数组在内存中都是线性的，内存线性是物理基础（不要问我）</p>\n<p>机器的不同，导致指针类型的大小不同，32位机的指针类型是4个字节，64位机的指针大小是8个字节，而位数的多少又影响到地址总线的宽度，导致最大支持的内存大小（内存条），所以32位机支持的最大的内存条是4g，并且4g有一部分被其他硬件占用，所以剩3g多来给用户使用，地址总线越宽，同一时间传输的地址数据就越多，从而达到同一时间可以让跟多的软件来访问内存，起到同一时间可以运行更多的软件</p>\n<h2 id=\"十六进制的解释\"><a href=\"#十六进制的解释\" class=\"headerlink\" title=\"十六进制的解释\"></a>十六进制的解释</h2><p>一个十六进制位数表示4个二进制位数，我们为一个变量赋一个16进制数和一个10进制数的表达方式是一样的，只不过打出的数据不同，<br>十六进制的读操作：<br>因为我们的电脑是4个二进制对应一位16进制的数，所以我们内存里的一个存储单元可以存储两位16进制的数，并且我们根据指针读数据都是从低位向高位读取，并且每个变量保存的都是首地址，所以:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inta=<span class=\"number\">0x0355</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>*a1=(<span class=\"keyword\">int</span>*)&amp;a;<span class=\"comment\">//355</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>*a2=(<span class=\"keyword\">char</span>*)&amp;a;<span class=\"comment\">//55  拿到低位地址 根据类型（寻址能力）向上找到数据后用数据总线返回cpu</span></span><br><span class=\"line\"><span class=\"keyword\">short</span>*a3=(<span class=\"keyword\">short</span>*)&amp;a;<span class=\"comment\">//355</span></span><br></pre></td></tr></table></figure></p>\n<p>0会被忽略</p>\n<h2 id=\"从大类型转换为小类型数据截取的解释\"><a href=\"#从大类型转换为小类型数据截取的解释\" class=\"headerlink\" title=\"从大类型转换为小类型数据截取的解释\"></a>从大类型转换为小类型数据截取的解释</h2><p>我们的数据在内存条中都是线性存储的并且占时的内存大小是从大到小的  但是我们此时的首地址是不变的，只是寻址能能力变化了  例如  int  a=0x12345678 char p=(char)a   printf(“p=%x”); p=78</p>\n<h2 id=\"指针和地址的区别\"><a href=\"#指针和地址的区别\" class=\"headerlink\" title=\"指针和地址的区别\"></a>指针和地址的区别</h2><p>指针是一个有类型的地址，所以我们可以根据地址来设置地址偏移来获取数据<br>备注:我们变量保存的都是首地址（当前数据空间最小的地址），然后根据数据类型来去从首地址拿指定个数的空间数据（因为现在我首地址和类型（空间个数）和每个空间的大小（8位）都确定了 所以我们可以按照规律取出数据）</p>\n<p>*：根据地址取内容  前提要有地址<br>&amp;：根据变量取地址，如果对象是数组的话我们根据他取到的是数组的整体</p>\n<h2 id=\"自定义地址-危险\"><a href=\"#自定义地址-危险\" class=\"headerlink\" title=\"自定义地址(危险)\"></a>自定义地址(危险)</h2><p>直接为一个指针变量赋一个我们自己写的值的画很危险，因为我们随机写的地址可能是系统内核占用的，所以可能影响到系统，所以我们申请内存一般都是需要系统帮我申请，而不是自己随机写地址，一般4g的内存的话 0~3g为用户内存，3g~4g为系统内存，所以3g~4g的地址我们是不能申请的</p>\n<h2 id=\"同类型数据加减的问题\"><a href=\"#同类型数据加减的问题\" class=\"headerlink\" title=\"同类型数据加减的问题\"></a>同类型数据加减的问题</h2><p>同类型相减等于相隔空格数，基本类型除外</p>\n<h2 id=\"数组和指针的关系\"><a href=\"#数组和指针的关系\" class=\"headerlink\" title=\"数组和指针的关系\"></a>数组和指针的关系</h2><p>数组名是个常量  不能修改 不能进行加减计算<br>*p++ 先算++ 再去值<br>一级数组和指针的关系：a+1表示</p>\n<h2 id=\"数组的首地址和数组元素的首地址之间的关系\"><a href=\"#数组的首地址和数组元素的首地址之间的关系\" class=\"headerlink\" title=\"数组的首地址和数组元素的首地址之间的关系\"></a>数组的首地址和数组元素的首地址之间的关系</h2><p>“指针”加数值，加的是该对象对应的数组的步长<br>数组的整体和元素性：对数组加上&amp;就是表述数组的整体性<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intarr[<span class=\"number\">3</span>][<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>&#125;; <span class=\"comment\">//T arr[3]</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"arr=%p\\n\"</span>,arr+<span class=\"number\">1</span>);<span class=\"comment\">//arr的数组的步长为int[4]所以加的是int[4]的字节大小</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr=%p\\n\"</span>,&amp;arr+<span class=\"number\">1</span>);<span class=\"comment\">//表示数组的整体，所以步长为整个数组，所以加的是整个数组的长度</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//arr[0]这里不是表示地址 而是取值 不考虑</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//&amp;arr的数组的步长为int[4]，所以加的是int[4]的字节大小</span></span><br><span class=\"line\">intarr[<span class=\"number\">5</span>]=&#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;; </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"arr[0]=%p\\n\"</span>,arr[<span class=\"number\">0</span>]);<span class=\"comment\">//这里是直接取值  不是指针 不考虑 直接加一</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]);<span class=\"comment\">//&amp;arr的数组的步长为int所以加上int类型大小</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"arr[0]+1=%p\\n\"</span>,arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//</span></span><br><span class=\"line\">这里是直接取值  不是指针 不考虑 直接加一</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]+1=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//</span></span><br><span class=\"line\">&amp;arr的数组的步长为<span class=\"keyword\">int</span>所以加上<span class=\"keyword\">int</span>类型大小</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr+1=%p\\n\"</span>,&amp;arr+<span class=\"number\">1</span>);<span class=\"comment\">//&amp;考虑的是整体性 直接加上int[5]的类型大小</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]);<span class=\"comment\">//&amp;arr[0]的数组的步长为int 所以直接加int</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr+1=%p\\n\"</span>,&amp;arr+<span class=\"number\">1</span>);<span class=\"comment\">//整体  直接加int[4]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"指针类型变量的二义性\"><a href=\"#指针类型变量的二义性\" class=\"headerlink\" title=\"指针类型变量的二义性\"></a>指针类型变量的二义性</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> * p1=&amp;a;   <span class=\"comment\">//p1：表示的是a的地址；&amp;p1表示的是p1变量本身的地址</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"根据指针偏移遍历集合的方法\"><a href=\"#根据指针偏移遍历集合的方法\" class=\"headerlink\" title=\"根据指针偏移遍历集合的方法\"></a>根据指针偏移遍历集合的方法</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">5</span>]=&#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,arr[i]);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,i[arr]);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,*(arr+i));<span class=\"comment\">//arr+iarr的类型为int所以偏移int的i位</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span>*p=&amp;arr;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,*p++);<span class=\"comment\">//先算p++结果为*p后++</span></span><br></pre></td></tr></table></figure>\n<p>a[i]=*(a+i)</p>\n<p>*也起到降级别的能力</p>\n<p><img src=\"/2015/03/17/技术/2015-03-09-c语言7-指针/指针偏移法.png\" alt=\"指针偏移法\"></p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h2><p>我们计算机的所有内存都是线性的，不管是一维数组还是二维数组在内存中都是线性的，内存线性是物理基础（不要问我）</p>\n<p>机器的不同，导致指针类型的大小不同，32位机的指针类型是4个字节，64位机的指针大小是8个字节，而位数的多少又影响到地址总线的宽度，导致最大支持的内存大小（内存条），所以32位机支持的最大的内存条是4g，并且4g有一部分被其他硬件占用，所以剩3g多来给用户使用，地址总线越宽，同一时间传输的地址数据就越多，从而达到同一时间可以让跟多的软件来访问内存，起到同一时间可以运行更多的软件</p>\n<h2 id=\"十六进制的解释\"><a href=\"#十六进制的解释\" class=\"headerlink\" title=\"十六进制的解释\"></a>十六进制的解释</h2><p>一个十六进制位数表示4个二进制位数，我们为一个变量赋一个16进制数和一个10进制数的表达方式是一样的，只不过打出的数据不同，<br>十六进制的读操作：<br>因为我们的电脑是4个二进制对应一位16进制的数，所以我们内存里的一个存储单元可以存储两位16进制的数，并且我们根据指针读数据都是从低位向高位读取，并且每个变量保存的都是首地址，所以:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inta=<span class=\"number\">0x0355</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>*a1=(<span class=\"keyword\">int</span>*)&amp;a;<span class=\"comment\">//355</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>*a2=(<span class=\"keyword\">char</span>*)&amp;a;<span class=\"comment\">//55  拿到低位地址 根据类型（寻址能力）向上找到数据后用数据总线返回cpu</span></span><br><span class=\"line\"><span class=\"keyword\">short</span>*a3=(<span class=\"keyword\">short</span>*)&amp;a;<span class=\"comment\">//355</span></span><br></pre></td></tr></table></figure></p>\n<p>0会被忽略</p>\n<h2 id=\"从大类型转换为小类型数据截取的解释\"><a href=\"#从大类型转换为小类型数据截取的解释\" class=\"headerlink\" title=\"从大类型转换为小类型数据截取的解释\"></a>从大类型转换为小类型数据截取的解释</h2><p>我们的数据在内存条中都是线性存储的并且占时的内存大小是从大到小的  但是我们此时的首地址是不变的，只是寻址能能力变化了  例如  int  a=0x12345678 char p=(char)a   printf(“p=%x”); p=78</p>\n<h2 id=\"指针和地址的区别\"><a href=\"#指针和地址的区别\" class=\"headerlink\" title=\"指针和地址的区别\"></a>指针和地址的区别</h2><p>指针是一个有类型的地址，所以我们可以根据地址来设置地址偏移来获取数据<br>备注:我们变量保存的都是首地址（当前数据空间最小的地址），然后根据数据类型来去从首地址拿指定个数的空间数据（因为现在我首地址和类型（空间个数）和每个空间的大小（8位）都确定了 所以我们可以按照规律取出数据）</p>\n<p>*：根据地址取内容  前提要有地址<br>&amp;：根据变量取地址，如果对象是数组的话我们根据他取到的是数组的整体</p>\n<h2 id=\"自定义地址-危险\"><a href=\"#自定义地址-危险\" class=\"headerlink\" title=\"自定义地址(危险)\"></a>自定义地址(危险)</h2><p>直接为一个指针变量赋一个我们自己写的值的画很危险，因为我们随机写的地址可能是系统内核占用的，所以可能影响到系统，所以我们申请内存一般都是需要系统帮我申请，而不是自己随机写地址，一般4g的内存的话 0~3g为用户内存，3g~4g为系统内存，所以3g~4g的地址我们是不能申请的</p>\n<h2 id=\"同类型数据加减的问题\"><a href=\"#同类型数据加减的问题\" class=\"headerlink\" title=\"同类型数据加减的问题\"></a>同类型数据加减的问题</h2><p>同类型相减等于相隔空格数，基本类型除外</p>\n<h2 id=\"数组和指针的关系\"><a href=\"#数组和指针的关系\" class=\"headerlink\" title=\"数组和指针的关系\"></a>数组和指针的关系</h2><p>数组名是个常量  不能修改 不能进行加减计算<br>*p++ 先算++ 再去值<br>一级数组和指针的关系：a+1表示</p>\n<h2 id=\"数组的首地址和数组元素的首地址之间的关系\"><a href=\"#数组的首地址和数组元素的首地址之间的关系\" class=\"headerlink\" title=\"数组的首地址和数组元素的首地址之间的关系\"></a>数组的首地址和数组元素的首地址之间的关系</h2><p>“指针”加数值，加的是该对象对应的数组的步长<br>数组的整体和元素性：对数组加上&amp;就是表述数组的整体性<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intarr[<span class=\"number\">3</span>][<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">100</span>,<span class=\"number\">200</span>,<span class=\"number\">300</span>,<span class=\"number\">400</span>&#125;; <span class=\"comment\">//T arr[3]</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"arr=%p\\n\"</span>,arr+<span class=\"number\">1</span>);<span class=\"comment\">//arr的数组的步长为int[4]所以加的是int[4]的字节大小</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr=%p\\n\"</span>,&amp;arr+<span class=\"number\">1</span>);<span class=\"comment\">//表示数组的整体，所以步长为整个数组，所以加的是整个数组的长度</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//arr[0]这里不是表示地址 而是取值 不考虑</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//&amp;arr的数组的步长为int[4]，所以加的是int[4]的字节大小</span></span><br><span class=\"line\">intarr[<span class=\"number\">5</span>]=&#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;; </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"arr[0]=%p\\n\"</span>,arr[<span class=\"number\">0</span>]);<span class=\"comment\">//这里是直接取值  不是指针 不考虑 直接加一</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]);<span class=\"comment\">//&amp;arr的数组的步长为int所以加上int类型大小</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"arr[0]+1=%p\\n\"</span>,arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//</span></span><br><span class=\"line\">这里是直接取值  不是指针 不考虑 直接加一</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]+1=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);<span class=\"comment\">//</span></span><br><span class=\"line\">&amp;arr的数组的步长为<span class=\"keyword\">int</span>所以加上<span class=\"keyword\">int</span>类型大小</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr+1=%p\\n\"</span>,&amp;arr+<span class=\"number\">1</span>);<span class=\"comment\">//&amp;考虑的是整体性 直接加上int[5]的类型大小</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr[0]=%p\\n\"</span>,&amp;arr[<span class=\"number\">0</span>]);<span class=\"comment\">//&amp;arr[0]的数组的步长为int 所以直接加int</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;arr+1=%p\\n\"</span>,&amp;arr+<span class=\"number\">1</span>);<span class=\"comment\">//整体  直接加int[4]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"指针类型变量的二义性\"><a href=\"#指针类型变量的二义性\" class=\"headerlink\" title=\"指针类型变量的二义性\"></a>指针类型变量的二义性</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> * p1=&amp;a;   <span class=\"comment\">//p1：表示的是a的地址；&amp;p1表示的是p1变量本身的地址</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"根据指针偏移遍历集合的方法\"><a href=\"#根据指针偏移遍历集合的方法\" class=\"headerlink\" title=\"根据指针偏移遍历集合的方法\"></a>根据指针偏移遍历集合的方法</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">5</span>]=&#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,arr[i]);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,i[arr]);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,*(arr+i));<span class=\"comment\">//arr+iarr的类型为int所以偏移int的i位</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------\\n\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span>*p=&amp;arr;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,*p++);<span class=\"comment\">//先算p++结果为*p后++</span></span><br></pre></td></tr></table></figure>\n<p>a[i]=*(a+i)</p>\n<p>*也起到降级别的能力</p>\n<p><img src=\"/2015/03/17/技术/2015-03-09-c语言7-指针/指针偏移法.png\" alt=\"指针偏移法\"></p>\n"},{"title":"c语言8-函数","date":"2015-03-18T15:41:56.000Z","_content":"\n## 指针偏移法\n使用范围：只针对连续的空间，不然指针偏移没有任何意义！\n因为指针的加减其实就是获取到该指针对应的数组的步长的加减！\n一级指针：公式推到：arr[i]=i[arr]=*(arr+i)  arr的数组的步长为int \n二级指针：公式推到：arr[i][j]=*(*(arr+i)+j)  arr的数组的步长为int[j] arr[j]的数组的步长为int\n\n## 函数的返回值\nc语言的返回值只有基本类型和指针类型，没有其他类型 \n\n## 将数组作为参数传递\n1.传递首元素指针和数组元素的数量\n2.*(arr+i)==arr[i]==i[arr]\n\n## 递归\n理解:其实就是方法自己调用自己，到达某一时刻后return，返回数据\n公式结构和书写结构:\n![公式结构和书写结构](公式结构和书写结构.png)\n\n## 获取一个范围内的随机数的方法\n```c\nint randomNum(intm,intn)\n{\n    srand(time(NULL));\n    intnum=rand();\n    intresult=num%(n-m)+m+1;//获取到m到n之间的随机数\n    printf(\"%d\\n\",result);\n}\n//产生30个不重复的随机数放到指数组中去。\nintarr[10];\nsrand(time(NULL));\ninti=0;\nwhile(i<30)\n{\n    intnum=rand()%(50-30)+30+1;\n    intresult=searchArr(arr,sizeof(arr)/sizeof(arr[0]),num);\n    if(!result)\n        continue;\n    else\n        arr[i++]=num;\n    }\n}\n```","source":"_posts/技术/2015-03-09-c语言8-函数.md","raw":"---\ntitle: c语言8-函数\ndate: 2015-03-18 23:41:56\ncategories: 技术\ntags: c语言\n---\n\n## 指针偏移法\n使用范围：只针对连续的空间，不然指针偏移没有任何意义！\n因为指针的加减其实就是获取到该指针对应的数组的步长的加减！\n一级指针：公式推到：arr[i]=i[arr]=*(arr+i)  arr的数组的步长为int \n二级指针：公式推到：arr[i][j]=*(*(arr+i)+j)  arr的数组的步长为int[j] arr[j]的数组的步长为int\n\n## 函数的返回值\nc语言的返回值只有基本类型和指针类型，没有其他类型 \n\n## 将数组作为参数传递\n1.传递首元素指针和数组元素的数量\n2.*(arr+i)==arr[i]==i[arr]\n\n## 递归\n理解:其实就是方法自己调用自己，到达某一时刻后return，返回数据\n公式结构和书写结构:\n![公式结构和书写结构](公式结构和书写结构.png)\n\n## 获取一个范围内的随机数的方法\n```c\nint randomNum(intm,intn)\n{\n    srand(time(NULL));\n    intnum=rand();\n    intresult=num%(n-m)+m+1;//获取到m到n之间的随机数\n    printf(\"%d\\n\",result);\n}\n//产生30个不重复的随机数放到指数组中去。\nintarr[10];\nsrand(time(NULL));\ninti=0;\nwhile(i<30)\n{\n    intnum=rand()%(50-30)+30+1;\n    intresult=searchArr(arr,sizeof(arr)/sizeof(arr[0]),num);\n    if(!result)\n        continue;\n    else\n        arr[i++]=num;\n    }\n}\n```","slug":"技术/2015-03-09-c语言8-函数","published":1,"updated":"2018-03-12T03:15:13.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4y00145oq869ncpbv9","content":"<h2 id=\"指针偏移法\"><a href=\"#指针偏移法\" class=\"headerlink\" title=\"指针偏移法\"></a>指针偏移法</h2><p>使用范围：只针对连续的空间，不然指针偏移没有任何意义！<br>因为指针的加减其实就是获取到该指针对应的数组的步长的加减！<br>一级指针：公式推到：arr[i]=i[arr]=<em>(arr+i)  arr的数组的步长为int<br>二级指针：公式推到：arr[i][j]=</em>(*(arr+i)+j)  arr的数组的步长为int[j] arr[j]的数组的步长为int</p>\n<h2 id=\"函数的返回值\"><a href=\"#函数的返回值\" class=\"headerlink\" title=\"函数的返回值\"></a>函数的返回值</h2><p>c语言的返回值只有基本类型和指针类型，没有其他类型 </p>\n<h2 id=\"将数组作为参数传递\"><a href=\"#将数组作为参数传递\" class=\"headerlink\" title=\"将数组作为参数传递\"></a>将数组作为参数传递</h2><p>1.传递首元素指针和数组元素的数量<br>2.*(arr+i)==arr[i]==i[arr]</p>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>理解:其实就是方法自己调用自己，到达某一时刻后return，返回数据<br>公式结构和书写结构:<br><img src=\"/2015/03/18/技术/2015-03-09-c语言8-函数/公式结构和书写结构.png\" alt=\"公式结构和书写结构\"></p>\n<h2 id=\"获取一个范围内的随机数的方法\"><a href=\"#获取一个范围内的随机数的方法\" class=\"headerlink\" title=\"获取一个范围内的随机数的方法\"></a>获取一个范围内的随机数的方法</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">randomNum</span><span class=\"params\">(intm,intn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    intnum=rand();</span><br><span class=\"line\">    intresult=num%(n-m)+m+<span class=\"number\">1</span>;<span class=\"comment\">//获取到m到n之间的随机数</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//产生30个不重复的随机数放到指数组中去。</span></span><br><span class=\"line\">intarr[<span class=\"number\">10</span>];</span><br><span class=\"line\">srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">inti=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i&lt;<span class=\"number\">30</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    intnum=rand()%(<span class=\"number\">50</span><span class=\"number\">-30</span>)+<span class=\"number\">30</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    intresult=searchArr(arr,<span class=\"keyword\">sizeof</span>(arr)/<span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]),num);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!result)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        arr[i++]=num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"指针偏移法\"><a href=\"#指针偏移法\" class=\"headerlink\" title=\"指针偏移法\"></a>指针偏移法</h2><p>使用范围：只针对连续的空间，不然指针偏移没有任何意义！<br>因为指针的加减其实就是获取到该指针对应的数组的步长的加减！<br>一级指针：公式推到：arr[i]=i[arr]=<em>(arr+i)  arr的数组的步长为int<br>二级指针：公式推到：arr[i][j]=</em>(*(arr+i)+j)  arr的数组的步长为int[j] arr[j]的数组的步长为int</p>\n<h2 id=\"函数的返回值\"><a href=\"#函数的返回值\" class=\"headerlink\" title=\"函数的返回值\"></a>函数的返回值</h2><p>c语言的返回值只有基本类型和指针类型，没有其他类型 </p>\n<h2 id=\"将数组作为参数传递\"><a href=\"#将数组作为参数传递\" class=\"headerlink\" title=\"将数组作为参数传递\"></a>将数组作为参数传递</h2><p>1.传递首元素指针和数组元素的数量<br>2.*(arr+i)==arr[i]==i[arr]</p>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>理解:其实就是方法自己调用自己，到达某一时刻后return，返回数据<br>公式结构和书写结构:<br><img src=\"/2015/03/18/技术/2015-03-09-c语言8-函数/公式结构和书写结构.png\" alt=\"公式结构和书写结构\"></p>\n<h2 id=\"获取一个范围内的随机数的方法\"><a href=\"#获取一个范围内的随机数的方法\" class=\"headerlink\" title=\"获取一个范围内的随机数的方法\"></a>获取一个范围内的随机数的方法</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">randomNum</span><span class=\"params\">(intm,intn)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    intnum=rand();</span><br><span class=\"line\">    intresult=num%(n-m)+m+<span class=\"number\">1</span>;<span class=\"comment\">//获取到m到n之间的随机数</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//产生30个不重复的随机数放到指数组中去。</span></span><br><span class=\"line\">intarr[<span class=\"number\">10</span>];</span><br><span class=\"line\">srand(time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">inti=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i&lt;<span class=\"number\">30</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    intnum=rand()%(<span class=\"number\">50</span><span class=\"number\">-30</span>)+<span class=\"number\">30</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    intresult=searchArr(arr,<span class=\"keyword\">sizeof</span>(arr)/<span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]),num);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!result)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        arr[i++]=num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"c语言9-变量作用域及修饰符","date":"2015-03-19T15:41:56.000Z","_content":"## 修饰符关键字\n\n### auto\n修饰局部变量，所有的局部变量的默认修饰符，然后因为数据是存储在栈空间（系统随机分配），所以如果不初始化变量，会产生一段随机的内容\n\n### register\n修饰局部变量，被修饰的变量数据会存储在cpu的寄存器，从而达到提高处理效率的能力，但是注意cpu寄存器的数量有限，所以我们一般不使用，如果不初始化变量，会产生一段随机的内容，一般用于多文件编程，但是也容易造成命名污染，但是用static可以解决，因为被static修饰的变量只能作为该文件的全局变量\n\n备注:一般被register修饰的变量在优化期间，可能会自动处理成auto\n\n### extern\n修饰全局变量，被修饰的变量，可以在变得文件使用，作用发生在链接时期\n\n### static\n修饰全局或者静态变量，修改了变量的生命周期，使变量的生命周期变成从程序启动到程序结束，并且变量只能被初始化一次，如果未初始化，系统会默认将变量的数据设置为0，注意被static修饰的变量存储的区域和其他变量存储的区域不同，所以我们可以将被static修饰的变量当作缓存使用","source":"_posts/技术/2015-03-09-c语言9-变量作用域及修饰符.md","raw":"---\ntitle: c语言9-变量作用域及修饰符\ndate: 2015-03-19 23:41:56\ncategories: 技术\ntags: c语言\n---\n## 修饰符关键字\n\n### auto\n修饰局部变量，所有的局部变量的默认修饰符，然后因为数据是存储在栈空间（系统随机分配），所以如果不初始化变量，会产生一段随机的内容\n\n### register\n修饰局部变量，被修饰的变量数据会存储在cpu的寄存器，从而达到提高处理效率的能力，但是注意cpu寄存器的数量有限，所以我们一般不使用，如果不初始化变量，会产生一段随机的内容，一般用于多文件编程，但是也容易造成命名污染，但是用static可以解决，因为被static修饰的变量只能作为该文件的全局变量\n\n备注:一般被register修饰的变量在优化期间，可能会自动处理成auto\n\n### extern\n修饰全局变量，被修饰的变量，可以在变得文件使用，作用发生在链接时期\n\n### static\n修饰全局或者静态变量，修改了变量的生命周期，使变量的生命周期变成从程序启动到程序结束，并且变量只能被初始化一次，如果未初始化，系统会默认将变量的数据设置为0，注意被static修饰的变量存储的区域和其他变量存储的区域不同，所以我们可以将被static修饰的变量当作缓存使用","slug":"技术/2015-03-09-c语言9-变量作用域及修饰符","published":1,"updated":"2018-03-12T03:15:24.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj4z00175oq89afy1qo6","content":"<h2 id=\"修饰符关键字\"><a href=\"#修饰符关键字\" class=\"headerlink\" title=\"修饰符关键字\"></a>修饰符关键字</h2><h3 id=\"auto\"><a href=\"#auto\" class=\"headerlink\" title=\"auto\"></a>auto</h3><p>修饰局部变量，所有的局部变量的默认修饰符，然后因为数据是存储在栈空间（系统随机分配），所以如果不初始化变量，会产生一段随机的内容</p>\n<h3 id=\"register\"><a href=\"#register\" class=\"headerlink\" title=\"register\"></a>register</h3><p>修饰局部变量，被修饰的变量数据会存储在cpu的寄存器，从而达到提高处理效率的能力，但是注意cpu寄存器的数量有限，所以我们一般不使用，如果不初始化变量，会产生一段随机的内容，一般用于多文件编程，但是也容易造成命名污染，但是用static可以解决，因为被static修饰的变量只能作为该文件的全局变量</p>\n<p>备注:一般被register修饰的变量在优化期间，可能会自动处理成auto</p>\n<h3 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h3><p>修饰全局变量，被修饰的变量，可以在变得文件使用，作用发生在链接时期</p>\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><p>修饰全局或者静态变量，修改了变量的生命周期，使变量的生命周期变成从程序启动到程序结束，并且变量只能被初始化一次，如果未初始化，系统会默认将变量的数据设置为0，注意被static修饰的变量存储的区域和其他变量存储的区域不同，所以我们可以将被static修饰的变量当作缓存使用</p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"修饰符关键字\"><a href=\"#修饰符关键字\" class=\"headerlink\" title=\"修饰符关键字\"></a>修饰符关键字</h2><h3 id=\"auto\"><a href=\"#auto\" class=\"headerlink\" title=\"auto\"></a>auto</h3><p>修饰局部变量，所有的局部变量的默认修饰符，然后因为数据是存储在栈空间（系统随机分配），所以如果不初始化变量，会产生一段随机的内容</p>\n<h3 id=\"register\"><a href=\"#register\" class=\"headerlink\" title=\"register\"></a>register</h3><p>修饰局部变量，被修饰的变量数据会存储在cpu的寄存器，从而达到提高处理效率的能力，但是注意cpu寄存器的数量有限，所以我们一般不使用，如果不初始化变量，会产生一段随机的内容，一般用于多文件编程，但是也容易造成命名污染，但是用static可以解决，因为被static修饰的变量只能作为该文件的全局变量</p>\n<p>备注:一般被register修饰的变量在优化期间，可能会自动处理成auto</p>\n<h3 id=\"extern\"><a href=\"#extern\" class=\"headerlink\" title=\"extern\"></a>extern</h3><p>修饰全局变量，被修饰的变量，可以在变得文件使用，作用发生在链接时期</p>\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h3><p>修饰全局或者静态变量，修改了变量的生命周期，使变量的生命周期变成从程序启动到程序结束，并且变量只能被初始化一次，如果未初始化，系统会默认将变量的数据设置为0，注意被static修饰的变量存储的区域和其他变量存储的区域不同，所以我们可以将被static修饰的变量当作缓存使用</p>\n"},{"title":"HEXO博客","date":"2013-07-13T12:46:25.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n     \n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/技术/2015-04-07-HEXO博客.md","raw":"---\ntitle: HEXO博客\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: 工具/插件\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n     \n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"技术/2015-04-07-HEXO博客","published":1,"updated":"2018-03-09T08:59:14.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj51001a5oq8wccbph6q","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"HUGO博客","date":"2013-07-13T12:46:25.000Z","_content":"\n## Step 1.配置Hugo：\n\n在github[下载](https://github.com/gohugoio/hugo/releases)hugo release版本  [<font color=red>(点击进入下载页)</font>](https://github.com/gohugoio/hugo/releases)\n将hugo.exe路径配置到环境变量\n有想法的朋友也可以下载源码编译\n\n\n## Step 2.生成站点：\n使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\n\n```\n$ hugo new site /path/to/site\n```\n$ cd /path/to/site\n站点目录结构：\n\n  * ▸ archetypes/\n  * ▸ content/\n  * ▸ layouts/\n  * ▸ static/\n    config.toml\n\n\n## Step 3.创建文章：\n创建一个 about 页面,使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\n\n```\n$ hugo new about.md\n```\nabout.md 自动生成到了 content/about.md ，打开 about.md 看下：\n\n```\n+++\ndate = \"2015-10-25T08:36:54-07:00\"\ndraft = true\ntitle = \"about\"\n+++\n```\n\n正文内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 --- 标记）或者 JSON 格式。\n\n创建第一篇文章，放到 post 目录，方便之后生成聚合页面。\n\n```\n$ hugo new post/first.md\n```\n\n打开编辑 post/first.md ：\n\n```\n---\ndate: \"2015-10-25T08:36:54-07:00\"\ntitle: \"first\"\n---\n```\n\n## Step 4.创建 themes 目录：\n```\n$ cd themes\n$ git clone https://github.com/aubm/hugo-code-editor-theme.git\n```\n运行Hugo\n在你的站点根目录执行 Hugo 命令进行调试：\n\n```\n$ hugo server --theme=hugo-code-editor-theme --buildDrafts\n```\n（注明：v0.15 版本之后，不再需要使用 --watchydeh 参数了）\n\n浏览器里打开： http://localhost:1313\n\n\n## Step 5.部署：\n假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：GuoXingGitHub.github.io （GuoXingGitHub替换为你的github用户名）。\n\n在站点根目录执行 Hugo 命令生成最终页面：\n```\n$ hugo --theme=hugo-code-editor-theme --baseUrl=\"https://GuoXingGitHub.github.io\"\n```\n<font color=red>(注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成)</font>\n\n如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。\n\n最后就能通过https://GuoXingGitHub.github.io/ 浏览了\n\n\n## Step 6.帮助：\n\n* hugo中文文档: [http://www.gohugo.org/](http://www.gohugo.org/)\n* hugo官网: [http://gohugo.io/](http://gohugo.io/)\n\n\n","source":"_posts/技术/2015-04-07-HUGO博客.md","raw":"---\ntitle: HUGO博客\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: 工具/插件\n---\n\n## Step 1.配置Hugo：\n\n在github[下载](https://github.com/gohugoio/hugo/releases)hugo release版本  [<font color=red>(点击进入下载页)</font>](https://github.com/gohugoio/hugo/releases)\n将hugo.exe路径配置到环境变量\n有想法的朋友也可以下载源码编译\n\n\n## Step 2.生成站点：\n使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\n\n```\n$ hugo new site /path/to/site\n```\n$ cd /path/to/site\n站点目录结构：\n\n  * ▸ archetypes/\n  * ▸ content/\n  * ▸ layouts/\n  * ▸ static/\n    config.toml\n\n\n## Step 3.创建文章：\n创建一个 about 页面,使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\n\n```\n$ hugo new about.md\n```\nabout.md 自动生成到了 content/about.md ，打开 about.md 看下：\n\n```\n+++\ndate = \"2015-10-25T08:36:54-07:00\"\ndraft = true\ntitle = \"about\"\n+++\n```\n\n正文内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 --- 标记）或者 JSON 格式。\n\n创建第一篇文章，放到 post 目录，方便之后生成聚合页面。\n\n```\n$ hugo new post/first.md\n```\n\n打开编辑 post/first.md ：\n\n```\n---\ndate: \"2015-10-25T08:36:54-07:00\"\ntitle: \"first\"\n---\n```\n\n## Step 4.创建 themes 目录：\n```\n$ cd themes\n$ git clone https://github.com/aubm/hugo-code-editor-theme.git\n```\n运行Hugo\n在你的站点根目录执行 Hugo 命令进行调试：\n\n```\n$ hugo server --theme=hugo-code-editor-theme --buildDrafts\n```\n（注明：v0.15 版本之后，不再需要使用 --watchydeh 参数了）\n\n浏览器里打开： http://localhost:1313\n\n\n## Step 5.部署：\n假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：GuoXingGitHub.github.io （GuoXingGitHub替换为你的github用户名）。\n\n在站点根目录执行 Hugo 命令生成最终页面：\n```\n$ hugo --theme=hugo-code-editor-theme --baseUrl=\"https://GuoXingGitHub.github.io\"\n```\n<font color=red>(注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成)</font>\n\n如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。\n\n最后就能通过https://GuoXingGitHub.github.io/ 浏览了\n\n\n## Step 6.帮助：\n\n* hugo中文文档: [http://www.gohugo.org/](http://www.gohugo.org/)\n* hugo官网: [http://gohugo.io/](http://gohugo.io/)\n\n\n","slug":"技术/2015-04-07-HUGO博客","published":1,"updated":"2018-03-10T01:48:52.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj52001d5oq8ms9r6lk4","content":"<h2 id=\"Step-1-配置Hugo：\"><a href=\"#Step-1-配置Hugo：\" class=\"headerlink\" title=\"Step 1.配置Hugo：\"></a>Step 1.配置Hugo：</h2><p>在github<a href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\" rel=\"noopener\">下载</a>hugo release版本  <a href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\" rel=\"noopener\"><font color=\"red\">(点击进入下载页)</font></a><br>将hugo.exe路径配置到环境变量<br>有想法的朋友也可以下载源码编译</p>\n<h2 id=\"Step-2-生成站点：\"><a href=\"#Step-2-生成站点：\" class=\"headerlink\" title=\"Step 2.生成站点：\"></a>Step 2.生成站点：</h2><p>使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new site /path/to/site</span><br></pre></td></tr></table></figure>\n<p>$ cd /path/to/site<br>站点目录结构：</p>\n<ul>\n<li>▸ archetypes/</li>\n<li>▸ content/</li>\n<li>▸ layouts/</li>\n<li>▸ static/<br>config.toml</li>\n</ul>\n<h2 id=\"Step-3-创建文章：\"><a href=\"#Step-3-创建文章：\" class=\"headerlink\" title=\"Step 3.创建文章：\"></a>Step 3.创建文章：</h2><p>创建一个 about 页面,使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new about.md</span><br></pre></td></tr></table></figure>\n<p>about.md 自动生成到了 content/about.md ，打开 about.md 看下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+++</span><br><span class=\"line\">date = &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class=\"line\">draft = true</span><br><span class=\"line\">title = &quot;about&quot;</span><br><span class=\"line\">+++</span><br></pre></td></tr></table></figure>\n<p>正文内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 — 标记）或者 JSON 格式。</p>\n<p>创建第一篇文章，放到 post 目录，方便之后生成聚合页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new post/first.md</span><br></pre></td></tr></table></figure>\n<p>打开编辑 post/first.md ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">date: &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class=\"line\">title: &quot;first&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-4-创建-themes-目录：\"><a href=\"#Step-4-创建-themes-目录：\" class=\"headerlink\" title=\"Step 4.创建 themes 目录：\"></a>Step 4.创建 themes 目录：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd themes</span><br><span class=\"line\">$ git clone https://github.com/aubm/hugo-code-editor-theme.git</span><br></pre></td></tr></table></figure>\n<p>运行Hugo<br>在你的站点根目录执行 Hugo 命令进行调试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo server --theme=hugo-code-editor-theme --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>（注明：v0.15 版本之后，不再需要使用 –watchydeh 参数了）</p>\n<p>浏览器里打开： <a href=\"http://localhost:1313\" target=\"_blank\" rel=\"noopener\">http://localhost:1313</a></p>\n<h2 id=\"Step-5-部署：\"><a href=\"#Step-5-部署：\" class=\"headerlink\" title=\"Step 5.部署：\"></a>Step 5.部署：</h2><p>假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：GuoXingGitHub.github.io （GuoXingGitHub替换为你的github用户名）。</p>\n<p>在站点根目录执行 Hugo 命令生成最终页面：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo --theme=hugo-code-editor-theme --baseUrl=&quot;https://GuoXingGitHub.github.io&quot;</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">(注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成)</font>\n\n<p>如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。</p>\n<p>最后就能通过<a href=\"https://GuoXingGitHub.github.io/\" target=\"_blank\" rel=\"noopener\">https://GuoXingGitHub.github.io/</a> 浏览了</p>\n<h2 id=\"Step-6-帮助：\"><a href=\"#Step-6-帮助：\" class=\"headerlink\" title=\"Step 6.帮助：\"></a>Step 6.帮助：</h2><ul>\n<li>hugo中文文档: <a href=\"http://www.gohugo.org/\" target=\"_blank\" rel=\"noopener\">http://www.gohugo.org/</a></li>\n<li>hugo官网: <a href=\"http://gohugo.io/\" target=\"_blank\" rel=\"noopener\">http://gohugo.io/</a></li>\n</ul>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"Step-1-配置Hugo：\"><a href=\"#Step-1-配置Hugo：\" class=\"headerlink\" title=\"Step 1.配置Hugo：\"></a>Step 1.配置Hugo：</h2><p>在github<a href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\" rel=\"noopener\">下载</a>hugo release版本  <a href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\" rel=\"noopener\"><font color=\"red\">(点击进入下载页)</font></a><br>将hugo.exe路径配置到环境变量<br>有想法的朋友也可以下载源码编译</p>\n<h2 id=\"Step-2-生成站点：\"><a href=\"#Step-2-生成站点：\" class=\"headerlink\" title=\"Step 2.生成站点：\"></a>Step 2.生成站点：</h2><p>使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new site /path/to/site</span><br></pre></td></tr></table></figure>\n<p>$ cd /path/to/site<br>站点目录结构：</p>\n<ul>\n<li>▸ archetypes/</li>\n<li>▸ content/</li>\n<li>▸ layouts/</li>\n<li>▸ static/<br>config.toml</li>\n</ul>\n<h2 id=\"Step-3-创建文章：\"><a href=\"#Step-3-创建文章：\" class=\"headerlink\" title=\"Step 3.创建文章：\"></a>Step 3.创建文章：</h2><p>创建一个 about 页面,使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new about.md</span><br></pre></td></tr></table></figure>\n<p>about.md 自动生成到了 content/about.md ，打开 about.md 看下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+++</span><br><span class=\"line\">date = &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class=\"line\">draft = true</span><br><span class=\"line\">title = &quot;about&quot;</span><br><span class=\"line\">+++</span><br></pre></td></tr></table></figure>\n<p>正文内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 — 标记）或者 JSON 格式。</p>\n<p>创建第一篇文章，放到 post 目录，方便之后生成聚合页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new post/first.md</span><br></pre></td></tr></table></figure>\n<p>打开编辑 post/first.md ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">date: &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class=\"line\">title: &quot;first&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-4-创建-themes-目录：\"><a href=\"#Step-4-创建-themes-目录：\" class=\"headerlink\" title=\"Step 4.创建 themes 目录：\"></a>Step 4.创建 themes 目录：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd themes</span><br><span class=\"line\">$ git clone https://github.com/aubm/hugo-code-editor-theme.git</span><br></pre></td></tr></table></figure>\n<p>运行Hugo<br>在你的站点根目录执行 Hugo 命令进行调试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo server --theme=hugo-code-editor-theme --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>（注明：v0.15 版本之后，不再需要使用 –watchydeh 参数了）</p>\n<p>浏览器里打开： <a href=\"http://localhost:1313\" target=\"_blank\" rel=\"noopener\">http://localhost:1313</a></p>\n<h2 id=\"Step-5-部署：\"><a href=\"#Step-5-部署：\" class=\"headerlink\" title=\"Step 5.部署：\"></a>Step 5.部署：</h2><p>假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：GuoXingGitHub.github.io （GuoXingGitHub替换为你的github用户名）。</p>\n<p>在站点根目录执行 Hugo 命令生成最终页面：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo --theme=hugo-code-editor-theme --baseUrl=&quot;https://GuoXingGitHub.github.io&quot;</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">(注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成)</font>\n\n<p>如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。</p>\n<p>最后就能通过<a href=\"https://GuoXingGitHub.github.io/\" target=\"_blank\" rel=\"noopener\">https://GuoXingGitHub.github.io/</a> 浏览了</p>\n<h2 id=\"Step-6-帮助：\"><a href=\"#Step-6-帮助：\" class=\"headerlink\" title=\"Step 6.帮助：\"></a>Step 6.帮助：</h2><ul>\n<li>hugo中文文档: <a href=\"http://www.gohugo.org/\" target=\"_blank\" rel=\"noopener\">http://www.gohugo.org/</a></li>\n<li>hugo官网: <a href=\"http://gohugo.io/\" target=\"_blank\" rel=\"noopener\">http://gohugo.io/</a></li>\n</ul>\n"},{"title":"c语言提高2-二维数组,隐式类型转化,数组指针,指针数组,二级指针","date":"2016-04-10T04:30:13.000Z","_content":"\n## 备注\n### 备注1\n强转为int或者char类型则是单纯的数值上的加减，都是每个地址相隔的个数大小，然后每个地址相隔一\n强转为int*则是地址上的加减，相隔的是每个int的数量\n\n### 备注2\n六进制和八进制在字符串中表现的效果：\n1. 8进制：\"\\0数字数字\"：格式是\\+0后面的八进制数据， 如果说中间出现截断行为（中间出现不是8进制的字符）的话，则后面的都算是单个字符了，注意八进制最多包含0后面两位\n2. 16进制：格式：\\+x+十六进制数表示一个字节：如果说中间出现截断行为（中间出现不是16进制的字符）的话，则后面的都算是单个字符了\n\n```c\n#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n    char str1[]=\"\\0373xei\";//037算一个字节  后面的依次每个字符算一个字节\n    //char str1[]=\"\\0383xei\";//03算一个字节 后面的依次每个字符算一个字节\n    //char str2[]=\"\\x2aet76543\";//x2ae 算一个字节  后面的依次每个字符算一个字节\n    char str2[]=\"\\x3456aeccaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";//这里只有一个字节因为全部都是十六进制的数据\n\tprintf(\"%d\\n\",strlen(str1));\n    printf(\"%d\\n\",strlen(str2));\n    return 0;\n}\n\n```\n\n## 类型转化(隐式)\n小类型与大类型所运算或者逻辑时会默认转化为大类型，有符号的与无符号的会默认转化为无符号的\n作用：防止数据丢失的一种机制\n备注：数据本身是没有意义的，只要是要看我们是怎样去解释他\n1：小类型->大类型：低位对齐\n2：大类型->小类型：低位对齐，改变后注意两个类型的数据的符号是否相同，该过程一定会发生截断行为，但是数据是否丢失，不一定\n3：有符号->无符号：注意负数转化为对应的无符号数可能对应一个很大的数（该过程中一定要注意类型），比如int类型的-1\n例子：这里输出a<b 因为无符号和有符号进行数据或者逻辑运算的时候都会转化为无符号数运算，然后-1的无符号数比a大，所以输出\n```c\nunsigned int a=20;\nint b=-1;\nif(a>b)//都会默认转化为无符号数-1的无符号数很大\n    printf(\"a>b\");\nelse\n    printf(\"a<b\");\nreturn 0;\n```\n\n\n## 二维数组\n1. 理解二维数组或者一维多维数组的地址加减的方法：全部将数组名理解为一维数组来解决，而加减的个数就是步长（类型）的位数\n2. 二维数组的在逻辑上理解是平面的，但是在内存上的物理存储是线性的，所以我们可以用线性的（一维）的方式来遍历二维数组，只是改变了类型（步长）\n3. 二维数组的传参：行可以少，列不能少\n\n### 代码\n[二维数组](二维数组.c)\n\n## 数组指针\n指向数组的指针，本质是指针，所以专门用来接收数组的地址\n1：无论一维还是二维数组名，本质上都是数组指针，只不过是类型不同而已\n2：指针的运算1：地址的运算其实是计算相隔指定类型的个数2：转化为基本类型则是计算相隔的字节数\n3：数值指针传参：不管传递几维数组的数组名，我们都可以理解为将该数组的数组指针传递过去\n4：数组指针型参的推演：int [4] * arr (编译不过)=>int * arr[4](指针数组)=>int (*arr)[4](数组指针)\n\n```c\n#include <stdio.h>\n\n//数组指针：定义：本质上都是指针，只不过指向是指向数组\n//常见的数组指针：不管是几维数组，他们的数组名本质上都是数组指针：常见错误：一级数组取地址等同于数组指针，不是二级指针\nint main(void)\n{\n    int array[10]={1,2,3,4,5,5,6,6,4,5};\n    int (*p)[10] =array;\n    for(int i =0 ;i<10;i++)\n        printf(\"%d\\n\",array);\n    return 0;\n}\n\n```\n\n## 指针数组\n数组里面的值都是指针，本质是数组\n1：备注：我们遍历指针数组的时候常常在数组的末尾加上NULL，用该标识来表示结束\n2：指针数组的数组名都是二级指针\n\n```c\n#include <stdio.h>\n\nvoid traveseArray(char ** array,int n)//array就是一个实参的数据 实参是地址 所以该形参也是地址\n{\n    for(int i=0;i<n;i++)\n        printf(\"%s\\n\",*(array+i));\n}\n\n//常见的处理指针数组的方法  在数组的末尾加上NULL作为结束标识\nvoid traveseArray2(char ** array,int n)//array就是一个实参的数据 实参是地址 所以该形参也是地址\n{\n     while(*array)\n        printf(\"%s\\n\",*(array++));\n}\nint main(void)\n{\n    char * pArray[] = {\"apple\",\"pear\",\"banana\",\"orange\",\"pineApple\",NULL};\n    traveseArray2(&pArray,5);//指针数组\n    return 0;\n}\n\n```\n\n\n## 二级指针\n指向指针的指针，常用于字符数组\n1：n级指针可以改变n-1下所有的指针指向和数据\n2：不管几维数组的指针步长都是4个字节\n\n### 代码例子\n[二级指针](二级指针.c)\n","source":"_posts/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针.md","raw":"---\ntitle: 'c语言提高2-二维数组,隐式类型转化,数组指针,指针数组,二级指针'\ndate: 2016-04-10 12:30:13\ncategories: 技术\ntags: c语言\n---\n\n## 备注\n### 备注1\n强转为int或者char类型则是单纯的数值上的加减，都是每个地址相隔的个数大小，然后每个地址相隔一\n强转为int*则是地址上的加减，相隔的是每个int的数量\n\n### 备注2\n六进制和八进制在字符串中表现的效果：\n1. 8进制：\"\\0数字数字\"：格式是\\+0后面的八进制数据， 如果说中间出现截断行为（中间出现不是8进制的字符）的话，则后面的都算是单个字符了，注意八进制最多包含0后面两位\n2. 16进制：格式：\\+x+十六进制数表示一个字节：如果说中间出现截断行为（中间出现不是16进制的字符）的话，则后面的都算是单个字符了\n\n```c\n#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n    char str1[]=\"\\0373xei\";//037算一个字节  后面的依次每个字符算一个字节\n    //char str1[]=\"\\0383xei\";//03算一个字节 后面的依次每个字符算一个字节\n    //char str2[]=\"\\x2aet76543\";//x2ae 算一个字节  后面的依次每个字符算一个字节\n    char str2[]=\"\\x3456aeccaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";//这里只有一个字节因为全部都是十六进制的数据\n\tprintf(\"%d\\n\",strlen(str1));\n    printf(\"%d\\n\",strlen(str2));\n    return 0;\n}\n\n```\n\n## 类型转化(隐式)\n小类型与大类型所运算或者逻辑时会默认转化为大类型，有符号的与无符号的会默认转化为无符号的\n作用：防止数据丢失的一种机制\n备注：数据本身是没有意义的，只要是要看我们是怎样去解释他\n1：小类型->大类型：低位对齐\n2：大类型->小类型：低位对齐，改变后注意两个类型的数据的符号是否相同，该过程一定会发生截断行为，但是数据是否丢失，不一定\n3：有符号->无符号：注意负数转化为对应的无符号数可能对应一个很大的数（该过程中一定要注意类型），比如int类型的-1\n例子：这里输出a<b 因为无符号和有符号进行数据或者逻辑运算的时候都会转化为无符号数运算，然后-1的无符号数比a大，所以输出\n```c\nunsigned int a=20;\nint b=-1;\nif(a>b)//都会默认转化为无符号数-1的无符号数很大\n    printf(\"a>b\");\nelse\n    printf(\"a<b\");\nreturn 0;\n```\n\n\n## 二维数组\n1. 理解二维数组或者一维多维数组的地址加减的方法：全部将数组名理解为一维数组来解决，而加减的个数就是步长（类型）的位数\n2. 二维数组的在逻辑上理解是平面的，但是在内存上的物理存储是线性的，所以我们可以用线性的（一维）的方式来遍历二维数组，只是改变了类型（步长）\n3. 二维数组的传参：行可以少，列不能少\n\n### 代码\n[二维数组](二维数组.c)\n\n## 数组指针\n指向数组的指针，本质是指针，所以专门用来接收数组的地址\n1：无论一维还是二维数组名，本质上都是数组指针，只不过是类型不同而已\n2：指针的运算1：地址的运算其实是计算相隔指定类型的个数2：转化为基本类型则是计算相隔的字节数\n3：数值指针传参：不管传递几维数组的数组名，我们都可以理解为将该数组的数组指针传递过去\n4：数组指针型参的推演：int [4] * arr (编译不过)=>int * arr[4](指针数组)=>int (*arr)[4](数组指针)\n\n```c\n#include <stdio.h>\n\n//数组指针：定义：本质上都是指针，只不过指向是指向数组\n//常见的数组指针：不管是几维数组，他们的数组名本质上都是数组指针：常见错误：一级数组取地址等同于数组指针，不是二级指针\nint main(void)\n{\n    int array[10]={1,2,3,4,5,5,6,6,4,5};\n    int (*p)[10] =array;\n    for(int i =0 ;i<10;i++)\n        printf(\"%d\\n\",array);\n    return 0;\n}\n\n```\n\n## 指针数组\n数组里面的值都是指针，本质是数组\n1：备注：我们遍历指针数组的时候常常在数组的末尾加上NULL，用该标识来表示结束\n2：指针数组的数组名都是二级指针\n\n```c\n#include <stdio.h>\n\nvoid traveseArray(char ** array,int n)//array就是一个实参的数据 实参是地址 所以该形参也是地址\n{\n    for(int i=0;i<n;i++)\n        printf(\"%s\\n\",*(array+i));\n}\n\n//常见的处理指针数组的方法  在数组的末尾加上NULL作为结束标识\nvoid traveseArray2(char ** array,int n)//array就是一个实参的数据 实参是地址 所以该形参也是地址\n{\n     while(*array)\n        printf(\"%s\\n\",*(array++));\n}\nint main(void)\n{\n    char * pArray[] = {\"apple\",\"pear\",\"banana\",\"orange\",\"pineApple\",NULL};\n    traveseArray2(&pArray,5);//指针数组\n    return 0;\n}\n\n```\n\n\n## 二级指针\n指向指针的指针，常用于字符数组\n1：n级指针可以改变n-1下所有的指针指向和数据\n2：不管几维数组的指针步长都是4个字节\n\n### 代码例子\n[二级指针](二级指针.c)\n","slug":"技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针","published":1,"updated":"2018-03-12T06:31:36.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj54001h5oq8np9vdu2o","content":"<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><h3 id=\"备注1\"><a href=\"#备注1\" class=\"headerlink\" title=\"备注1\"></a>备注1</h3><p>强转为int或者char类型则是单纯的数值上的加减，都是每个地址相隔的个数大小，然后每个地址相隔一<br>强转为int*则是地址上的加减，相隔的是每个int的数量</p>\n<h3 id=\"备注2\"><a href=\"#备注2\" class=\"headerlink\" title=\"备注2\"></a>备注2</h3><p>六进制和八进制在字符串中表现的效果：</p>\n<ol>\n<li>8进制：”\\0数字数字”：格式是+0后面的八进制数据， 如果说中间出现截断行为（中间出现不是8进制的字符）的话，则后面的都算是单个字符了，注意八进制最多包含0后面两位</li>\n<li>16进制：格式：+x+十六进制数表示一个字节：如果说中间出现截断行为（中间出现不是16进制的字符）的话，则后面的都算是单个字符了</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> str1[]=<span class=\"string\">\"\\0373xei\"</span>;<span class=\"comment\">//037算一个字节  后面的依次每个字符算一个字节</span></span><br><span class=\"line\">    <span class=\"comment\">//char str1[]=\"\\0383xei\";//03算一个字节 后面的依次每个字符算一个字节</span></span><br><span class=\"line\">    <span class=\"comment\">//char str2[]=\"\\x2aet76543\";//x2ae 算一个字节  后面的依次每个字符算一个字节</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> str2[]=<span class=\"string\">\"\\x3456aeccaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"</span>;<span class=\"comment\">//这里只有一个字节因为全部都是十六进制的数据</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,<span class=\"built_in\">strlen</span>(str1));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,<span class=\"built_in\">strlen</span>(str2));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型转化-隐式\"><a href=\"#类型转化-隐式\" class=\"headerlink\" title=\"类型转化(隐式)\"></a>类型转化(隐式)</h2><p>小类型与大类型所运算或者逻辑时会默认转化为大类型，有符号的与无符号的会默认转化为无符号的<br>作用：防止数据丢失的一种机制<br>备注：数据本身是没有意义的，只要是要看我们是怎样去解释他<br>1：小类型-&gt;大类型：低位对齐<br>2：大类型-&gt;小类型：低位对齐，改变后注意两个类型的数据的符号是否相同，该过程一定会发生截断行为，但是数据是否丢失，不一定<br>3：有符号-&gt;无符号：注意负数转化为对应的无符号数可能对应一个很大的数（该过程中一定要注意类型），比如int类型的-1<br>例子：这里输出a&lt;b 因为无符号和有符号进行数据或者逻辑运算的时候都会转化为无符号数运算，然后-1的无符号数比a大，所以输出<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> a=<span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b=<span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a&gt;b)<span class=\"comment\">//都会默认转化为无符号数-1的无符号数很大</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"a&gt;b\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"a&lt;b\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h2><ol>\n<li>理解二维数组或者一维多维数组的地址加减的方法：全部将数组名理解为一维数组来解决，而加减的个数就是步长（类型）的位数</li>\n<li>二维数组的在逻辑上理解是平面的，但是在内存上的物理存储是线性的，所以我们可以用线性的（一维）的方式来遍历二维数组，只是改变了类型（步长）</li>\n<li>二维数组的传参：行可以少，列不能少</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><a href=\"二维数组.c\">二维数组</a></p>\n<h2 id=\"数组指针\"><a href=\"#数组指针\" class=\"headerlink\" title=\"数组指针\"></a>数组指针</h2><p>指向数组的指针，本质是指针，所以专门用来接收数组的地址<br>1：无论一维还是二维数组名，本质上都是数组指针，只不过是类型不同而已<br>2：指针的运算1：地址的运算其实是计算相隔指定类型的个数2：转化为基本类型则是计算相隔的字节数<br>3：数值指针传参：不管传递几维数组的数组名，我们都可以理解为将该数组的数组指针传递过去<br>4：数组指针型参的推演：int [4] <em> arr (编译不过)=&gt;int </em> arr<a href=\"指针数组\">4</a>=&gt;int (*arr)<a href=\"数组指针\">4</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组指针：定义：本质上都是指针，只不过指向是指向数组</span></span><br><span class=\"line\"><span class=\"comment\">//常见的数组指针：不管是几维数组，他们的数组名本质上都是数组指针：常见错误：一级数组取地址等同于数组指针，不是二级指针</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*p)[<span class=\"number\">10</span>] =<span class=\"built_in\">array</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span> ;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"指针数组\"><a href=\"#指针数组\" class=\"headerlink\" title=\"指针数组\"></a>指针数组</h2><p>数组里面的值都是指针，本质是数组<br>1：备注：我们遍历指针数组的时候常常在数组的末尾加上NULL，用该标识来表示结束<br>2：指针数组的数组名都是二级指针</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traveseArray</span><span class=\"params\">(<span class=\"keyword\">char</span> ** <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> n)</span><span class=\"comment\">//array就是一个实参的数据 实参是地址 所以该形参也是地址</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,*(<span class=\"built_in\">array</span>+i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//常见的处理指针数组的方法  在数组的末尾加上NULL作为结束标识</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traveseArray2</span><span class=\"params\">(<span class=\"keyword\">char</span> ** <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> n)</span><span class=\"comment\">//array就是一个实参的数据 实参是地址 所以该形参也是地址</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">while</span>(*<span class=\"built_in\">array</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,*(<span class=\"built_in\">array</span>++));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * pArray[] = &#123;<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"pear\"</span>,<span class=\"string\">\"banana\"</span>,<span class=\"string\">\"orange\"</span>,<span class=\"string\">\"pineApple\"</span>,<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">    traveseArray2(&amp;pArray,<span class=\"number\">5</span>);<span class=\"comment\">//指针数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二级指针\"><a href=\"#二级指针\" class=\"headerlink\" title=\"二级指针\"></a>二级指针</h2><p>指向指针的指针，常用于字符数组<br>1：n级指针可以改变n-1下所有的指针指向和数据<br>2：不管几维数组的指针步长都是4个字节</p>\n<h3 id=\"代码例子\"><a href=\"#代码例子\" class=\"headerlink\" title=\"代码例子\"></a>代码例子</h3><p><a href=\"二级指针.c\">二级指针</a></p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><h3 id=\"备注1\"><a href=\"#备注1\" class=\"headerlink\" title=\"备注1\"></a>备注1</h3><p>强转为int或者char类型则是单纯的数值上的加减，都是每个地址相隔的个数大小，然后每个地址相隔一<br>强转为int*则是地址上的加减，相隔的是每个int的数量</p>\n<h3 id=\"备注2\"><a href=\"#备注2\" class=\"headerlink\" title=\"备注2\"></a>备注2</h3><p>六进制和八进制在字符串中表现的效果：</p>\n<ol>\n<li>8进制：”\\0数字数字”：格式是+0后面的八进制数据， 如果说中间出现截断行为（中间出现不是8进制的字符）的话，则后面的都算是单个字符了，注意八进制最多包含0后面两位</li>\n<li>16进制：格式：+x+十六进制数表示一个字节：如果说中间出现截断行为（中间出现不是16进制的字符）的话，则后面的都算是单个字符了</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> str1[]=<span class=\"string\">\"\\0373xei\"</span>;<span class=\"comment\">//037算一个字节  后面的依次每个字符算一个字节</span></span><br><span class=\"line\">    <span class=\"comment\">//char str1[]=\"\\0383xei\";//03算一个字节 后面的依次每个字符算一个字节</span></span><br><span class=\"line\">    <span class=\"comment\">//char str2[]=\"\\x2aet76543\";//x2ae 算一个字节  后面的依次每个字符算一个字节</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> str2[]=<span class=\"string\">\"\\x3456aeccaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"</span>;<span class=\"comment\">//这里只有一个字节因为全部都是十六进制的数据</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,<span class=\"built_in\">strlen</span>(str1));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,<span class=\"built_in\">strlen</span>(str2));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型转化-隐式\"><a href=\"#类型转化-隐式\" class=\"headerlink\" title=\"类型转化(隐式)\"></a>类型转化(隐式)</h2><p>小类型与大类型所运算或者逻辑时会默认转化为大类型，有符号的与无符号的会默认转化为无符号的<br>作用：防止数据丢失的一种机制<br>备注：数据本身是没有意义的，只要是要看我们是怎样去解释他<br>1：小类型-&gt;大类型：低位对齐<br>2：大类型-&gt;小类型：低位对齐，改变后注意两个类型的数据的符号是否相同，该过程一定会发生截断行为，但是数据是否丢失，不一定<br>3：有符号-&gt;无符号：注意负数转化为对应的无符号数可能对应一个很大的数（该过程中一定要注意类型），比如int类型的-1<br>例子：这里输出a&lt;b 因为无符号和有符号进行数据或者逻辑运算的时候都会转化为无符号数运算，然后-1的无符号数比a大，所以输出<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> a=<span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b=<span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a&gt;b)<span class=\"comment\">//都会默认转化为无符号数-1的无符号数很大</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"a&gt;b\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"a&lt;b\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h2><ol>\n<li>理解二维数组或者一维多维数组的地址加减的方法：全部将数组名理解为一维数组来解决，而加减的个数就是步长（类型）的位数</li>\n<li>二维数组的在逻辑上理解是平面的，但是在内存上的物理存储是线性的，所以我们可以用线性的（一维）的方式来遍历二维数组，只是改变了类型（步长）</li>\n<li>二维数组的传参：行可以少，列不能少</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><a href=\"二维数组.c\">二维数组</a></p>\n<h2 id=\"数组指针\"><a href=\"#数组指针\" class=\"headerlink\" title=\"数组指针\"></a>数组指针</h2><p>指向数组的指针，本质是指针，所以专门用来接收数组的地址<br>1：无论一维还是二维数组名，本质上都是数组指针，只不过是类型不同而已<br>2：指针的运算1：地址的运算其实是计算相隔指定类型的个数2：转化为基本类型则是计算相隔的字节数<br>3：数值指针传参：不管传递几维数组的数组名，我们都可以理解为将该数组的数组指针传递过去<br>4：数组指针型参的推演：int [4] <em> arr (编译不过)=&gt;int </em> arr<a href=\"指针数组\">4</a>=&gt;int (*arr)<a href=\"数组指针\">4</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数组指针：定义：本质上都是指针，只不过指向是指向数组</span></span><br><span class=\"line\"><span class=\"comment\">//常见的数组指针：不管是几维数组，他们的数组名本质上都是数组指针：常见错误：一级数组取地址等同于数组指针，不是二级指针</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*p)[<span class=\"number\">10</span>] =<span class=\"built_in\">array</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">0</span> ;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,<span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"指针数组\"><a href=\"#指针数组\" class=\"headerlink\" title=\"指针数组\"></a>指针数组</h2><p>数组里面的值都是指针，本质是数组<br>1：备注：我们遍历指针数组的时候常常在数组的末尾加上NULL，用该标识来表示结束<br>2：指针数组的数组名都是二级指针</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traveseArray</span><span class=\"params\">(<span class=\"keyword\">char</span> ** <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> n)</span><span class=\"comment\">//array就是一个实参的数据 实参是地址 所以该形参也是地址</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,*(<span class=\"built_in\">array</span>+i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//常见的处理指针数组的方法  在数组的末尾加上NULL作为结束标识</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traveseArray2</span><span class=\"params\">(<span class=\"keyword\">char</span> ** <span class=\"built_in\">array</span>,<span class=\"keyword\">int</span> n)</span><span class=\"comment\">//array就是一个实参的数据 实参是地址 所以该形参也是地址</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">while</span>(*<span class=\"built_in\">array</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,*(<span class=\"built_in\">array</span>++));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> * pArray[] = &#123;<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"pear\"</span>,<span class=\"string\">\"banana\"</span>,<span class=\"string\">\"orange\"</span>,<span class=\"string\">\"pineApple\"</span>,<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">    traveseArray2(&amp;pArray,<span class=\"number\">5</span>);<span class=\"comment\">//指针数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二级指针\"><a href=\"#二级指针\" class=\"headerlink\" title=\"二级指针\"></a>二级指针</h2><p>指向指针的指针，常用于字符数组<br>1：n级指针可以改变n-1下所有的指针指向和数据<br>2：不管几维数组的指针步长都是4个字节</p>\n<h3 id=\"代码例子\"><a href=\"#代码例子\" class=\"headerlink\" title=\"代码例子\"></a>代码例子</h3><p><a href=\"二级指针.c\">二级指针</a></p>\n"},{"title":"c语言提高4-回调函数,再论指针与数组,基于数组的排序及优化,基于数组的查找及优化,字符串提高","date":"2018-03-12T06:33:04.000Z","_content":"\n### 回调函数\n理解:回调函数就是用与调用函数同级的函数作为参数从而来控制被调用方函数的逻辑\n\n### 标准库函数qsort\n![标准库函数qsort1](标准库函数qsort1.png)\n![标准库函数qsort2](标准库函数qsort2.jpg)\n\n#### qsort代码例子\n[qsort代码](qsort代码.c)\n\n\n### 再论指针与数组\n```c\nint array[8][8]       二维数组\nint *ptr                 一级指针\nint * array[10]      指针数组\nint * p[3][4]          指针数组\nint (*p)[3][4]         数组指针   int (*p)[3][4]=> int [3][4] * p：所以是个数组指针\nint (*p[3])[4]         最外层理解：数组指针\nchar * func()         函数\nchar (*func)()        函数指针\nchar (* func[3])()   函数指针数组\n \nint arr[4]; 等价传递                       foo(arr,4) foo(int *p, int n)\nint arr[3][4]; 等价传递                   foo(arr,3) foo(int(*p)[4],int n)\nchar *argv[3]; 等价传递                 foo(argv,3) foo(int ** argv,int n)//注意传过来的是char*类型\nchar * p; 等价传递                         foo(p) foo(char * p)\nchar * p=NULL; 初始化传递           foo(&p) foo(char **p)\nchar **p 等价传递                         foo(p) foo(char **p)\nchar **p =NULL; 初始化传递         foo(&p) foo(char *** p)\nint (*p)[4]; 等价传递                     foo(p) foo(int (*p)[4])　　//指针数组原先类型就是 int[4]* 所以接收的时候可以直接用\nvoid func(int,int); 回调传递          foo(func) foo(void (*p)(int,int)) \n```\n\n### 数组排序优化版\n[数组排序优化版](数组排序优化版.c)\n\n### qsotr实现二级排序(对结构体)\n[qsotr实现二级排序(对结构体)](qsotr实现二级排序_对结构体.c)\n\n\n### 字符串\n字符串常量的本质是一个指针:字符串里面的内容是不能修改的，但是指向字符串的指针变量的是可以修改的\n例如:char * p=\"china\";  p是可以修改指向和内容的，但是p所指向的内容是不能修改的\n数组名的常量:数组名在本作用域内是不能修改的，但是如果将参数名传递到一个新的函数内是可以进行指针偏移的，只是在申明该数组的时候不能进行偏移\n\n\n\n","source":"_posts/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高.md","raw":"---\ntitle: 'c语言提高4-回调函数,再论指针与数组,基于数组的排序及优化,基于数组的查找及优化,字符串提高'\ndate: 2018-03-12 14:33:04\ncategories: 技术\ntags: c语言\n---\n\n### 回调函数\n理解:回调函数就是用与调用函数同级的函数作为参数从而来控制被调用方函数的逻辑\n\n### 标准库函数qsort\n![标准库函数qsort1](标准库函数qsort1.png)\n![标准库函数qsort2](标准库函数qsort2.jpg)\n\n#### qsort代码例子\n[qsort代码](qsort代码.c)\n\n\n### 再论指针与数组\n```c\nint array[8][8]       二维数组\nint *ptr                 一级指针\nint * array[10]      指针数组\nint * p[3][4]          指针数组\nint (*p)[3][4]         数组指针   int (*p)[3][4]=> int [3][4] * p：所以是个数组指针\nint (*p[3])[4]         最外层理解：数组指针\nchar * func()         函数\nchar (*func)()        函数指针\nchar (* func[3])()   函数指针数组\n \nint arr[4]; 等价传递                       foo(arr,4) foo(int *p, int n)\nint arr[3][4]; 等价传递                   foo(arr,3) foo(int(*p)[4],int n)\nchar *argv[3]; 等价传递                 foo(argv,3) foo(int ** argv,int n)//注意传过来的是char*类型\nchar * p; 等价传递                         foo(p) foo(char * p)\nchar * p=NULL; 初始化传递           foo(&p) foo(char **p)\nchar **p 等价传递                         foo(p) foo(char **p)\nchar **p =NULL; 初始化传递         foo(&p) foo(char *** p)\nint (*p)[4]; 等价传递                     foo(p) foo(int (*p)[4])　　//指针数组原先类型就是 int[4]* 所以接收的时候可以直接用\nvoid func(int,int); 回调传递          foo(func) foo(void (*p)(int,int)) \n```\n\n### 数组排序优化版\n[数组排序优化版](数组排序优化版.c)\n\n### qsotr实现二级排序(对结构体)\n[qsotr实现二级排序(对结构体)](qsotr实现二级排序_对结构体.c)\n\n\n### 字符串\n字符串常量的本质是一个指针:字符串里面的内容是不能修改的，但是指向字符串的指针变量的是可以修改的\n例如:char * p=\"china\";  p是可以修改指向和内容的，但是p所指向的内容是不能修改的\n数组名的常量:数组名在本作用域内是不能修改的，但是如果将参数名传递到一个新的函数内是可以进行指针偏移的，只是在申明该数组的时候不能进行偏移\n\n\n\n","slug":"技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高","published":1,"updated":"2018-03-12T06:42:58.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj55001k5oq8t3qqlau1","content":"<h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p>理解:回调函数就是用与调用函数同级的函数作为参数从而来控制被调用方函数的逻辑</p>\n<h3 id=\"标准库函数qsort\"><a href=\"#标准库函数qsort\" class=\"headerlink\" title=\"标准库函数qsort\"></a>标准库函数qsort</h3><p><img src=\"/2018/03/12/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/标准库函数qsort1.png\" alt=\"标准库函数qsort1\"><br><img src=\"/2018/03/12/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/标准库函数qsort2.jpg\" alt=\"标准库函数qsort2\"></p>\n<h4 id=\"qsort代码例子\"><a href=\"#qsort代码例子\" class=\"headerlink\" title=\"qsort代码例子\"></a>qsort代码例子</h4><p><a href=\"qsort代码.c\">qsort代码</a></p>\n<h3 id=\"再论指针与数组\"><a href=\"#再论指针与数组\" class=\"headerlink\" title=\"再论指针与数组\"></a>再论指针与数组</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">8</span>][<span class=\"number\">8</span>]       二维数组</span><br><span class=\"line\"><span class=\"keyword\">int</span> *ptr                 一级指针</span><br><span class=\"line\"><span class=\"keyword\">int</span> * <span class=\"built_in\">array</span>[<span class=\"number\">10</span>]      指针数组</span><br><span class=\"line\"><span class=\"keyword\">int</span> * p[<span class=\"number\">3</span>][<span class=\"number\">4</span>]          指针数组</span><br><span class=\"line\"><span class=\"keyword\">int</span> (*p)[<span class=\"number\">3</span>][<span class=\"number\">4</span>]         数组指针   <span class=\"keyword\">int</span> (*p)[<span class=\"number\">3</span>][<span class=\"number\">4</span>]=&gt; <span class=\"keyword\">int</span> [<span class=\"number\">3</span>][<span class=\"number\">4</span>] * p：所以是个数组指针</span><br><span class=\"line\"><span class=\"keyword\">int</span> (*p[<span class=\"number\">3</span>])[<span class=\"number\">4</span>]         最外层理解：数组指针</span><br><span class=\"line\"><span class=\"keyword\">char</span> * func()         函数</span><br><span class=\"line\"><span class=\"keyword\">char</span> (*func)()        函数指针</span><br><span class=\"line\"><span class=\"keyword\">char</span> (* func[<span class=\"number\">3</span>])()   函数指针数组</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">4</span>]; 等价传递                       foo(arr,<span class=\"number\">4</span>) foo(<span class=\"keyword\">int</span> *p, <span class=\"keyword\">int</span> n)</span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">4</span>]; 等价传递                   foo(arr,<span class=\"number\">3</span>) foo(<span class=\"keyword\">int</span>(*p)[<span class=\"number\">4</span>],<span class=\"keyword\">int</span> n)</span><br><span class=\"line\"><span class=\"keyword\">char</span> *argv[<span class=\"number\">3</span>]; 等价传递                 foo(argv,<span class=\"number\">3</span>) foo(<span class=\"keyword\">int</span> ** argv,<span class=\"keyword\">int</span> n)<span class=\"comment\">//注意传过来的是char*类型</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> * p; 等价传递                         foo(p) foo(<span class=\"keyword\">char</span> * p)</span><br><span class=\"line\"><span class=\"keyword\">char</span> * p=<span class=\"literal\">NULL</span>; 初始化传递           foo(&amp;p) foo(<span class=\"keyword\">char</span> **p)</span><br><span class=\"line\"><span class=\"keyword\">char</span> **p 等价传递                         foo(p) foo(<span class=\"keyword\">char</span> **p)</span><br><span class=\"line\"><span class=\"keyword\">char</span> **p =<span class=\"literal\">NULL</span>; 初始化传递         foo(&amp;p) foo(<span class=\"keyword\">char</span> *** p)</span><br><span class=\"line\"><span class=\"keyword\">int</span> (*p)[<span class=\"number\">4</span>]; 等价传递                     foo(p) foo(<span class=\"keyword\">int</span> (*p)[<span class=\"number\">4</span>])　　<span class=\"comment\">//指针数组原先类型就是 int[4]* 所以接收的时候可以直接用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>; 回调传递          foo(func) foo(<span class=\"keyword\">void</span> (*p)(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组排序优化版\"><a href=\"#数组排序优化版\" class=\"headerlink\" title=\"数组排序优化版\"></a>数组排序优化版</h3><p><a href=\"数组排序优化版.c\">数组排序优化版</a></p>\n<h3 id=\"qsotr实现二级排序-对结构体\"><a href=\"#qsotr实现二级排序-对结构体\" class=\"headerlink\" title=\"qsotr实现二级排序(对结构体)\"></a>qsotr实现二级排序(对结构体)</h3><p><a href=\"qsotr实现二级排序_对结构体.c\">qsotr实现二级排序(对结构体)</a></p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>字符串常量的本质是一个指针:字符串里面的内容是不能修改的，但是指向字符串的指针变量的是可以修改的<br>例如:char * p=”china”;  p是可以修改指向和内容的，但是p所指向的内容是不能修改的<br>数组名的常量:数组名在本作用域内是不能修改的，但是如果将参数名传递到一个新的函数内是可以进行指针偏移的，只是在申明该数组的时候不能进行偏移</p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p>理解:回调函数就是用与调用函数同级的函数作为参数从而来控制被调用方函数的逻辑</p>\n<h3 id=\"标准库函数qsort\"><a href=\"#标准库函数qsort\" class=\"headerlink\" title=\"标准库函数qsort\"></a>标准库函数qsort</h3><p><img src=\"/2018/03/12/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/标准库函数qsort1.png\" alt=\"标准库函数qsort1\"><br><img src=\"/2018/03/12/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/标准库函数qsort2.jpg\" alt=\"标准库函数qsort2\"></p>\n<h4 id=\"qsort代码例子\"><a href=\"#qsort代码例子\" class=\"headerlink\" title=\"qsort代码例子\"></a>qsort代码例子</h4><p><a href=\"qsort代码.c\">qsort代码</a></p>\n<h3 id=\"再论指针与数组\"><a href=\"#再论指针与数组\" class=\"headerlink\" title=\"再论指针与数组\"></a>再论指针与数组</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">8</span>][<span class=\"number\">8</span>]       二维数组</span><br><span class=\"line\"><span class=\"keyword\">int</span> *ptr                 一级指针</span><br><span class=\"line\"><span class=\"keyword\">int</span> * <span class=\"built_in\">array</span>[<span class=\"number\">10</span>]      指针数组</span><br><span class=\"line\"><span class=\"keyword\">int</span> * p[<span class=\"number\">3</span>][<span class=\"number\">4</span>]          指针数组</span><br><span class=\"line\"><span class=\"keyword\">int</span> (*p)[<span class=\"number\">3</span>][<span class=\"number\">4</span>]         数组指针   <span class=\"keyword\">int</span> (*p)[<span class=\"number\">3</span>][<span class=\"number\">4</span>]=&gt; <span class=\"keyword\">int</span> [<span class=\"number\">3</span>][<span class=\"number\">4</span>] * p：所以是个数组指针</span><br><span class=\"line\"><span class=\"keyword\">int</span> (*p[<span class=\"number\">3</span>])[<span class=\"number\">4</span>]         最外层理解：数组指针</span><br><span class=\"line\"><span class=\"keyword\">char</span> * func()         函数</span><br><span class=\"line\"><span class=\"keyword\">char</span> (*func)()        函数指针</span><br><span class=\"line\"><span class=\"keyword\">char</span> (* func[<span class=\"number\">3</span>])()   函数指针数组</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">4</span>]; 等价传递                       foo(arr,<span class=\"number\">4</span>) foo(<span class=\"keyword\">int</span> *p, <span class=\"keyword\">int</span> n)</span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">4</span>]; 等价传递                   foo(arr,<span class=\"number\">3</span>) foo(<span class=\"keyword\">int</span>(*p)[<span class=\"number\">4</span>],<span class=\"keyword\">int</span> n)</span><br><span class=\"line\"><span class=\"keyword\">char</span> *argv[<span class=\"number\">3</span>]; 等价传递                 foo(argv,<span class=\"number\">3</span>) foo(<span class=\"keyword\">int</span> ** argv,<span class=\"keyword\">int</span> n)<span class=\"comment\">//注意传过来的是char*类型</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> * p; 等价传递                         foo(p) foo(<span class=\"keyword\">char</span> * p)</span><br><span class=\"line\"><span class=\"keyword\">char</span> * p=<span class=\"literal\">NULL</span>; 初始化传递           foo(&amp;p) foo(<span class=\"keyword\">char</span> **p)</span><br><span class=\"line\"><span class=\"keyword\">char</span> **p 等价传递                         foo(p) foo(<span class=\"keyword\">char</span> **p)</span><br><span class=\"line\"><span class=\"keyword\">char</span> **p =<span class=\"literal\">NULL</span>; 初始化传递         foo(&amp;p) foo(<span class=\"keyword\">char</span> *** p)</span><br><span class=\"line\"><span class=\"keyword\">int</span> (*p)[<span class=\"number\">4</span>]; 等价传递                     foo(p) foo(<span class=\"keyword\">int</span> (*p)[<span class=\"number\">4</span>])　　<span class=\"comment\">//指针数组原先类型就是 int[4]* 所以接收的时候可以直接用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>; 回调传递          foo(func) foo(<span class=\"keyword\">void</span> (*p)(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组排序优化版\"><a href=\"#数组排序优化版\" class=\"headerlink\" title=\"数组排序优化版\"></a>数组排序优化版</h3><p><a href=\"数组排序优化版.c\">数组排序优化版</a></p>\n<h3 id=\"qsotr实现二级排序-对结构体\"><a href=\"#qsotr实现二级排序-对结构体\" class=\"headerlink\" title=\"qsotr实现二级排序(对结构体)\"></a>qsotr实现二级排序(对结构体)</h3><p><a href=\"qsotr实现二级排序_对结构体.c\">qsotr实现二级排序(对结构体)</a></p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>字符串常量的本质是一个指针:字符串里面的内容是不能修改的，但是指向字符串的指针变量的是可以修改的<br>例如:char * p=”china”;  p是可以修改指向和内容的，但是p所指向的内容是不能修改的<br>数组名的常量:数组名在本作用域内是不能修改的，但是如果将参数名传递到一个新的函数内是可以进行指针偏移的，只是在申明该数组的时候不能进行偏移</p>\n"},{"title":"c语言提高5-字符串","date":"2018-03-12T06:43:46.000Z","_content":"\n### 字符串和字符数组sizeof时候的区别\n在直接sizeof(\"字符串\") 字符串的时候，我们此时不能把字符串当作指针来判断，需要将其做为字符数组来看，所以sizeof(\"china\") 不等于4而是等于6\n\n### 字符串\n字符串n系列函数跟非n函数比较:防止读写越界，所以里面提供了指定的参数来描述我们需要操作的字符数\n字符串的查询函数:\nstrchr:在一串字符里面，匹配单个字符，存在返回匹配到的数据的地址，否则返回NULL\nstrstr:在一串字符串里面匹配一串字符，存在则返回匹配到的第一个字符串，否则返回NULL\n\n#### 字符串操作函数代码事例:\n[字符串操作函数代码](字符串操作函数代码.c)\n\n\n### 内存操作函数\n特点：只关心读取内容的多少，不关心内容，所以可以过滤掉一些特殊字符\n```c\nvoid * memcpy (void * dst, void const * src, size_t length);\nvoid * memmove(void * dst, void const * src, size_t length);\nvoid * memcmp (void const * a, void const * b,size_t length);\nvoid * memchr (void const * a, int ch, size_t length);\nvoid * memset (void * a, int ch ,size_t length);\n```\n\n#### 内存操作函数代码例子:\n[内存操作函数代码](内存操作函数代码.c)\n\n### 操作字符指针的思想\n定义两个指针，记录不同的状态值，再根据对应的状态来进行赋值或者其他操作 \n\n\n","source":"_posts/技术/2015-04-13-c语言提高5-字符串.md","raw":"---\ntitle: c语言提高5-字符串\ndate: 2018-03-12 14:43:46\ncategories: 技术\ntags: c语言\n---\n\n### 字符串和字符数组sizeof时候的区别\n在直接sizeof(\"字符串\") 字符串的时候，我们此时不能把字符串当作指针来判断，需要将其做为字符数组来看，所以sizeof(\"china\") 不等于4而是等于6\n\n### 字符串\n字符串n系列函数跟非n函数比较:防止读写越界，所以里面提供了指定的参数来描述我们需要操作的字符数\n字符串的查询函数:\nstrchr:在一串字符里面，匹配单个字符，存在返回匹配到的数据的地址，否则返回NULL\nstrstr:在一串字符串里面匹配一串字符，存在则返回匹配到的第一个字符串，否则返回NULL\n\n#### 字符串操作函数代码事例:\n[字符串操作函数代码](字符串操作函数代码.c)\n\n\n### 内存操作函数\n特点：只关心读取内容的多少，不关心内容，所以可以过滤掉一些特殊字符\n```c\nvoid * memcpy (void * dst, void const * src, size_t length);\nvoid * memmove(void * dst, void const * src, size_t length);\nvoid * memcmp (void const * a, void const * b,size_t length);\nvoid * memchr (void const * a, int ch, size_t length);\nvoid * memset (void * a, int ch ,size_t length);\n```\n\n#### 内存操作函数代码例子:\n[内存操作函数代码](内存操作函数代码.c)\n\n### 操作字符指针的思想\n定义两个指针，记录不同的状态值，再根据对应的状态来进行赋值或者其他操作 \n\n\n","slug":"技术/2015-04-13-c语言提高5-字符串","published":1,"updated":"2018-03-12T06:47:19.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj56001n5oq8lqz9fwrv","content":"<h3 id=\"字符串和字符数组sizeof时候的区别\"><a href=\"#字符串和字符数组sizeof时候的区别\" class=\"headerlink\" title=\"字符串和字符数组sizeof时候的区别\"></a>字符串和字符数组sizeof时候的区别</h3><p>在直接sizeof(“字符串”) 字符串的时候，我们此时不能把字符串当作指针来判断，需要将其做为字符数组来看，所以sizeof(“china”) 不等于4而是等于6</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>字符串n系列函数跟非n函数比较:防止读写越界，所以里面提供了指定的参数来描述我们需要操作的字符数<br>字符串的查询函数:<br>strchr:在一串字符里面，匹配单个字符，存在返回匹配到的数据的地址，否则返回NULL<br>strstr:在一串字符串里面匹配一串字符，存在则返回匹配到的第一个字符串，否则返回NULL</p>\n<h4 id=\"字符串操作函数代码事例\"><a href=\"#字符串操作函数代码事例\" class=\"headerlink\" title=\"字符串操作函数代码事例:\"></a>字符串操作函数代码事例:</h4><p><a href=\"字符串操作函数代码.c\">字符串操作函数代码</a></p>\n<h3 id=\"内存操作函数\"><a href=\"#内存操作函数\" class=\"headerlink\" title=\"内存操作函数\"></a>内存操作函数</h3><p>特点：只关心读取内容的多少，不关心内容，所以可以过滤掉一些特殊字符<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">memcpy</span> <span class=\"params\">(<span class=\"keyword\">void</span> * dst, <span class=\"keyword\">void</span> <span class=\"keyword\">const</span> * src, <span class=\"keyword\">size_t</span> length)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">memmove</span><span class=\"params\">(<span class=\"keyword\">void</span> * dst, <span class=\"keyword\">void</span> <span class=\"keyword\">const</span> * src, <span class=\"keyword\">size_t</span> length)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">memcmp</span> <span class=\"params\">(<span class=\"keyword\">void</span> <span class=\"keyword\">const</span> * a, <span class=\"keyword\">void</span> <span class=\"keyword\">const</span> * b,<span class=\"keyword\">size_t</span> length)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">memchr</span> <span class=\"params\">(<span class=\"keyword\">void</span> <span class=\"keyword\">const</span> * a, <span class=\"keyword\">int</span> ch, <span class=\"keyword\">size_t</span> length)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">memset</span> <span class=\"params\">(<span class=\"keyword\">void</span> * a, <span class=\"keyword\">int</span> ch ,<span class=\"keyword\">size_t</span> length)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"内存操作函数代码例子\"><a href=\"#内存操作函数代码例子\" class=\"headerlink\" title=\"内存操作函数代码例子:\"></a>内存操作函数代码例子:</h4><p><a href=\"内存操作函数代码.c\">内存操作函数代码</a></p>\n<h3 id=\"操作字符指针的思想\"><a href=\"#操作字符指针的思想\" class=\"headerlink\" title=\"操作字符指针的思想\"></a>操作字符指针的思想</h3><p>定义两个指针，记录不同的状态值，再根据对应的状态来进行赋值或者其他操作 </p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"字符串和字符数组sizeof时候的区别\"><a href=\"#字符串和字符数组sizeof时候的区别\" class=\"headerlink\" title=\"字符串和字符数组sizeof时候的区别\"></a>字符串和字符数组sizeof时候的区别</h3><p>在直接sizeof(“字符串”) 字符串的时候，我们此时不能把字符串当作指针来判断，需要将其做为字符数组来看，所以sizeof(“china”) 不等于4而是等于6</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>字符串n系列函数跟非n函数比较:防止读写越界，所以里面提供了指定的参数来描述我们需要操作的字符数<br>字符串的查询函数:<br>strchr:在一串字符里面，匹配单个字符，存在返回匹配到的数据的地址，否则返回NULL<br>strstr:在一串字符串里面匹配一串字符，存在则返回匹配到的第一个字符串，否则返回NULL</p>\n<h4 id=\"字符串操作函数代码事例\"><a href=\"#字符串操作函数代码事例\" class=\"headerlink\" title=\"字符串操作函数代码事例:\"></a>字符串操作函数代码事例:</h4><p><a href=\"字符串操作函数代码.c\">字符串操作函数代码</a></p>\n<h3 id=\"内存操作函数\"><a href=\"#内存操作函数\" class=\"headerlink\" title=\"内存操作函数\"></a>内存操作函数</h3><p>特点：只关心读取内容的多少，不关心内容，所以可以过滤掉一些特殊字符<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">memcpy</span> <span class=\"params\">(<span class=\"keyword\">void</span> * dst, <span class=\"keyword\">void</span> <span class=\"keyword\">const</span> * src, <span class=\"keyword\">size_t</span> length)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">memmove</span><span class=\"params\">(<span class=\"keyword\">void</span> * dst, <span class=\"keyword\">void</span> <span class=\"keyword\">const</span> * src, <span class=\"keyword\">size_t</span> length)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">memcmp</span> <span class=\"params\">(<span class=\"keyword\">void</span> <span class=\"keyword\">const</span> * a, <span class=\"keyword\">void</span> <span class=\"keyword\">const</span> * b,<span class=\"keyword\">size_t</span> length)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">memchr</span> <span class=\"params\">(<span class=\"keyword\">void</span> <span class=\"keyword\">const</span> * a, <span class=\"keyword\">int</span> ch, <span class=\"keyword\">size_t</span> length)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> * <span class=\"title\">memset</span> <span class=\"params\">(<span class=\"keyword\">void</span> * a, <span class=\"keyword\">int</span> ch ,<span class=\"keyword\">size_t</span> length)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"内存操作函数代码例子\"><a href=\"#内存操作函数代码例子\" class=\"headerlink\" title=\"内存操作函数代码例子:\"></a>内存操作函数代码例子:</h4><p><a href=\"内存操作函数代码.c\">内存操作函数代码</a></p>\n<h3 id=\"操作字符指针的思想\"><a href=\"#操作字符指针的思想\" class=\"headerlink\" title=\"操作字符指针的思想\"></a>操作字符指针的思想</h3><p>定义两个指针，记录不同的状态值，再根据对应的状态来进行赋值或者其他操作 </p>\n"},{"title":"c语言提高6-数据结构,双向循环链表,动态库和静态库","date":"2018-03-12T06:49:19.000Z","_content":"## 双向链表\n双向循环链表和单向链表的区别: \n1: 双向链表比单向链表多了一个指向前一个节点的指针\n2: 单向链表的验证结束位置是判断是否为NULL，双向循环链表判断是否结束是判断节点是否跟head节点是否相同，所以我们处理双向链表的时候总是要先保存好头结点\n\n### 双向链表所有代码事例\n[双向链表所有代码](双向链表所有代码.c)\n\n## 动态库和静态库\n动态库和静态库的加载是在链接阶段，因此在链接之前我们只需要提供申明就行，在最后链接上动态或者静态库\n动态库和静态库: 动态和静态库都是编译好的二进制文件\n动态库和静态库的标识:.o是静态库  .so是动态库\n动态库的特点和缺点:动态库在编译的时候没有加载进目标代码中，所以会使动态库所产生的可执行性文件比较小，但是每次程序运行都需要提供对应的动态库，并且同一时间供多个线程调用\n静态库的特点和缺点:静态库在编译的时候就被加载进了目标代码中，所以会显得产生的可执行性文件会比较大，但是后面运行程序的时候都不用再提供库了，并且同一时间点只能供一个线程用\n","source":"_posts/技术/2015-04-13-c语言提高6-数据结构-双向循环链表-动态库和静态库.md","raw":"---\ntitle: 'c语言提高6-数据结构,双向循环链表,动态库和静态库'\ndate: 2018-03-12 14:49:19\ncategories: 技术\ntags: c语言\n---\n## 双向链表\n双向循环链表和单向链表的区别: \n1: 双向链表比单向链表多了一个指向前一个节点的指针\n2: 单向链表的验证结束位置是判断是否为NULL，双向循环链表判断是否结束是判断节点是否跟head节点是否相同，所以我们处理双向链表的时候总是要先保存好头结点\n\n### 双向链表所有代码事例\n[双向链表所有代码](双向链表所有代码.c)\n\n## 动态库和静态库\n动态库和静态库的加载是在链接阶段，因此在链接之前我们只需要提供申明就行，在最后链接上动态或者静态库\n动态库和静态库: 动态和静态库都是编译好的二进制文件\n动态库和静态库的标识:.o是静态库  .so是动态库\n动态库的特点和缺点:动态库在编译的时候没有加载进目标代码中，所以会使动态库所产生的可执行性文件比较小，但是每次程序运行都需要提供对应的动态库，并且同一时间供多个线程调用\n静态库的特点和缺点:静态库在编译的时候就被加载进了目标代码中，所以会显得产生的可执行性文件会比较大，但是后面运行程序的时候都不用再提供库了，并且同一时间点只能供一个线程用\n","slug":"技术/2015-04-13-c语言提高6-数据结构-双向循环链表-动态库和静态库","published":1,"updated":"2018-03-12T06:53:03.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj58001r5oq8pd5evrsb","content":"<h2 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h2><p>双向循环链表和单向链表的区别:<br>1: 双向链表比单向链表多了一个指向前一个节点的指针<br>2: 单向链表的验证结束位置是判断是否为NULL，双向循环链表判断是否结束是判断节点是否跟head节点是否相同，所以我们处理双向链表的时候总是要先保存好头结点</p>\n<h3 id=\"双向链表所有代码事例\"><a href=\"#双向链表所有代码事例\" class=\"headerlink\" title=\"双向链表所有代码事例\"></a>双向链表所有代码事例</h3><p><a href=\"双向链表所有代码.c\">双向链表所有代码</a></p>\n<h2 id=\"动态库和静态库\"><a href=\"#动态库和静态库\" class=\"headerlink\" title=\"动态库和静态库\"></a>动态库和静态库</h2><p>动态库和静态库的加载是在链接阶段，因此在链接之前我们只需要提供申明就行，在最后链接上动态或者静态库<br>动态库和静态库: 动态和静态库都是编译好的二进制文件<br>动态库和静态库的标识:.o是静态库  .so是动态库<br>动态库的特点和缺点:动态库在编译的时候没有加载进目标代码中，所以会使动态库所产生的可执行性文件比较小，但是每次程序运行都需要提供对应的动态库，并且同一时间供多个线程调用<br>静态库的特点和缺点:静态库在编译的时候就被加载进了目标代码中，所以会显得产生的可执行性文件会比较大，但是后面运行程序的时候都不用再提供库了，并且同一时间点只能供一个线程用</p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h2><p>双向循环链表和单向链表的区别:<br>1: 双向链表比单向链表多了一个指向前一个节点的指针<br>2: 单向链表的验证结束位置是判断是否为NULL，双向循环链表判断是否结束是判断节点是否跟head节点是否相同，所以我们处理双向链表的时候总是要先保存好头结点</p>\n<h3 id=\"双向链表所有代码事例\"><a href=\"#双向链表所有代码事例\" class=\"headerlink\" title=\"双向链表所有代码事例\"></a>双向链表所有代码事例</h3><p><a href=\"双向链表所有代码.c\">双向链表所有代码</a></p>\n<h2 id=\"动态库和静态库\"><a href=\"#动态库和静态库\" class=\"headerlink\" title=\"动态库和静态库\"></a>动态库和静态库</h2><p>动态库和静态库的加载是在链接阶段，因此在链接之前我们只需要提供申明就行，在最后链接上动态或者静态库<br>动态库和静态库: 动态和静态库都是编译好的二进制文件<br>动态库和静态库的标识:.o是静态库  .so是动态库<br>动态库的特点和缺点:动态库在编译的时候没有加载进目标代码中，所以会使动态库所产生的可执行性文件比较小，但是每次程序运行都需要提供对应的动态库，并且同一时间供多个线程调用<br>静态库的特点和缺点:静态库在编译的时候就被加载进了目标代码中，所以会显得产生的可执行性文件会比较大，但是后面运行程序的时候都不用再提供库了，并且同一时间点只能供一个线程用</p>\n"},{"title":"HEXO文档中带文件","date":"2013-07-13T12:46:25.000Z","_content":"\n### 图片：\n\n<img src=\"avatar.jpg\" heigh=100 width=100 center/>\n\n ![avatar](avatar.jpg)\n","source":"_posts/技术/2018-03-08-HEXO文档中带文件.md","raw":"---\ntitle: HEXO文档中带文件\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: 工具/插件\n---\n\n### 图片：\n\n<img src=\"avatar.jpg\" heigh=100 width=100 center/>\n\n ![avatar](avatar.jpg)\n","slug":"技术/2018-03-08-HEXO文档中带文件","published":1,"updated":"2018-03-09T08:58:51.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj59001u5oq89686b3m5","content":"<h3 id=\"图片：\"><a href=\"#图片：\" class=\"headerlink\" title=\"图片：\"></a>图片：</h3><p><img src=\"/2013/07/13/技术/2018-03-08-HEXO文档中带文件/avatar.jpg\" heigh=\"100\" width=\"100\" center=\"\"></p>\n<p> <img src=\"/2013/07/13/技术/2018-03-08-HEXO文档中带文件/avatar.jpg\" alt=\"avatar\"></p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"图片：\"><a href=\"#图片：\" class=\"headerlink\" title=\"图片：\"></a>图片：</h3><p><img src=\"/2013/07/13/技术/2018-03-08-HEXO文档中带文件/avatar.jpg\" heigh=\"100\" width=\"100\" center=\"\"></p>\n<p> <img src=\"/2013/07/13/技术/2018-03-08-HEXO文档中带文件/avatar.jpg\" alt=\"avatar\"></p>\n"},{"title":"C++引用的理解","date":"2013-07-13T12:46:25.000Z","_content":"\n## 定义\n引用引入了对象的一个同义词.定义引用的表示方法与定义指针相似,只是用&代替了*.引用（reference）是c++对c语言的重要扩充.引用就是某\n一变量（目标）的一个别名,对引用的操作与对变量直接操作完全一样.其格式为:类型 &引用变量名 = 已定义过的变量名.\n\n\n## 特点\n一个变量可取多个别名.\n\n引用必须初始化.\n\n引用只能在初始化的时候引用一次 ,不能更改为转而引用其他变量.\n\n\n\n## code\n### 基础引用\n\n```c++\nvoid TestReference1 ()  \n{  \n     int a = 1;  \n     int& b = a;  \n  \n     cout<<\"a:address->\" <<&a<< endl;  \n     cout<<\"b:address->\" <<&b<< endl;  \n  \n     a = 2;  \n     b = 3;  \n     int& c = b;// 引用一个引用变量,别名的别名  \n     c = 4;  \n}\n```\n\n### const引用\n\n```c++\nvoid TestReference2 ()  \n{  \n     int d1 = 4;  \n     const int & d2 = d1;  \n     d1 = 5;//d1改变,d2的值也会改变.  \n     //d2 = 6;//不能给常量（不能被修改的量）赋值.  \n  \n     const int d3 = 1;  \n     const int & d4 = d3;  \n     //int&d5 = d3;  \n     const int & d6 = 5;//常量具有常性,只有常引用可以引用常量  \n  \n     double d7 = 1.1;  \n     //int& d8 = d7;//d7是double类型,d8是int,d7赋值给 d8时要生成一个临时变量  \n                   //也就是说d8引用的是这个带有常性的临时变量,所以不能赋值.  \n     const int& d9 = d7;  \n}  \n```\n\n\n\n## 引用作参数\n```c++\n1.【值传递】如果形参为非引用的传值方式,则生成局部临时变量接收实参的值  \nvoid Swap (int left, int right) //值传递的方式无法实现交换,因为传参时对于参数left和right拷贝一临时副本,交换的是副本值,因为其是临时变量函数退出,变量销 {                                //毁,并不会影响外部left和right的值.  \n     int temp = left;  \n     left = right ;  \n     right = temp ;  \n}  \n  \n2.【引用传递】如果形参为引用类型,则形参是实参的别名.  \nvoid Swap (int& left, int& right)//使用引用的话,不做临时拷贝,&的使用说明此处只是原参数的另一个名字而已,所以修改时直接在原参数的基础上修改变量值.  \n{  \n     int temp = left;  \n     right = left ;  \n     left = temp ;  \n}  \n  \n3.【指针传递】  \nvoid Swap (int* pLeft, int* pRight)//传入的是地址,因为地址是唯一的,所以指针通过地址的访问进而可修改其内容.  \n{  \n     int temp = *pLeft;  \n     *pLeft = *pRight;  \n     *pRight = temp;  \n}  \n```\n\n***\n\n## 注意\n不要返回一个临时变量的引用.\n如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.\n\n### 引用和指针的区别和联系（笔试热点）\n引用必须指向有效的变量,指针可以为空.\nsizeof指针对象和引用对象的意义不一样.sizeof引用得到的是所指向的变量的大小,而sizeof指针是对象地址的大小.\n指针和引用自增(++)自减(--)意义不一样.\n相对而言,引用比指针更安全.\n\n\n\n## 引用和指针的区别和联系\n### 不同点\n指针是一个实体,而引用仅是个别名;\n引用使用时无需解引用(*),指针需要解引用;\n引用只能在定义时被初始化一次,之后不可变;指针可变;\n引用没有 const,指针有 const;const修饰的指针不可变;\n引用不能为空,指针可以为空;\n\"sizeof 引用\"得到的是所指向的变量(对象)的大小,而\"sizeof 指针\"得到的是指针本身(所指向的变量或对象的地址)的大小;\n指针和引用的自增(++)运算意义不一样;\n从内存分配上看:程序为指针变量分配内存区域,而引用不需要分配内存区域.\n\n### 相同点\n两者都是地址的概念,指针指向一块儿内存,其内容为所指内存的地址;引用是某块儿内存的别名\n\n\n\n## const在C和C++中的含义(笔试热点)\n### C中的const,功能比较单一,较容易理解\n作用:被修饰的内容不可更改.\n使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）\n特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.\n\n### c++中的const\n#### 非类成员const\nconst变量默认是内部连接的,因此在不同的编译单元中可以有同名的const 变量定义.\n编译时常量,因此可以像#define一样使用,而且因为上面一点,可以在头文件中定义const变量,包含的不同的cpp文件（编译\n单元）中使用而不引起命名冲突.\n编译器默认不为const变量分配内存,除非:1. 使用 extern 申明, 2:程序中有引用const 变量的地址.\nc++中临时对象/内置变量默认具有const属性.\n\n#### 类中的const\n与c语言中的const一样,只是运行时常量,不能作为数组维数使用,即不能取代#define.在类中使用下面两种方式取代#define: 1:static const... \nenum{....}//enum 不占存储空间.\n类中的const 变量占用存储空间.\n类中的const成员变量需要在构造函数初始化列表中初始化.\nconst 对象:在该对象生命周期内,必须保证没有任何成员变量被改变.const对象只能调用const成员函数.\nconst成员函数: void fun() const ... 不仅能被const对象调用,也能被非const对象调用,因此,如果确认一个任何成员函数不改\n变任何成员变量,应该习惯性将该函数定义成const类型.\n如果一个对象被定义成const,那么该const对象\"可能\"会被放入到ROM当中,这在嵌入式开发当中有时非常重要.\n\n\n***\n> 本文引用自：http://blog.csdn.net/Xiao__Tian__/article/details/51814617\n","source":"_posts/技术/2018-03-09-C++引用的理解.md","raw":"---\ntitle: C++引用的理解\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: c++\n---\n\n## 定义\n引用引入了对象的一个同义词.定义引用的表示方法与定义指针相似,只是用&代替了*.引用（reference）是c++对c语言的重要扩充.引用就是某\n一变量（目标）的一个别名,对引用的操作与对变量直接操作完全一样.其格式为:类型 &引用变量名 = 已定义过的变量名.\n\n\n## 特点\n一个变量可取多个别名.\n\n引用必须初始化.\n\n引用只能在初始化的时候引用一次 ,不能更改为转而引用其他变量.\n\n\n\n## code\n### 基础引用\n\n```c++\nvoid TestReference1 ()  \n{  \n     int a = 1;  \n     int& b = a;  \n  \n     cout<<\"a:address->\" <<&a<< endl;  \n     cout<<\"b:address->\" <<&b<< endl;  \n  \n     a = 2;  \n     b = 3;  \n     int& c = b;// 引用一个引用变量,别名的别名  \n     c = 4;  \n}\n```\n\n### const引用\n\n```c++\nvoid TestReference2 ()  \n{  \n     int d1 = 4;  \n     const int & d2 = d1;  \n     d1 = 5;//d1改变,d2的值也会改变.  \n     //d2 = 6;//不能给常量（不能被修改的量）赋值.  \n  \n     const int d3 = 1;  \n     const int & d4 = d3;  \n     //int&d5 = d3;  \n     const int & d6 = 5;//常量具有常性,只有常引用可以引用常量  \n  \n     double d7 = 1.1;  \n     //int& d8 = d7;//d7是double类型,d8是int,d7赋值给 d8时要生成一个临时变量  \n                   //也就是说d8引用的是这个带有常性的临时变量,所以不能赋值.  \n     const int& d9 = d7;  \n}  \n```\n\n\n\n## 引用作参数\n```c++\n1.【值传递】如果形参为非引用的传值方式,则生成局部临时变量接收实参的值  \nvoid Swap (int left, int right) //值传递的方式无法实现交换,因为传参时对于参数left和right拷贝一临时副本,交换的是副本值,因为其是临时变量函数退出,变量销 {                                //毁,并不会影响外部left和right的值.  \n     int temp = left;  \n     left = right ;  \n     right = temp ;  \n}  \n  \n2.【引用传递】如果形参为引用类型,则形参是实参的别名.  \nvoid Swap (int& left, int& right)//使用引用的话,不做临时拷贝,&的使用说明此处只是原参数的另一个名字而已,所以修改时直接在原参数的基础上修改变量值.  \n{  \n     int temp = left;  \n     right = left ;  \n     left = temp ;  \n}  \n  \n3.【指针传递】  \nvoid Swap (int* pLeft, int* pRight)//传入的是地址,因为地址是唯一的,所以指针通过地址的访问进而可修改其内容.  \n{  \n     int temp = *pLeft;  \n     *pLeft = *pRight;  \n     *pRight = temp;  \n}  \n```\n\n***\n\n## 注意\n不要返回一个临时变量的引用.\n如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.\n\n### 引用和指针的区别和联系（笔试热点）\n引用必须指向有效的变量,指针可以为空.\nsizeof指针对象和引用对象的意义不一样.sizeof引用得到的是所指向的变量的大小,而sizeof指针是对象地址的大小.\n指针和引用自增(++)自减(--)意义不一样.\n相对而言,引用比指针更安全.\n\n\n\n## 引用和指针的区别和联系\n### 不同点\n指针是一个实体,而引用仅是个别名;\n引用使用时无需解引用(*),指针需要解引用;\n引用只能在定义时被初始化一次,之后不可变;指针可变;\n引用没有 const,指针有 const;const修饰的指针不可变;\n引用不能为空,指针可以为空;\n\"sizeof 引用\"得到的是所指向的变量(对象)的大小,而\"sizeof 指针\"得到的是指针本身(所指向的变量或对象的地址)的大小;\n指针和引用的自增(++)运算意义不一样;\n从内存分配上看:程序为指针变量分配内存区域,而引用不需要分配内存区域.\n\n### 相同点\n两者都是地址的概念,指针指向一块儿内存,其内容为所指内存的地址;引用是某块儿内存的别名\n\n\n\n## const在C和C++中的含义(笔试热点)\n### C中的const,功能比较单一,较容易理解\n作用:被修饰的内容不可更改.\n使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）\n特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.\n\n### c++中的const\n#### 非类成员const\nconst变量默认是内部连接的,因此在不同的编译单元中可以有同名的const 变量定义.\n编译时常量,因此可以像#define一样使用,而且因为上面一点,可以在头文件中定义const变量,包含的不同的cpp文件（编译\n单元）中使用而不引起命名冲突.\n编译器默认不为const变量分配内存,除非:1. 使用 extern 申明, 2:程序中有引用const 变量的地址.\nc++中临时对象/内置变量默认具有const属性.\n\n#### 类中的const\n与c语言中的const一样,只是运行时常量,不能作为数组维数使用,即不能取代#define.在类中使用下面两种方式取代#define: 1:static const... \nenum{....}//enum 不占存储空间.\n类中的const 变量占用存储空间.\n类中的const成员变量需要在构造函数初始化列表中初始化.\nconst 对象:在该对象生命周期内,必须保证没有任何成员变量被改变.const对象只能调用const成员函数.\nconst成员函数: void fun() const ... 不仅能被const对象调用,也能被非const对象调用,因此,如果确认一个任何成员函数不改\n变任何成员变量,应该习惯性将该函数定义成const类型.\n如果一个对象被定义成const,那么该const对象\"可能\"会被放入到ROM当中,这在嵌入式开发当中有时非常重要.\n\n\n***\n> 本文引用自：http://blog.csdn.net/Xiao__Tian__/article/details/51814617\n","slug":"技术/2018-03-09-C++引用的理解","published":1,"updated":"2018-03-12T03:05:06.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj5a001x5oq8rb7bghgs","content":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>引用引入了对象的一个同义词.定义引用的表示方法与定义指针相似,只是用&amp;代替了*.引用（reference）是c++对c语言的重要扩充.引用就是某<br>一变量（目标）的一个别名,对引用的操作与对变量直接操作完全一样.其格式为:类型 &amp;引用变量名 = 已定义过的变量名.</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>一个变量可取多个别名.</p>\n<p>引用必须初始化.</p>\n<p>引用只能在初始化的时候引用一次 ,不能更改为转而引用其他变量.</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><h3 id=\"基础引用\"><a href=\"#基础引用\" class=\"headerlink\" title=\"基础引用\"></a>基础引用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestReference1</span> <span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span>&amp; b = a;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:address-&gt;\"</span> &lt;&lt;&amp;a&lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:address-&gt;\"</span> &lt;&lt;&amp;b&lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     a = <span class=\"number\">2</span>;  </span><br><span class=\"line\">     b = <span class=\"number\">3</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span>&amp; c = b;<span class=\"comment\">// 引用一个引用变量,别名的别名  </span></span><br><span class=\"line\">     c = <span class=\"number\">4</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"const引用\"><a href=\"#const引用\" class=\"headerlink\" title=\"const引用\"></a>const引用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestReference2</span> <span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> d1 = <span class=\"number\">4</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d2 = d1;  </span><br><span class=\"line\">     d1 = <span class=\"number\">5</span>;<span class=\"comment\">//d1改变,d2的值也会改变.  </span></span><br><span class=\"line\">     <span class=\"comment\">//d2 = 6;//不能给常量（不能被修改的量）赋值.  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> d3 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d4 = d3;  </span><br><span class=\"line\">     <span class=\"comment\">//int&amp;d5 = d3;  </span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d6 = <span class=\"number\">5</span>;<span class=\"comment\">//常量具有常性,只有常引用可以引用常量  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"keyword\">double</span> d7 = <span class=\"number\">1.1</span>;  </span><br><span class=\"line\">     <span class=\"comment\">//int&amp; d8 = d7;//d7是double类型,d8是int,d7赋值给 d8时要生成一个临时变量  </span></span><br><span class=\"line\">                   <span class=\"comment\">//也就是说d8引用的是这个带有常性的临时变量,所以不能赋值.  </span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; d9 = d7;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用作参数\"><a href=\"#引用作参数\" class=\"headerlink\" title=\"引用作参数\"></a>引用作参数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>【值传递】如果形参为非引用的传值方式,则生成局部临时变量接收实参的值  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> <span class=\"comment\">//值传递的方式无法实现交换,因为传参时对于参数left和right拷贝一临时副本,交换的是副本值,因为其是临时变量函数退出,变量销 &#123;                                //毁,并不会影响外部left和right的值.  </span></span></span><br><span class=\"line\"><span class=\"function\">     <span class=\"keyword\">int</span> temp </span>= left;  </span><br><span class=\"line\">     left = right ;  </span><br><span class=\"line\">     right = temp ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">2.</span>【引用传递】如果形参为引用类型,则形参是实参的别名.  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span>&amp; left, <span class=\"keyword\">int</span>&amp; right)</span><span class=\"comment\">//使用引用的话,不做临时拷贝,&amp;的使用说明此处只是原参数的另一个名字而已,所以修改时直接在原参数的基础上修改变量值.  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = left;  </span><br><span class=\"line\">     right = left ;  </span><br><span class=\"line\">     left = temp ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">3.</span>【指针传递】  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span>* pLeft, <span class=\"keyword\">int</span>* pRight)</span><span class=\"comment\">//传入的是地址,因为地址是唯一的,所以指针通过地址的访问进而可修改其内容.  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = *pLeft;  </span><br><span class=\"line\">     *pLeft = *pRight;  </span><br><span class=\"line\">     *pRight = temp;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>不要返回一个临时变量的引用.<br>如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.</p>\n<h3 id=\"引用和指针的区别和联系（笔试热点）\"><a href=\"#引用和指针的区别和联系（笔试热点）\" class=\"headerlink\" title=\"引用和指针的区别和联系（笔试热点）\"></a>引用和指针的区别和联系（笔试热点）</h3><p>引用必须指向有效的变量,指针可以为空.<br>sizeof指针对象和引用对象的意义不一样.sizeof引用得到的是所指向的变量的大小,而sizeof指针是对象地址的大小.<br>指针和引用自增(++)自减(–)意义不一样.<br>相对而言,引用比指针更安全.</p>\n<h2 id=\"引用和指针的区别和联系\"><a href=\"#引用和指针的区别和联系\" class=\"headerlink\" title=\"引用和指针的区别和联系\"></a>引用和指针的区别和联系</h2><h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><p>指针是一个实体,而引用仅是个别名;<br>引用使用时无需解引用(*),指针需要解引用;<br>引用只能在定义时被初始化一次,之后不可变;指针可变;<br>引用没有 const,指针有 const;const修饰的指针不可变;<br>引用不能为空,指针可以为空;<br>“sizeof 引用”得到的是所指向的变量(对象)的大小,而”sizeof 指针”得到的是指针本身(所指向的变量或对象的地址)的大小;<br>指针和引用的自增(++)运算意义不一样;<br>从内存分配上看:程序为指针变量分配内存区域,而引用不需要分配内存区域.</p>\n<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><p>两者都是地址的概念,指针指向一块儿内存,其内容为所指内存的地址;引用是某块儿内存的别名</p>\n<h2 id=\"const在C和C-中的含义-笔试热点\"><a href=\"#const在C和C-中的含义-笔试热点\" class=\"headerlink\" title=\"const在C和C++中的含义(笔试热点)\"></a>const在C和C++中的含义(笔试热点)</h2><h3 id=\"C中的const-功能比较单一-较容易理解\"><a href=\"#C中的const-功能比较单一-较容易理解\" class=\"headerlink\" title=\"C中的const,功能比较单一,较容易理解\"></a>C中的const,功能比较单一,较容易理解</h3><p>作用:被修饰的内容不可更改.<br>使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）<br>特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.</p>\n<h3 id=\"c-中的const\"><a href=\"#c-中的const\" class=\"headerlink\" title=\"c++中的const\"></a>c++中的const</h3><h4 id=\"非类成员const\"><a href=\"#非类成员const\" class=\"headerlink\" title=\"非类成员const\"></a>非类成员const</h4><p>const变量默认是内部连接的,因此在不同的编译单元中可以有同名的const 变量定义.<br>编译时常量,因此可以像#define一样使用,而且因为上面一点,可以在头文件中定义const变量,包含的不同的cpp文件（编译<br>单元）中使用而不引起命名冲突.<br>编译器默认不为const变量分配内存,除非:1. 使用 extern 申明, 2:程序中有引用const 变量的地址.<br>c++中临时对象/内置变量默认具有const属性.</p>\n<h4 id=\"类中的const\"><a href=\"#类中的const\" class=\"headerlink\" title=\"类中的const\"></a>类中的const</h4><p>与c语言中的const一样,只是运行时常量,不能作为数组维数使用,即不能取代#define.在类中使用下面两种方式取代#define: 1:static const…<br>enum{….}//enum 不占存储空间.<br>类中的const 变量占用存储空间.<br>类中的const成员变量需要在构造函数初始化列表中初始化.<br>const 对象:在该对象生命周期内,必须保证没有任何成员变量被改变.const对象只能调用const成员函数.<br>const成员函数: void fun() const … 不仅能被const对象调用,也能被非const对象调用,因此,如果确认一个任何成员函数不改<br>变任何成员变量,应该习惯性将该函数定义成const类型.<br>如果一个对象被定义成const,那么该const对象”可能”会被放入到ROM当中,这在嵌入式开发当中有时非常重要.</p>\n<hr>\n<blockquote>\n<p>本文引用自：<a href=\"http://blog.csdn.net/Xiao__Tian__/article/details/51814617\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/Xiao__Tian__/article/details/51814617</a></p>\n</blockquote>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>引用引入了对象的一个同义词.定义引用的表示方法与定义指针相似,只是用&amp;代替了*.引用（reference）是c++对c语言的重要扩充.引用就是某<br>一变量（目标）的一个别名,对引用的操作与对变量直接操作完全一样.其格式为:类型 &amp;引用变量名 = 已定义过的变量名.</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><p>一个变量可取多个别名.</p>\n<p>引用必须初始化.</p>\n<p>引用只能在初始化的时候引用一次 ,不能更改为转而引用其他变量.</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><h3 id=\"基础引用\"><a href=\"#基础引用\" class=\"headerlink\" title=\"基础引用\"></a>基础引用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestReference1</span> <span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span>&amp; b = a;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:address-&gt;\"</span> &lt;&lt;&amp;a&lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:address-&gt;\"</span> &lt;&lt;&amp;b&lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     a = <span class=\"number\">2</span>;  </span><br><span class=\"line\">     b = <span class=\"number\">3</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span>&amp; c = b;<span class=\"comment\">// 引用一个引用变量,别名的别名  </span></span><br><span class=\"line\">     c = <span class=\"number\">4</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"const引用\"><a href=\"#const引用\" class=\"headerlink\" title=\"const引用\"></a>const引用</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestReference2</span> <span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> d1 = <span class=\"number\">4</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d2 = d1;  </span><br><span class=\"line\">     d1 = <span class=\"number\">5</span>;<span class=\"comment\">//d1改变,d2的值也会改变.  </span></span><br><span class=\"line\">     <span class=\"comment\">//d2 = 6;//不能给常量（不能被修改的量）赋值.  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> d3 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d4 = d3;  </span><br><span class=\"line\">     <span class=\"comment\">//int&amp;d5 = d3;  </span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d6 = <span class=\"number\">5</span>;<span class=\"comment\">//常量具有常性,只有常引用可以引用常量  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"keyword\">double</span> d7 = <span class=\"number\">1.1</span>;  </span><br><span class=\"line\">     <span class=\"comment\">//int&amp; d8 = d7;//d7是double类型,d8是int,d7赋值给 d8时要生成一个临时变量  </span></span><br><span class=\"line\">                   <span class=\"comment\">//也就是说d8引用的是这个带有常性的临时变量,所以不能赋值.  </span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; d9 = d7;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用作参数\"><a href=\"#引用作参数\" class=\"headerlink\" title=\"引用作参数\"></a>引用作参数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>【值传递】如果形参为非引用的传值方式,则生成局部临时变量接收实参的值  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> <span class=\"comment\">//值传递的方式无法实现交换,因为传参时对于参数left和right拷贝一临时副本,交换的是副本值,因为其是临时变量函数退出,变量销 &#123;                                //毁,并不会影响外部left和right的值.  </span></span></span><br><span class=\"line\"><span class=\"function\">     <span class=\"keyword\">int</span> temp </span>= left;  </span><br><span class=\"line\">     left = right ;  </span><br><span class=\"line\">     right = temp ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">2.</span>【引用传递】如果形参为引用类型,则形参是实参的别名.  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span>&amp; left, <span class=\"keyword\">int</span>&amp; right)</span><span class=\"comment\">//使用引用的话,不做临时拷贝,&amp;的使用说明此处只是原参数的另一个名字而已,所以修改时直接在原参数的基础上修改变量值.  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = left;  </span><br><span class=\"line\">     right = left ;  </span><br><span class=\"line\">     left = temp ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">3.</span>【指针传递】  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span>* pLeft, <span class=\"keyword\">int</span>* pRight)</span><span class=\"comment\">//传入的是地址,因为地址是唯一的,所以指针通过地址的访问进而可修改其内容.  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = *pLeft;  </span><br><span class=\"line\">     *pLeft = *pRight;  </span><br><span class=\"line\">     *pRight = temp;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>不要返回一个临时变量的引用.<br>如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.</p>\n<h3 id=\"引用和指针的区别和联系（笔试热点）\"><a href=\"#引用和指针的区别和联系（笔试热点）\" class=\"headerlink\" title=\"引用和指针的区别和联系（笔试热点）\"></a>引用和指针的区别和联系（笔试热点）</h3><p>引用必须指向有效的变量,指针可以为空.<br>sizeof指针对象和引用对象的意义不一样.sizeof引用得到的是所指向的变量的大小,而sizeof指针是对象地址的大小.<br>指针和引用自增(++)自减(–)意义不一样.<br>相对而言,引用比指针更安全.</p>\n<h2 id=\"引用和指针的区别和联系\"><a href=\"#引用和指针的区别和联系\" class=\"headerlink\" title=\"引用和指针的区别和联系\"></a>引用和指针的区别和联系</h2><h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><p>指针是一个实体,而引用仅是个别名;<br>引用使用时无需解引用(*),指针需要解引用;<br>引用只能在定义时被初始化一次,之后不可变;指针可变;<br>引用没有 const,指针有 const;const修饰的指针不可变;<br>引用不能为空,指针可以为空;<br>“sizeof 引用”得到的是所指向的变量(对象)的大小,而”sizeof 指针”得到的是指针本身(所指向的变量或对象的地址)的大小;<br>指针和引用的自增(++)运算意义不一样;<br>从内存分配上看:程序为指针变量分配内存区域,而引用不需要分配内存区域.</p>\n<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><p>两者都是地址的概念,指针指向一块儿内存,其内容为所指内存的地址;引用是某块儿内存的别名</p>\n<h2 id=\"const在C和C-中的含义-笔试热点\"><a href=\"#const在C和C-中的含义-笔试热点\" class=\"headerlink\" title=\"const在C和C++中的含义(笔试热点)\"></a>const在C和C++中的含义(笔试热点)</h2><h3 id=\"C中的const-功能比较单一-较容易理解\"><a href=\"#C中的const-功能比较单一-较容易理解\" class=\"headerlink\" title=\"C中的const,功能比较单一,较容易理解\"></a>C中的const,功能比较单一,较容易理解</h3><p>作用:被修饰的内容不可更改.<br>使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）<br>特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.</p>\n<h3 id=\"c-中的const\"><a href=\"#c-中的const\" class=\"headerlink\" title=\"c++中的const\"></a>c++中的const</h3><h4 id=\"非类成员const\"><a href=\"#非类成员const\" class=\"headerlink\" title=\"非类成员const\"></a>非类成员const</h4><p>const变量默认是内部连接的,因此在不同的编译单元中可以有同名的const 变量定义.<br>编译时常量,因此可以像#define一样使用,而且因为上面一点,可以在头文件中定义const变量,包含的不同的cpp文件（编译<br>单元）中使用而不引起命名冲突.<br>编译器默认不为const变量分配内存,除非:1. 使用 extern 申明, 2:程序中有引用const 变量的地址.<br>c++中临时对象/内置变量默认具有const属性.</p>\n<h4 id=\"类中的const\"><a href=\"#类中的const\" class=\"headerlink\" title=\"类中的const\"></a>类中的const</h4><p>与c语言中的const一样,只是运行时常量,不能作为数组维数使用,即不能取代#define.在类中使用下面两种方式取代#define: 1:static const…<br>enum{….}//enum 不占存储空间.<br>类中的const 变量占用存储空间.<br>类中的const成员变量需要在构造函数初始化列表中初始化.<br>const 对象:在该对象生命周期内,必须保证没有任何成员变量被改变.const对象只能调用const成员函数.<br>const成员函数: void fun() const … 不仅能被const对象调用,也能被非const对象调用,因此,如果确认一个任何成员函数不改<br>变任何成员变量,应该习惯性将该函数定义成const类型.<br>如果一个对象被定义成const,那么该const对象”可能”会被放入到ROM当中,这在嵌入式开发当中有时非常重要.</p>\n<hr>\n<blockquote>\n<p>本文引用自：<a href=\"http://blog.csdn.net/Xiao__Tian__/article/details/51814617\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/Xiao__Tian__/article/details/51814617</a></p>\n</blockquote>\n"},{"title":"Hexo-theme-pure主题books默认选择想读","date":"2013-07-13T12:46:25.000Z","_content":"\n\nHexo-theme-pure主题books默认是选择在读的，现在我们需要将想读移动到前面\n## 步骤\n\n### Step 1.修改样式\n   在主题的layout->_partial的 archive-book.ejs调换想读和在读的顺序\n\n### Step 2.修改js\n   在主题的layout->_script的 douban.ejs 将show(reading)改成show('wish')，然后刷新就有效果了\n\n\n","source":"_posts/技术/2018-03-09-Hexo-theme-pure主题books默认选择想读.md","raw":"---\ntitle: Hexo-theme-pure主题books默认选择想读\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: 工具/插件\n---\n\n\nHexo-theme-pure主题books默认是选择在读的，现在我们需要将想读移动到前面\n## 步骤\n\n### Step 1.修改样式\n   在主题的layout->_partial的 archive-book.ejs调换想读和在读的顺序\n\n### Step 2.修改js\n   在主题的layout->_script的 douban.ejs 将show(reading)改成show('wish')，然后刷新就有效果了\n\n\n","slug":"技术/2018-03-09-Hexo-theme-pure主题books默认选择想读","published":1,"updated":"2018-03-10T03:37:49.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj5c00205oq8txzutn55","content":"<p>Hexo-theme-pure主题books默认是选择在读的，现在我们需要将想读移动到前面</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"Step-1-修改样式\"><a href=\"#Step-1-修改样式\" class=\"headerlink\" title=\"Step 1.修改样式\"></a>Step 1.修改样式</h3><p>   在主题的layout-&gt;_partial的 archive-book.ejs调换想读和在读的顺序</p>\n<h3 id=\"Step-2-修改js\"><a href=\"#Step-2-修改js\" class=\"headerlink\" title=\"Step 2.修改js\"></a>Step 2.修改js</h3><p>   在主题的layout-&gt;_script的 douban.ejs 将show(reading)改成show(‘wish’)，然后刷新就有效果了</p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>Hexo-theme-pure主题books默认是选择在读的，现在我们需要将想读移动到前面</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"Step-1-修改样式\"><a href=\"#Step-1-修改样式\" class=\"headerlink\" title=\"Step 1.修改样式\"></a>Step 1.修改样式</h3><p>   在主题的layout-&gt;_partial的 archive-book.ejs调换想读和在读的顺序</p>\n<h3 id=\"Step-2-修改js\"><a href=\"#Step-2-修改js\" class=\"headerlink\" title=\"Step 2.修改js\"></a>Step 2.修改js</h3><p>   在主题的layout-&gt;_script的 douban.ejs 将show(reading)改成show(‘wish’)，然后刷新就有效果了</p>\n"},{"title":"SBC大数据导入(代码)","date":"2013-07-13T12:46:25.000Z","_content":"\n```c#\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Data;\nusing System.IO;\nusing System.Threading;\nusing System.Web;\nusing System.Xml;\nusing System.Configuration;\nusing System.Data.SqlClient;\nusing WXMP.WinService.Data;\n\nnamespace Utility.DataImport\n{\n    public class TxtImport\n    {\n        /// <summary>\n        /// 导入数据\n        /// </summary>\n        /// <param name=\"fileName\">文件名</param>\n        /// <param name=\"columnCount\"></param>\n        /// <param name=\"xmlTableName\">xml配置名</param>\n        /// <param name=\"RealTableName\">数据库表名称</param>\n        /// <param name=\"defaultValue\"></param>\n        /// <param name=\"ConnectionKeyName\">数据库连接配置</param>\n        /// <param name=\"heardRowCount\">文件头定义行数</param>\n        /// <param name=\"footRowCount\">文件尾定义行数</param>\n        /// <returns></returns>\n        public static int ImportData(string fileName, string xmlTableName, Dictionary<string, object> defaultValue, string ConnectionKeyName = \"default\", int heardRowCount = 0, int footRowCount = 0)\n        {\n            if (fileName == \"\")\n                return 0;\n            return Insert(fileName, xmlTableName, defaultValue, ConnectionKeyName, heardRowCount, footRowCount);\n        }\n\n        /// <summary>\n        /// 导入文本文件\n        /// </summary>\n        /// <param name=\"fileFullName\">文本全路径</param>\n        /// <param name=\"columnCount\">文本里需要导入的列的数目</param>\n        public static int Insert(string fileFullName, string xmlTableName, Dictionary<string, object> defaultValue, string ConnectionKeyName, int heardRowCount = 0, int footRowCount = 0)\n        {\n            string exesql = string.Empty;\n            string tablename = string.Empty;\n            DataTable dt = XmlToDataTable(xmlTableName, out tablename, out exesql);\n            if (dt != null)\n            {\n                LoadAdpaterDataAndImport(fileFullName, dt.Columns.Count, dt, defaultValue, ConnectionKeyName, tablename, heardRowCount, footRowCount);\n\n                DbHelper.ExecuteNonQuery(exesql, ConnectionKeyName);\n                return dt.Rows.Count;\n            }\n\n            return 0;\n        }\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"fileFullName\"></param>\n        /// <param name=\"columnCount\"></param>\n        /// <param name=\"pDTScheme\"></param>\n        /// <param name=\"defaultValue\"></param>\n        /// <param name=\"connectionName\"></param>\n        /// <param name=\"realTableName\"></param>\n        /// <param name=\"heardRowCount\"></param>\n        /// <param name=\"footRowCount\"></param>\n        public static void LoadAdpaterDataAndImport(string fileFullName, int columnCount, DataTable pDTScheme, Dictionary<string, object> defaultValue, string connectionName, string realTableName, int heardRowCount = 0, int footRowCount = 0)\n        {\n            try\n            {\n                using (StreamReader sr = new StreamReader(fileFullName, Encoding.Default, true))\n                {\n                    string strTmp;\n                    DataRow dr;\n                    int i = 0;\n                    while (!sr.EndOfStream)\n                    {\n                        strTmp = sr.ReadLine();\n                        if (string.IsNullOrEmpty(strTmp))\n                            continue;\n                        i++;\n                        if (i <= heardRowCount) continue;\n                        heardRowCount = 0;\n                        dr = GetDataRow(strTmp, columnCount, pDTScheme, defaultValue);\n                        if (dr != null)\n                            pDTScheme.Rows.Add(dr);\n                        if (i % 100000 == 0)\n                        {\n                            UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);\n                            pDTScheme.Rows.Clear();\n                            i = 0;\n                            Thread.Sleep(1000);\n                        }\n                    }\n                    if (pDTScheme.Rows.Count > 0)\n                        UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);\n                    DbHelper.ExecuteNonQuery(@\"INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES('\" + fileFullName.Substring(fileFullName.LastIndexOf(\"\\\\\") + 1) + \"','\" + DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \"','\" + (i - heardRowCount - footRowCount).ToString() + \"','0');\", connectionName);\n                }\n            }\n            catch (Exception ex)\n            {\n                DbHelper.ExecuteNonQuery(@\"INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES('\" + fileFullName.Substring(fileFullName.LastIndexOf(\"\\\\\") + 1) + \"','\" + DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \"','','3');\", connectionName);\n                Utility.Logging.Log.Instance.Write(\"读取文件发生异常\" + ex.Message, Logging.MessageType.Error);\n            }\n        }\n\n        protected static DataRow GetDataRow(string strTmp, int columnCount, DataTable pDTScheme, Dictionary<string, object> defaultValue)\n        {\n            string[] result = strTmp.Split(new string[] { \"&&\" }, StringSplitOptions.None);\n            DataRow dr = null;\n            if (result.Length >= columnCount)\n            {\n                dr = pDTScheme.NewRow();\n                for (int n = 0; n < columnCount; n++)\n                {\n                    try\n                    {\n                        if (pDTScheme.Columns[n].DataType == typeof(System.Decimal) && result[n] == \"\")\n                        {\n                            dr[n] = 0;\n                        }\n                        else if (pDTScheme.Columns[n].DataType == typeof(System.Int32) && result[n] == \"\")\n                        {\n                            dr[n] = 0;\n                        }\n                        else if (pDTScheme.Columns[n].DataType != typeof(System.String) && result[n] == \"\")\n                        {\n                            dr[n] = DBNull.Value;\n                        }\n                        else if (pDTScheme.Columns[n].DataType != typeof(System.DateTime) && result[n] == \"\")\n                        {\n                            dr[n] = DBNull.Value;\n                        }\n                        else\n                            dr[n] = result[n];\n                    }\n                    catch\n                    {\n                        dr[n] = DBNull.Value;\n                    }\n                }\n                Type t = null;\n                DataColumn dc = null;\n                object obj = null;\n                for (int n = columnCount; n < pDTScheme.Columns.Count; n++)\n                {\n                    dc = pDTScheme.Columns[n];\n                    if (defaultValue != null)\n                    {\n                        if (defaultValue.TryGetValue(dc.ColumnName, out obj))\n                        {\n                            dr[n] = obj;\n                        }\n                        else\n                        {\n                            if (dc.DefaultValue == DBNull.Value)\n                            {\n                                t = pDTScheme.Columns[n].DataType;\n                                if (t == typeof(String))\n                                    dr[n] = \"\";\n                                else if (t == typeof(Guid))\n                                    dr[n] = Guid.NewGuid();\n                                else if (t == typeof(DateTime))\n                                    dr[n] = DateTime.Now;\n                                else if (t == typeof(int))\n                                    dr[n] = 0;\n                                else if (t == typeof(decimal))\n                                    dr[n] = 0.00;\n                            }\n                            else\n                            {\n                                dr[n] = pDTScheme.Columns[n].DefaultValue;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (dc.DefaultValue == DBNull.Value)\n                        {\n                            t = pDTScheme.Columns[n].DataType;\n                            if (t == typeof(String))\n                                dr[n] = \"\";\n                            else if (t == typeof(Guid))\n                                dr[n] = Guid.NewGuid();\n                            else if (t == typeof(DateTime))\n                                dr[n] = DateTime.Now;\n                            else if (t == typeof(int))\n                                dr[n] = 0;\n                            else if (t == typeof(decimal))\n                                dr[n] = 0.00;\n                        }\n                        else\n                        {\n                            dr[n] = pDTScheme.Columns[n].DefaultValue;\n                        }\n\n                    }\n                }\n\n            }\n            return dr;\n        }\n\n\n        #region【封装的业务逻辑方法，配合InsertBossDetail进行使用】\n        public static DataTable XmlToDataTable(string dataName, out string tablename, out string exesql)\n        {\n            tablename = string.Empty;\n            exesql = string.Empty;\n            string path = System.AppDomain.CurrentDomain.BaseDirectory + \"/Config/Imps.config\";\n            XmlDocument doc = new XmlDocument();\n            doc.Load(path);\n            XmlNode tableRoot = doc.SelectSingleNode(\"/imps/imp[@name='\" + dataName + \"']\");\n            if (tableRoot != null)\n            {\n\n                DataTable dt = new DataTable();\n                DataColumn dc = null;\n                string defualtValue;\n                tablename = tableRoot.SelectSingleNode(\"table\").Attributes[\"name\"].Value;\n                exesql = tableRoot.SelectSingleNode(\"sql\").InnerText;\n                foreach (XmlNode node in tableRoot.SelectSingleNode(\"table\").ChildNodes)\n                {\n                    dc = new DataColumn(node.Attributes[\"name\"].Value.Trim(), Type.GetType(node.Attributes[\"type\"].Value.Trim()));\n                    if (!string.IsNullOrEmpty(defualtValue = node.Attributes[\"default\"] != null ? node.Attributes[\"default\"].Value.Trim() : null))\n                        dc.DefaultValue = defualtValue;\n                    dt.Columns.Add(dc);\n\n                }\n                return dt;\n            }\n            return null;\n        }\n\n        /// <summary>\n        /// 用SBC方法插入数据库\n        /// </summary>\n        /// <param name=\"ConnectionStringKey\">要插入的数据库</param>\n        /// <param name=\"pDataTable\">要插入的DATATABLE</param>\n        /// <param name=\"pTableName\">对应的数据库表名</param>\n        /// <param name=\"pBulkCopyTimeout\">数据库连接过期时间,单位：秒</param>\n        public static void UseSBCInsertDB(string ConnectionStringKey, DataTable pDataTable, string pTableName, int pBulkCopyTimeout = -1, bool appingFlag = false)\n        {\n            string connectionString = ConfigurationManager.ConnectionStrings[ConnectionStringKey].ConnectionString;\n            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(connectionString))\n            {\n                sqlBulkCopy.DestinationTableName = pTableName;\n                sqlBulkCopy.BatchSize = pDataTable.Rows.Count;\n                if (pBulkCopyTimeout > 0)\n                    sqlBulkCopy.BulkCopyTimeout = pBulkCopyTimeout;\n                if (appingFlag)\n                {\n                    foreach (DataColumn dc in pDataTable.Columns)\n                        sqlBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName);\n                }\n                using (SqlConnection sqlConnection = new SqlConnection(connectionString))\n                {\n                    sqlConnection.Open();\n                    if (pDataTable != null && pDataTable.Rows.Count != 0)\n                    {\n                        sqlBulkCopy.WriteToServer(pDataTable);\n                    }\n                }\n\n            }\n        }\n        #endregion\n\n        #region【转换文件】\n        public static string TransferFile(string fileFullName, bool isDelOriFile = true)\n        {\n            string path = Path.GetDirectoryName(fileFullName);\n            //fileFullName.Substring(0, fileFullName.LastIndexOf('\\\\'));\n            string newFileName = string.Format(\"{0}{1}.txt\", path, DateTime.Now.ToString(\"yyyyMMddHHmmss\"));\n            Encoding en = GetEncoding(fileFullName, Encoding.Default);\n            using (StreamReader sr = new StreamReader(fileFullName, en, true))\n            {\n                using (StreamWriter sw = new StreamWriter(newFileName, true, Encoding.UTF8))\n                {\n                    string strTmp;\n                    while (!sr.EndOfStream)\n                    {\n                        strTmp = sr.ReadLine();\n                        if (!string.IsNullOrEmpty(strTmp))\n                        {\n                            sw.WriteLine(strTmp);\n                        }\n                    }\n                    sw.Flush();\n                    sw.Close();\n                }\n            }\n            if (isDelOriFile && File.Exists(fileFullName))\n                File.Delete(fileFullName);\n            return newFileName;\n        }\n\n\n        /// <summary>\n        /// 取得一个文本文件的编码方式。\n        /// </summary>\n        /// <param name=\"fileName\">文件名。</param>\n        /// <param name=\"defaultEncoding\">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>\n        /// <returns></returns>\n        public static Encoding GetEncoding(string fileName, Encoding defaultEncoding)\n        {\n            using (FileStream fs = new FileStream(fileName, FileMode.Open))\n            {\n                Encoding targetEncoding = GetEncoding(fs, defaultEncoding);\n                fs.Close();\n                return targetEncoding;\n            }\n        }\n\n\n        /// <summary>\n        /// 取得一个文本文件流的编码方式。\n        /// </summary>\n        /// <param name=\"stream\">文本文件流。</param>\n        /// <param name=\"defaultEncoding\">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>\n        /// <returns></returns>\n        public static Encoding GetEncoding(FileStream stream, Encoding defaultEncoding)\n        {\n\n            Encoding targetEncoding = defaultEncoding;\n            if (stream != null && stream.Length >= 2)\n            {\n\n                //保存文件流的前4个字节\n                byte byte1 = 0;\n                byte byte2 = 0;\n                byte byte3 = 0;\n                byte byte4 = 0;\n                //保存当前Seek位置\n                long origPos = stream.Seek(0, SeekOrigin.Begin);\n                stream.Seek(0, SeekOrigin.Begin);\n                int nByte = stream.ReadByte();\n                byte1 = Convert.ToByte(nByte);\n                byte2 = Convert.ToByte(stream.ReadByte());\n                if (stream.Length >= 3)\n                {\n                    byte3 = Convert.ToByte(stream.ReadByte());\n                }\n\n                if (stream.Length >= 4)\n                {\n                    byte4 = Convert.ToByte(stream.ReadByte());\n                }\n                //根据文件流的前4个字节判断Encoding\n                //Unicode {0xFF, 0xFE};\n                //BE-Unicode {0xFE, 0xFF};\n                //UTF8 = {0xEF, 0xBB, 0xBF};\n                if (byte1 == 0xFE && byte2 == 0xFF)//UnicodeBe\n                {\n                    targetEncoding = Encoding.BigEndianUnicode;\n                }\n\n                if (byte1 == 0xFF && byte2 == 0xFE && byte3 != 0xFF)//Unicode\n                {\n                    targetEncoding = Encoding.Unicode;\n                }\n\n                if (byte1 == 0xEF && byte2 == 0xBB && byte3 == 0xBF)//UTF8\n                {\n\n                    targetEncoding = Encoding.UTF8;\n\n                }\n\n                //恢复Seek位置       \n                stream.Seek(origPos, SeekOrigin.Begin);\n            }\n\n            return targetEncoding;\n        }\n        #endregion\n\n\n    }\n}\n\n```\n","source":"_posts/技术/2018-03-09-SBC大数据导入(代码).md","raw":"---\ntitle: SBC大数据导入(代码)\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: csharp\n---\n\n```c#\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Data;\nusing System.IO;\nusing System.Threading;\nusing System.Web;\nusing System.Xml;\nusing System.Configuration;\nusing System.Data.SqlClient;\nusing WXMP.WinService.Data;\n\nnamespace Utility.DataImport\n{\n    public class TxtImport\n    {\n        /// <summary>\n        /// 导入数据\n        /// </summary>\n        /// <param name=\"fileName\">文件名</param>\n        /// <param name=\"columnCount\"></param>\n        /// <param name=\"xmlTableName\">xml配置名</param>\n        /// <param name=\"RealTableName\">数据库表名称</param>\n        /// <param name=\"defaultValue\"></param>\n        /// <param name=\"ConnectionKeyName\">数据库连接配置</param>\n        /// <param name=\"heardRowCount\">文件头定义行数</param>\n        /// <param name=\"footRowCount\">文件尾定义行数</param>\n        /// <returns></returns>\n        public static int ImportData(string fileName, string xmlTableName, Dictionary<string, object> defaultValue, string ConnectionKeyName = \"default\", int heardRowCount = 0, int footRowCount = 0)\n        {\n            if (fileName == \"\")\n                return 0;\n            return Insert(fileName, xmlTableName, defaultValue, ConnectionKeyName, heardRowCount, footRowCount);\n        }\n\n        /// <summary>\n        /// 导入文本文件\n        /// </summary>\n        /// <param name=\"fileFullName\">文本全路径</param>\n        /// <param name=\"columnCount\">文本里需要导入的列的数目</param>\n        public static int Insert(string fileFullName, string xmlTableName, Dictionary<string, object> defaultValue, string ConnectionKeyName, int heardRowCount = 0, int footRowCount = 0)\n        {\n            string exesql = string.Empty;\n            string tablename = string.Empty;\n            DataTable dt = XmlToDataTable(xmlTableName, out tablename, out exesql);\n            if (dt != null)\n            {\n                LoadAdpaterDataAndImport(fileFullName, dt.Columns.Count, dt, defaultValue, ConnectionKeyName, tablename, heardRowCount, footRowCount);\n\n                DbHelper.ExecuteNonQuery(exesql, ConnectionKeyName);\n                return dt.Rows.Count;\n            }\n\n            return 0;\n        }\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"fileFullName\"></param>\n        /// <param name=\"columnCount\"></param>\n        /// <param name=\"pDTScheme\"></param>\n        /// <param name=\"defaultValue\"></param>\n        /// <param name=\"connectionName\"></param>\n        /// <param name=\"realTableName\"></param>\n        /// <param name=\"heardRowCount\"></param>\n        /// <param name=\"footRowCount\"></param>\n        public static void LoadAdpaterDataAndImport(string fileFullName, int columnCount, DataTable pDTScheme, Dictionary<string, object> defaultValue, string connectionName, string realTableName, int heardRowCount = 0, int footRowCount = 0)\n        {\n            try\n            {\n                using (StreamReader sr = new StreamReader(fileFullName, Encoding.Default, true))\n                {\n                    string strTmp;\n                    DataRow dr;\n                    int i = 0;\n                    while (!sr.EndOfStream)\n                    {\n                        strTmp = sr.ReadLine();\n                        if (string.IsNullOrEmpty(strTmp))\n                            continue;\n                        i++;\n                        if (i <= heardRowCount) continue;\n                        heardRowCount = 0;\n                        dr = GetDataRow(strTmp, columnCount, pDTScheme, defaultValue);\n                        if (dr != null)\n                            pDTScheme.Rows.Add(dr);\n                        if (i % 100000 == 0)\n                        {\n                            UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);\n                            pDTScheme.Rows.Clear();\n                            i = 0;\n                            Thread.Sleep(1000);\n                        }\n                    }\n                    if (pDTScheme.Rows.Count > 0)\n                        UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);\n                    DbHelper.ExecuteNonQuery(@\"INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES('\" + fileFullName.Substring(fileFullName.LastIndexOf(\"\\\\\") + 1) + \"','\" + DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \"','\" + (i - heardRowCount - footRowCount).ToString() + \"','0');\", connectionName);\n                }\n            }\n            catch (Exception ex)\n            {\n                DbHelper.ExecuteNonQuery(@\"INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES('\" + fileFullName.Substring(fileFullName.LastIndexOf(\"\\\\\") + 1) + \"','\" + DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \"','','3');\", connectionName);\n                Utility.Logging.Log.Instance.Write(\"读取文件发生异常\" + ex.Message, Logging.MessageType.Error);\n            }\n        }\n\n        protected static DataRow GetDataRow(string strTmp, int columnCount, DataTable pDTScheme, Dictionary<string, object> defaultValue)\n        {\n            string[] result = strTmp.Split(new string[] { \"&&\" }, StringSplitOptions.None);\n            DataRow dr = null;\n            if (result.Length >= columnCount)\n            {\n                dr = pDTScheme.NewRow();\n                for (int n = 0; n < columnCount; n++)\n                {\n                    try\n                    {\n                        if (pDTScheme.Columns[n].DataType == typeof(System.Decimal) && result[n] == \"\")\n                        {\n                            dr[n] = 0;\n                        }\n                        else if (pDTScheme.Columns[n].DataType == typeof(System.Int32) && result[n] == \"\")\n                        {\n                            dr[n] = 0;\n                        }\n                        else if (pDTScheme.Columns[n].DataType != typeof(System.String) && result[n] == \"\")\n                        {\n                            dr[n] = DBNull.Value;\n                        }\n                        else if (pDTScheme.Columns[n].DataType != typeof(System.DateTime) && result[n] == \"\")\n                        {\n                            dr[n] = DBNull.Value;\n                        }\n                        else\n                            dr[n] = result[n];\n                    }\n                    catch\n                    {\n                        dr[n] = DBNull.Value;\n                    }\n                }\n                Type t = null;\n                DataColumn dc = null;\n                object obj = null;\n                for (int n = columnCount; n < pDTScheme.Columns.Count; n++)\n                {\n                    dc = pDTScheme.Columns[n];\n                    if (defaultValue != null)\n                    {\n                        if (defaultValue.TryGetValue(dc.ColumnName, out obj))\n                        {\n                            dr[n] = obj;\n                        }\n                        else\n                        {\n                            if (dc.DefaultValue == DBNull.Value)\n                            {\n                                t = pDTScheme.Columns[n].DataType;\n                                if (t == typeof(String))\n                                    dr[n] = \"\";\n                                else if (t == typeof(Guid))\n                                    dr[n] = Guid.NewGuid();\n                                else if (t == typeof(DateTime))\n                                    dr[n] = DateTime.Now;\n                                else if (t == typeof(int))\n                                    dr[n] = 0;\n                                else if (t == typeof(decimal))\n                                    dr[n] = 0.00;\n                            }\n                            else\n                            {\n                                dr[n] = pDTScheme.Columns[n].DefaultValue;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (dc.DefaultValue == DBNull.Value)\n                        {\n                            t = pDTScheme.Columns[n].DataType;\n                            if (t == typeof(String))\n                                dr[n] = \"\";\n                            else if (t == typeof(Guid))\n                                dr[n] = Guid.NewGuid();\n                            else if (t == typeof(DateTime))\n                                dr[n] = DateTime.Now;\n                            else if (t == typeof(int))\n                                dr[n] = 0;\n                            else if (t == typeof(decimal))\n                                dr[n] = 0.00;\n                        }\n                        else\n                        {\n                            dr[n] = pDTScheme.Columns[n].DefaultValue;\n                        }\n\n                    }\n                }\n\n            }\n            return dr;\n        }\n\n\n        #region【封装的业务逻辑方法，配合InsertBossDetail进行使用】\n        public static DataTable XmlToDataTable(string dataName, out string tablename, out string exesql)\n        {\n            tablename = string.Empty;\n            exesql = string.Empty;\n            string path = System.AppDomain.CurrentDomain.BaseDirectory + \"/Config/Imps.config\";\n            XmlDocument doc = new XmlDocument();\n            doc.Load(path);\n            XmlNode tableRoot = doc.SelectSingleNode(\"/imps/imp[@name='\" + dataName + \"']\");\n            if (tableRoot != null)\n            {\n\n                DataTable dt = new DataTable();\n                DataColumn dc = null;\n                string defualtValue;\n                tablename = tableRoot.SelectSingleNode(\"table\").Attributes[\"name\"].Value;\n                exesql = tableRoot.SelectSingleNode(\"sql\").InnerText;\n                foreach (XmlNode node in tableRoot.SelectSingleNode(\"table\").ChildNodes)\n                {\n                    dc = new DataColumn(node.Attributes[\"name\"].Value.Trim(), Type.GetType(node.Attributes[\"type\"].Value.Trim()));\n                    if (!string.IsNullOrEmpty(defualtValue = node.Attributes[\"default\"] != null ? node.Attributes[\"default\"].Value.Trim() : null))\n                        dc.DefaultValue = defualtValue;\n                    dt.Columns.Add(dc);\n\n                }\n                return dt;\n            }\n            return null;\n        }\n\n        /// <summary>\n        /// 用SBC方法插入数据库\n        /// </summary>\n        /// <param name=\"ConnectionStringKey\">要插入的数据库</param>\n        /// <param name=\"pDataTable\">要插入的DATATABLE</param>\n        /// <param name=\"pTableName\">对应的数据库表名</param>\n        /// <param name=\"pBulkCopyTimeout\">数据库连接过期时间,单位：秒</param>\n        public static void UseSBCInsertDB(string ConnectionStringKey, DataTable pDataTable, string pTableName, int pBulkCopyTimeout = -1, bool appingFlag = false)\n        {\n            string connectionString = ConfigurationManager.ConnectionStrings[ConnectionStringKey].ConnectionString;\n            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(connectionString))\n            {\n                sqlBulkCopy.DestinationTableName = pTableName;\n                sqlBulkCopy.BatchSize = pDataTable.Rows.Count;\n                if (pBulkCopyTimeout > 0)\n                    sqlBulkCopy.BulkCopyTimeout = pBulkCopyTimeout;\n                if (appingFlag)\n                {\n                    foreach (DataColumn dc in pDataTable.Columns)\n                        sqlBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName);\n                }\n                using (SqlConnection sqlConnection = new SqlConnection(connectionString))\n                {\n                    sqlConnection.Open();\n                    if (pDataTable != null && pDataTable.Rows.Count != 0)\n                    {\n                        sqlBulkCopy.WriteToServer(pDataTable);\n                    }\n                }\n\n            }\n        }\n        #endregion\n\n        #region【转换文件】\n        public static string TransferFile(string fileFullName, bool isDelOriFile = true)\n        {\n            string path = Path.GetDirectoryName(fileFullName);\n            //fileFullName.Substring(0, fileFullName.LastIndexOf('\\\\'));\n            string newFileName = string.Format(\"{0}{1}.txt\", path, DateTime.Now.ToString(\"yyyyMMddHHmmss\"));\n            Encoding en = GetEncoding(fileFullName, Encoding.Default);\n            using (StreamReader sr = new StreamReader(fileFullName, en, true))\n            {\n                using (StreamWriter sw = new StreamWriter(newFileName, true, Encoding.UTF8))\n                {\n                    string strTmp;\n                    while (!sr.EndOfStream)\n                    {\n                        strTmp = sr.ReadLine();\n                        if (!string.IsNullOrEmpty(strTmp))\n                        {\n                            sw.WriteLine(strTmp);\n                        }\n                    }\n                    sw.Flush();\n                    sw.Close();\n                }\n            }\n            if (isDelOriFile && File.Exists(fileFullName))\n                File.Delete(fileFullName);\n            return newFileName;\n        }\n\n\n        /// <summary>\n        /// 取得一个文本文件的编码方式。\n        /// </summary>\n        /// <param name=\"fileName\">文件名。</param>\n        /// <param name=\"defaultEncoding\">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>\n        /// <returns></returns>\n        public static Encoding GetEncoding(string fileName, Encoding defaultEncoding)\n        {\n            using (FileStream fs = new FileStream(fileName, FileMode.Open))\n            {\n                Encoding targetEncoding = GetEncoding(fs, defaultEncoding);\n                fs.Close();\n                return targetEncoding;\n            }\n        }\n\n\n        /// <summary>\n        /// 取得一个文本文件流的编码方式。\n        /// </summary>\n        /// <param name=\"stream\">文本文件流。</param>\n        /// <param name=\"defaultEncoding\">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>\n        /// <returns></returns>\n        public static Encoding GetEncoding(FileStream stream, Encoding defaultEncoding)\n        {\n\n            Encoding targetEncoding = defaultEncoding;\n            if (stream != null && stream.Length >= 2)\n            {\n\n                //保存文件流的前4个字节\n                byte byte1 = 0;\n                byte byte2 = 0;\n                byte byte3 = 0;\n                byte byte4 = 0;\n                //保存当前Seek位置\n                long origPos = stream.Seek(0, SeekOrigin.Begin);\n                stream.Seek(0, SeekOrigin.Begin);\n                int nByte = stream.ReadByte();\n                byte1 = Convert.ToByte(nByte);\n                byte2 = Convert.ToByte(stream.ReadByte());\n                if (stream.Length >= 3)\n                {\n                    byte3 = Convert.ToByte(stream.ReadByte());\n                }\n\n                if (stream.Length >= 4)\n                {\n                    byte4 = Convert.ToByte(stream.ReadByte());\n                }\n                //根据文件流的前4个字节判断Encoding\n                //Unicode {0xFF, 0xFE};\n                //BE-Unicode {0xFE, 0xFF};\n                //UTF8 = {0xEF, 0xBB, 0xBF};\n                if (byte1 == 0xFE && byte2 == 0xFF)//UnicodeBe\n                {\n                    targetEncoding = Encoding.BigEndianUnicode;\n                }\n\n                if (byte1 == 0xFF && byte2 == 0xFE && byte3 != 0xFF)//Unicode\n                {\n                    targetEncoding = Encoding.Unicode;\n                }\n\n                if (byte1 == 0xEF && byte2 == 0xBB && byte3 == 0xBF)//UTF8\n                {\n\n                    targetEncoding = Encoding.UTF8;\n\n                }\n\n                //恢复Seek位置       \n                stream.Seek(origPos, SeekOrigin.Begin);\n            }\n\n            return targetEncoding;\n        }\n        #endregion\n\n\n    }\n}\n\n```\n","slug":"技术/2018-03-09-SBC大数据导入(代码)","published":1,"updated":"2018-03-12T03:05:06.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj5e00245oq866ayfvzy","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Text;</span><br><span class=\"line\">using System.Data;</span><br><span class=\"line\">using System.IO;</span><br><span class=\"line\">using System.Threading;</span><br><span class=\"line\">using System.Web;</span><br><span class=\"line\">using System.Xml;</span><br><span class=\"line\">using System.Configuration;</span><br><span class=\"line\">using System.Data.SqlClient;</span><br><span class=\"line\">using WXMP.WinService.Data;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace Utility.DataImport</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class TxtImport</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 导入数据</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileName&quot;&gt;文件名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;xmlTableName&quot;&gt;xml配置名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;RealTableName&quot;&gt;数据库表名称&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultValue&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;ConnectionKeyName&quot;&gt;数据库连接配置&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;heardRowCount&quot;&gt;文件头定义行数&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;footRowCount&quot;&gt;文件尾定义行数&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static int ImportData(string fileName, string xmlTableName, Dictionary&lt;string, object&gt; defaultValue, string ConnectionKeyName = &quot;default&quot;, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (fileName == &quot;&quot;)</span><br><span class=\"line\">                return 0;</span><br><span class=\"line\">            return Insert(fileName, xmlTableName, defaultValue, ConnectionKeyName, heardRowCount, footRowCount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 导入文本文件</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileFullName&quot;&gt;文本全路径&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;文本里需要导入的列的数目&lt;/param&gt;</span><br><span class=\"line\">        public static int Insert(string fileFullName, string xmlTableName, Dictionary&lt;string, object&gt; defaultValue, string ConnectionKeyName, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string exesql = string.Empty;</span><br><span class=\"line\">            string tablename = string.Empty;</span><br><span class=\"line\">            DataTable dt = XmlToDataTable(xmlTableName, out tablename, out exesql);</span><br><span class=\"line\">            if (dt != null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                LoadAdpaterDataAndImport(fileFullName, dt.Columns.Count, dt, defaultValue, ConnectionKeyName, tablename, heardRowCount, footRowCount);</span><br><span class=\"line\"></span><br><span class=\"line\">                DbHelper.ExecuteNonQuery(exesql, ConnectionKeyName);</span><br><span class=\"line\">                return dt.Rows.Count;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// </span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileFullName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pDTScheme&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultValue&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;connectionName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;realTableName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;heardRowCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;footRowCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        public static void LoadAdpaterDataAndImport(string fileFullName, int columnCount, DataTable pDTScheme, Dictionary&lt;string, object&gt; defaultValue, string connectionName, string realTableName, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            try</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                using (StreamReader sr = new StreamReader(fileFullName, Encoding.Default, true))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    string strTmp;</span><br><span class=\"line\">                    DataRow dr;</span><br><span class=\"line\">                    int i = 0;</span><br><span class=\"line\">                    while (!sr.EndOfStream)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        strTmp = sr.ReadLine();</span><br><span class=\"line\">                        if (string.IsNullOrEmpty(strTmp))</span><br><span class=\"line\">                            continue;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                        if (i &lt;= heardRowCount) continue;</span><br><span class=\"line\">                        heardRowCount = 0;</span><br><span class=\"line\">                        dr = GetDataRow(strTmp, columnCount, pDTScheme, defaultValue);</span><br><span class=\"line\">                        if (dr != null)</span><br><span class=\"line\">                            pDTScheme.Rows.Add(dr);</span><br><span class=\"line\">                        if (i % 100000 == 0)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);</span><br><span class=\"line\">                            pDTScheme.Rows.Clear();</span><br><span class=\"line\">                            i = 0;</span><br><span class=\"line\">                            Thread.Sleep(1000);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (pDTScheme.Rows.Count &gt; 0)</span><br><span class=\"line\">                        UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);</span><br><span class=\"line\">                    DbHelper.ExecuteNonQuery(@&quot;INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES(&apos;&quot; + fileFullName.Substring(fileFullName.LastIndexOf(&quot;\\\\&quot;) + 1) + &quot;&apos;,&apos;&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;&apos;,&apos;&quot; + (i - heardRowCount - footRowCount).ToString() + &quot;&apos;,&apos;0&apos;);&quot;, connectionName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (Exception ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DbHelper.ExecuteNonQuery(@&quot;INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES(&apos;&quot; + fileFullName.Substring(fileFullName.LastIndexOf(&quot;\\\\&quot;) + 1) + &quot;&apos;,&apos;&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;&apos;,&apos;&apos;,&apos;3&apos;);&quot;, connectionName);</span><br><span class=\"line\">                Utility.Logging.Log.Instance.Write(&quot;读取文件发生异常&quot; + ex.Message, Logging.MessageType.Error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        protected static DataRow GetDataRow(string strTmp, int columnCount, DataTable pDTScheme, Dictionary&lt;string, object&gt; defaultValue)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string[] result = strTmp.Split(new string[] &#123; &quot;&amp;&amp;&quot; &#125;, StringSplitOptions.None);</span><br><span class=\"line\">            DataRow dr = null;</span><br><span class=\"line\">            if (result.Length &gt;= columnCount)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dr = pDTScheme.NewRow();</span><br><span class=\"line\">                for (int n = 0; n &lt; columnCount; n++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    try</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (pDTScheme.Columns[n].DataType == typeof(System.Decimal) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType == typeof(System.Int32) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType != typeof(System.String) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = DBNull.Value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType != typeof(System.DateTime) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = DBNull.Value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                            dr[n] = result[n];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    catch</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        dr[n] = DBNull.Value;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Type t = null;</span><br><span class=\"line\">                DataColumn dc = null;</span><br><span class=\"line\">                object obj = null;</span><br><span class=\"line\">                for (int n = columnCount; n &lt; pDTScheme.Columns.Count; n++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dc = pDTScheme.Columns[n];</span><br><span class=\"line\">                    if (defaultValue != null)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (defaultValue.TryGetValue(dc.ColumnName, out obj))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = obj;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            if (dc.DefaultValue == DBNull.Value)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                t = pDTScheme.Columns[n].DataType;</span><br><span class=\"line\">                                if (t == typeof(String))</span><br><span class=\"line\">                                    dr[n] = &quot;&quot;;</span><br><span class=\"line\">                                else if (t == typeof(Guid))</span><br><span class=\"line\">                                    dr[n] = Guid.NewGuid();</span><br><span class=\"line\">                                else if (t == typeof(DateTime))</span><br><span class=\"line\">                                    dr[n] = DateTime.Now;</span><br><span class=\"line\">                                else if (t == typeof(int))</span><br><span class=\"line\">                                    dr[n] = 0;</span><br><span class=\"line\">                                else if (t == typeof(decimal))</span><br><span class=\"line\">                                    dr[n] = 0.00;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            else</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                dr[n] = pDTScheme.Columns[n].DefaultValue;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (dc.DefaultValue == DBNull.Value)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            t = pDTScheme.Columns[n].DataType;</span><br><span class=\"line\">                            if (t == typeof(String))</span><br><span class=\"line\">                                dr[n] = &quot;&quot;;</span><br><span class=\"line\">                            else if (t == typeof(Guid))</span><br><span class=\"line\">                                dr[n] = Guid.NewGuid();</span><br><span class=\"line\">                            else if (t == typeof(DateTime))</span><br><span class=\"line\">                                dr[n] = DateTime.Now;</span><br><span class=\"line\">                            else if (t == typeof(int))</span><br><span class=\"line\">                                dr[n] = 0;</span><br><span class=\"line\">                            else if (t == typeof(decimal))</span><br><span class=\"line\">                                dr[n] = 0.00;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = pDTScheme.Columns[n].DefaultValue;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return dr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        #region【封装的业务逻辑方法，配合InsertBossDetail进行使用】</span><br><span class=\"line\">        public static DataTable XmlToDataTable(string dataName, out string tablename, out string exesql)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tablename = string.Empty;</span><br><span class=\"line\">            exesql = string.Empty;</span><br><span class=\"line\">            string path = System.AppDomain.CurrentDomain.BaseDirectory + &quot;/Config/Imps.config&quot;;</span><br><span class=\"line\">            XmlDocument doc = new XmlDocument();</span><br><span class=\"line\">            doc.Load(path);</span><br><span class=\"line\">            XmlNode tableRoot = doc.SelectSingleNode(&quot;/imps/imp[@name=&apos;&quot; + dataName + &quot;&apos;]&quot;);</span><br><span class=\"line\">            if (tableRoot != null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                DataTable dt = new DataTable();</span><br><span class=\"line\">                DataColumn dc = null;</span><br><span class=\"line\">                string defualtValue;</span><br><span class=\"line\">                tablename = tableRoot.SelectSingleNode(&quot;table&quot;).Attributes[&quot;name&quot;].Value;</span><br><span class=\"line\">                exesql = tableRoot.SelectSingleNode(&quot;sql&quot;).InnerText;</span><br><span class=\"line\">                foreach (XmlNode node in tableRoot.SelectSingleNode(&quot;table&quot;).ChildNodes)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dc = new DataColumn(node.Attributes[&quot;name&quot;].Value.Trim(), Type.GetType(node.Attributes[&quot;type&quot;].Value.Trim()));</span><br><span class=\"line\">                    if (!string.IsNullOrEmpty(defualtValue = node.Attributes[&quot;default&quot;] != null ? node.Attributes[&quot;default&quot;].Value.Trim() : null))</span><br><span class=\"line\">                        dc.DefaultValue = defualtValue;</span><br><span class=\"line\">                    dt.Columns.Add(dc);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return dt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 用SBC方法插入数据库</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;ConnectionStringKey&quot;&gt;要插入的数据库&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pDataTable&quot;&gt;要插入的DATATABLE&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pTableName&quot;&gt;对应的数据库表名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pBulkCopyTimeout&quot;&gt;数据库连接过期时间,单位：秒&lt;/param&gt;</span><br><span class=\"line\">        public static void UseSBCInsertDB(string ConnectionStringKey, DataTable pDataTable, string pTableName, int pBulkCopyTimeout = -1, bool appingFlag = false)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string connectionString = ConfigurationManager.ConnectionStrings[ConnectionStringKey].ConnectionString;</span><br><span class=\"line\">            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sqlBulkCopy.DestinationTableName = pTableName;</span><br><span class=\"line\">                sqlBulkCopy.BatchSize = pDataTable.Rows.Count;</span><br><span class=\"line\">                if (pBulkCopyTimeout &gt; 0)</span><br><span class=\"line\">                    sqlBulkCopy.BulkCopyTimeout = pBulkCopyTimeout;</span><br><span class=\"line\">                if (appingFlag)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    foreach (DataColumn dc in pDataTable.Columns)</span><br><span class=\"line\">                        sqlBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                using (SqlConnection sqlConnection = new SqlConnection(connectionString))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    sqlConnection.Open();</span><br><span class=\"line\">                    if (pDataTable != null &amp;&amp; pDataTable.Rows.Count != 0)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        sqlBulkCopy.WriteToServer(pDataTable);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">        #region【转换文件】</span><br><span class=\"line\">        public static string TransferFile(string fileFullName, bool isDelOriFile = true)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string path = Path.GetDirectoryName(fileFullName);</span><br><span class=\"line\">            //fileFullName.Substring(0, fileFullName.LastIndexOf(&apos;\\\\&apos;));</span><br><span class=\"line\">            string newFileName = string.Format(&quot;&#123;0&#125;&#123;1&#125;.txt&quot;, path, DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;));</span><br><span class=\"line\">            Encoding en = GetEncoding(fileFullName, Encoding.Default);</span><br><span class=\"line\">            using (StreamReader sr = new StreamReader(fileFullName, en, true))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                using (StreamWriter sw = new StreamWriter(newFileName, true, Encoding.UTF8))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    string strTmp;</span><br><span class=\"line\">                    while (!sr.EndOfStream)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        strTmp = sr.ReadLine();</span><br><span class=\"line\">                        if (!string.IsNullOrEmpty(strTmp))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            sw.WriteLine(strTmp);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    sw.Flush();</span><br><span class=\"line\">                    sw.Close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (isDelOriFile &amp;&amp; File.Exists(fileFullName))</span><br><span class=\"line\">                File.Delete(fileFullName);</span><br><span class=\"line\">            return newFileName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 取得一个文本文件的编码方式。</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileName&quot;&gt;文件名。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultEncoding&quot;&gt;默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static Encoding GetEncoding(string fileName, Encoding defaultEncoding)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            using (FileStream fs = new FileStream(fileName, FileMode.Open))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Encoding targetEncoding = GetEncoding(fs, defaultEncoding);</span><br><span class=\"line\">                fs.Close();</span><br><span class=\"line\">                return targetEncoding;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 取得一个文本文件流的编码方式。</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;stream&quot;&gt;文本文件流。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultEncoding&quot;&gt;默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static Encoding GetEncoding(FileStream stream, Encoding defaultEncoding)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Encoding targetEncoding = defaultEncoding;</span><br><span class=\"line\">            if (stream != null &amp;&amp; stream.Length &gt;= 2)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                //保存文件流的前4个字节</span><br><span class=\"line\">                byte byte1 = 0;</span><br><span class=\"line\">                byte byte2 = 0;</span><br><span class=\"line\">                byte byte3 = 0;</span><br><span class=\"line\">                byte byte4 = 0;</span><br><span class=\"line\">                //保存当前Seek位置</span><br><span class=\"line\">                long origPos = stream.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">                stream.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">                int nByte = stream.ReadByte();</span><br><span class=\"line\">                byte1 = Convert.ToByte(nByte);</span><br><span class=\"line\">                byte2 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                if (stream.Length &gt;= 3)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    byte3 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (stream.Length &gt;= 4)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    byte4 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //根据文件流的前4个字节判断Encoding</span><br><span class=\"line\">                //Unicode &#123;0xFF, 0xFE&#125;;</span><br><span class=\"line\">                //BE-Unicode &#123;0xFE, 0xFF&#125;;</span><br><span class=\"line\">                //UTF8 = &#123;0xEF, 0xBB, 0xBF&#125;;</span><br><span class=\"line\">                if (byte1 == 0xFE &amp;&amp; byte2 == 0xFF)//UnicodeBe</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    targetEncoding = Encoding.BigEndianUnicode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (byte1 == 0xFF &amp;&amp; byte2 == 0xFE &amp;&amp; byte3 != 0xFF)//Unicode</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    targetEncoding = Encoding.Unicode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (byte1 == 0xEF &amp;&amp; byte2 == 0xBB &amp;&amp; byte3 == 0xBF)//UTF8</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    targetEncoding = Encoding.UTF8;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //恢复Seek位置       </span><br><span class=\"line\">                stream.Seek(origPos, SeekOrigin.Begin);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return targetEncoding;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #endregion</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Text;</span><br><span class=\"line\">using System.Data;</span><br><span class=\"line\">using System.IO;</span><br><span class=\"line\">using System.Threading;</span><br><span class=\"line\">using System.Web;</span><br><span class=\"line\">using System.Xml;</span><br><span class=\"line\">using System.Configuration;</span><br><span class=\"line\">using System.Data.SqlClient;</span><br><span class=\"line\">using WXMP.WinService.Data;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace Utility.DataImport</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class TxtImport</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 导入数据</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileName&quot;&gt;文件名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;xmlTableName&quot;&gt;xml配置名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;RealTableName&quot;&gt;数据库表名称&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultValue&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;ConnectionKeyName&quot;&gt;数据库连接配置&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;heardRowCount&quot;&gt;文件头定义行数&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;footRowCount&quot;&gt;文件尾定义行数&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static int ImportData(string fileName, string xmlTableName, Dictionary&lt;string, object&gt; defaultValue, string ConnectionKeyName = &quot;default&quot;, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (fileName == &quot;&quot;)</span><br><span class=\"line\">                return 0;</span><br><span class=\"line\">            return Insert(fileName, xmlTableName, defaultValue, ConnectionKeyName, heardRowCount, footRowCount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 导入文本文件</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileFullName&quot;&gt;文本全路径&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;文本里需要导入的列的数目&lt;/param&gt;</span><br><span class=\"line\">        public static int Insert(string fileFullName, string xmlTableName, Dictionary&lt;string, object&gt; defaultValue, string ConnectionKeyName, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string exesql = string.Empty;</span><br><span class=\"line\">            string tablename = string.Empty;</span><br><span class=\"line\">            DataTable dt = XmlToDataTable(xmlTableName, out tablename, out exesql);</span><br><span class=\"line\">            if (dt != null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                LoadAdpaterDataAndImport(fileFullName, dt.Columns.Count, dt, defaultValue, ConnectionKeyName, tablename, heardRowCount, footRowCount);</span><br><span class=\"line\"></span><br><span class=\"line\">                DbHelper.ExecuteNonQuery(exesql, ConnectionKeyName);</span><br><span class=\"line\">                return dt.Rows.Count;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// </span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileFullName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pDTScheme&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultValue&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;connectionName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;realTableName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;heardRowCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;footRowCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        public static void LoadAdpaterDataAndImport(string fileFullName, int columnCount, DataTable pDTScheme, Dictionary&lt;string, object&gt; defaultValue, string connectionName, string realTableName, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            try</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                using (StreamReader sr = new StreamReader(fileFullName, Encoding.Default, true))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    string strTmp;</span><br><span class=\"line\">                    DataRow dr;</span><br><span class=\"line\">                    int i = 0;</span><br><span class=\"line\">                    while (!sr.EndOfStream)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        strTmp = sr.ReadLine();</span><br><span class=\"line\">                        if (string.IsNullOrEmpty(strTmp))</span><br><span class=\"line\">                            continue;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                        if (i &lt;= heardRowCount) continue;</span><br><span class=\"line\">                        heardRowCount = 0;</span><br><span class=\"line\">                        dr = GetDataRow(strTmp, columnCount, pDTScheme, defaultValue);</span><br><span class=\"line\">                        if (dr != null)</span><br><span class=\"line\">                            pDTScheme.Rows.Add(dr);</span><br><span class=\"line\">                        if (i % 100000 == 0)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);</span><br><span class=\"line\">                            pDTScheme.Rows.Clear();</span><br><span class=\"line\">                            i = 0;</span><br><span class=\"line\">                            Thread.Sleep(1000);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (pDTScheme.Rows.Count &gt; 0)</span><br><span class=\"line\">                        UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);</span><br><span class=\"line\">                    DbHelper.ExecuteNonQuery(@&quot;INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES(&apos;&quot; + fileFullName.Substring(fileFullName.LastIndexOf(&quot;\\\\&quot;) + 1) + &quot;&apos;,&apos;&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;&apos;,&apos;&quot; + (i - heardRowCount - footRowCount).ToString() + &quot;&apos;,&apos;0&apos;);&quot;, connectionName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (Exception ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DbHelper.ExecuteNonQuery(@&quot;INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES(&apos;&quot; + fileFullName.Substring(fileFullName.LastIndexOf(&quot;\\\\&quot;) + 1) + &quot;&apos;,&apos;&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;&apos;,&apos;&apos;,&apos;3&apos;);&quot;, connectionName);</span><br><span class=\"line\">                Utility.Logging.Log.Instance.Write(&quot;读取文件发生异常&quot; + ex.Message, Logging.MessageType.Error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        protected static DataRow GetDataRow(string strTmp, int columnCount, DataTable pDTScheme, Dictionary&lt;string, object&gt; defaultValue)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string[] result = strTmp.Split(new string[] &#123; &quot;&amp;&amp;&quot; &#125;, StringSplitOptions.None);</span><br><span class=\"line\">            DataRow dr = null;</span><br><span class=\"line\">            if (result.Length &gt;= columnCount)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dr = pDTScheme.NewRow();</span><br><span class=\"line\">                for (int n = 0; n &lt; columnCount; n++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    try</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (pDTScheme.Columns[n].DataType == typeof(System.Decimal) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType == typeof(System.Int32) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType != typeof(System.String) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = DBNull.Value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType != typeof(System.DateTime) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = DBNull.Value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                            dr[n] = result[n];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    catch</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        dr[n] = DBNull.Value;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Type t = null;</span><br><span class=\"line\">                DataColumn dc = null;</span><br><span class=\"line\">                object obj = null;</span><br><span class=\"line\">                for (int n = columnCount; n &lt; pDTScheme.Columns.Count; n++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dc = pDTScheme.Columns[n];</span><br><span class=\"line\">                    if (defaultValue != null)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (defaultValue.TryGetValue(dc.ColumnName, out obj))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = obj;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            if (dc.DefaultValue == DBNull.Value)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                t = pDTScheme.Columns[n].DataType;</span><br><span class=\"line\">                                if (t == typeof(String))</span><br><span class=\"line\">                                    dr[n] = &quot;&quot;;</span><br><span class=\"line\">                                else if (t == typeof(Guid))</span><br><span class=\"line\">                                    dr[n] = Guid.NewGuid();</span><br><span class=\"line\">                                else if (t == typeof(DateTime))</span><br><span class=\"line\">                                    dr[n] = DateTime.Now;</span><br><span class=\"line\">                                else if (t == typeof(int))</span><br><span class=\"line\">                                    dr[n] = 0;</span><br><span class=\"line\">                                else if (t == typeof(decimal))</span><br><span class=\"line\">                                    dr[n] = 0.00;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            else</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                dr[n] = pDTScheme.Columns[n].DefaultValue;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (dc.DefaultValue == DBNull.Value)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            t = pDTScheme.Columns[n].DataType;</span><br><span class=\"line\">                            if (t == typeof(String))</span><br><span class=\"line\">                                dr[n] = &quot;&quot;;</span><br><span class=\"line\">                            else if (t == typeof(Guid))</span><br><span class=\"line\">                                dr[n] = Guid.NewGuid();</span><br><span class=\"line\">                            else if (t == typeof(DateTime))</span><br><span class=\"line\">                                dr[n] = DateTime.Now;</span><br><span class=\"line\">                            else if (t == typeof(int))</span><br><span class=\"line\">                                dr[n] = 0;</span><br><span class=\"line\">                            else if (t == typeof(decimal))</span><br><span class=\"line\">                                dr[n] = 0.00;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = pDTScheme.Columns[n].DefaultValue;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return dr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        #region【封装的业务逻辑方法，配合InsertBossDetail进行使用】</span><br><span class=\"line\">        public static DataTable XmlToDataTable(string dataName, out string tablename, out string exesql)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tablename = string.Empty;</span><br><span class=\"line\">            exesql = string.Empty;</span><br><span class=\"line\">            string path = System.AppDomain.CurrentDomain.BaseDirectory + &quot;/Config/Imps.config&quot;;</span><br><span class=\"line\">            XmlDocument doc = new XmlDocument();</span><br><span class=\"line\">            doc.Load(path);</span><br><span class=\"line\">            XmlNode tableRoot = doc.SelectSingleNode(&quot;/imps/imp[@name=&apos;&quot; + dataName + &quot;&apos;]&quot;);</span><br><span class=\"line\">            if (tableRoot != null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                DataTable dt = new DataTable();</span><br><span class=\"line\">                DataColumn dc = null;</span><br><span class=\"line\">                string defualtValue;</span><br><span class=\"line\">                tablename = tableRoot.SelectSingleNode(&quot;table&quot;).Attributes[&quot;name&quot;].Value;</span><br><span class=\"line\">                exesql = tableRoot.SelectSingleNode(&quot;sql&quot;).InnerText;</span><br><span class=\"line\">                foreach (XmlNode node in tableRoot.SelectSingleNode(&quot;table&quot;).ChildNodes)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dc = new DataColumn(node.Attributes[&quot;name&quot;].Value.Trim(), Type.GetType(node.Attributes[&quot;type&quot;].Value.Trim()));</span><br><span class=\"line\">                    if (!string.IsNullOrEmpty(defualtValue = node.Attributes[&quot;default&quot;] != null ? node.Attributes[&quot;default&quot;].Value.Trim() : null))</span><br><span class=\"line\">                        dc.DefaultValue = defualtValue;</span><br><span class=\"line\">                    dt.Columns.Add(dc);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return dt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 用SBC方法插入数据库</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;ConnectionStringKey&quot;&gt;要插入的数据库&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pDataTable&quot;&gt;要插入的DATATABLE&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pTableName&quot;&gt;对应的数据库表名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pBulkCopyTimeout&quot;&gt;数据库连接过期时间,单位：秒&lt;/param&gt;</span><br><span class=\"line\">        public static void UseSBCInsertDB(string ConnectionStringKey, DataTable pDataTable, string pTableName, int pBulkCopyTimeout = -1, bool appingFlag = false)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string connectionString = ConfigurationManager.ConnectionStrings[ConnectionStringKey].ConnectionString;</span><br><span class=\"line\">            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sqlBulkCopy.DestinationTableName = pTableName;</span><br><span class=\"line\">                sqlBulkCopy.BatchSize = pDataTable.Rows.Count;</span><br><span class=\"line\">                if (pBulkCopyTimeout &gt; 0)</span><br><span class=\"line\">                    sqlBulkCopy.BulkCopyTimeout = pBulkCopyTimeout;</span><br><span class=\"line\">                if (appingFlag)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    foreach (DataColumn dc in pDataTable.Columns)</span><br><span class=\"line\">                        sqlBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                using (SqlConnection sqlConnection = new SqlConnection(connectionString))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    sqlConnection.Open();</span><br><span class=\"line\">                    if (pDataTable != null &amp;&amp; pDataTable.Rows.Count != 0)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        sqlBulkCopy.WriteToServer(pDataTable);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">        #region【转换文件】</span><br><span class=\"line\">        public static string TransferFile(string fileFullName, bool isDelOriFile = true)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string path = Path.GetDirectoryName(fileFullName);</span><br><span class=\"line\">            //fileFullName.Substring(0, fileFullName.LastIndexOf(&apos;\\\\&apos;));</span><br><span class=\"line\">            string newFileName = string.Format(&quot;&#123;0&#125;&#123;1&#125;.txt&quot;, path, DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;));</span><br><span class=\"line\">            Encoding en = GetEncoding(fileFullName, Encoding.Default);</span><br><span class=\"line\">            using (StreamReader sr = new StreamReader(fileFullName, en, true))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                using (StreamWriter sw = new StreamWriter(newFileName, true, Encoding.UTF8))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    string strTmp;</span><br><span class=\"line\">                    while (!sr.EndOfStream)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        strTmp = sr.ReadLine();</span><br><span class=\"line\">                        if (!string.IsNullOrEmpty(strTmp))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            sw.WriteLine(strTmp);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    sw.Flush();</span><br><span class=\"line\">                    sw.Close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (isDelOriFile &amp;&amp; File.Exists(fileFullName))</span><br><span class=\"line\">                File.Delete(fileFullName);</span><br><span class=\"line\">            return newFileName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 取得一个文本文件的编码方式。</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileName&quot;&gt;文件名。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultEncoding&quot;&gt;默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static Encoding GetEncoding(string fileName, Encoding defaultEncoding)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            using (FileStream fs = new FileStream(fileName, FileMode.Open))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Encoding targetEncoding = GetEncoding(fs, defaultEncoding);</span><br><span class=\"line\">                fs.Close();</span><br><span class=\"line\">                return targetEncoding;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 取得一个文本文件流的编码方式。</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;stream&quot;&gt;文本文件流。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultEncoding&quot;&gt;默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static Encoding GetEncoding(FileStream stream, Encoding defaultEncoding)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Encoding targetEncoding = defaultEncoding;</span><br><span class=\"line\">            if (stream != null &amp;&amp; stream.Length &gt;= 2)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                //保存文件流的前4个字节</span><br><span class=\"line\">                byte byte1 = 0;</span><br><span class=\"line\">                byte byte2 = 0;</span><br><span class=\"line\">                byte byte3 = 0;</span><br><span class=\"line\">                byte byte4 = 0;</span><br><span class=\"line\">                //保存当前Seek位置</span><br><span class=\"line\">                long origPos = stream.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">                stream.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">                int nByte = stream.ReadByte();</span><br><span class=\"line\">                byte1 = Convert.ToByte(nByte);</span><br><span class=\"line\">                byte2 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                if (stream.Length &gt;= 3)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    byte3 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (stream.Length &gt;= 4)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    byte4 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //根据文件流的前4个字节判断Encoding</span><br><span class=\"line\">                //Unicode &#123;0xFF, 0xFE&#125;;</span><br><span class=\"line\">                //BE-Unicode &#123;0xFE, 0xFF&#125;;</span><br><span class=\"line\">                //UTF8 = &#123;0xEF, 0xBB, 0xBF&#125;;</span><br><span class=\"line\">                if (byte1 == 0xFE &amp;&amp; byte2 == 0xFF)//UnicodeBe</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    targetEncoding = Encoding.BigEndianUnicode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (byte1 == 0xFF &amp;&amp; byte2 == 0xFE &amp;&amp; byte3 != 0xFF)//Unicode</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    targetEncoding = Encoding.Unicode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (byte1 == 0xEF &amp;&amp; byte2 == 0xBB &amp;&amp; byte3 == 0xBF)//UTF8</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    targetEncoding = Encoding.UTF8;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //恢复Seek位置       </span><br><span class=\"line\">                stream.Seek(origPos, SeekOrigin.Begin);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return targetEncoding;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #endregion</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"c语言12-共同体,枚举","date":"2015-03-23T12:49:16.000Z","_content":"\n## 公用体(union)\n1. 共用体的申明和结构体一样，\n2. 公用体可以嵌套到结构体中，达到一列可以表示不同类型的结果\n3. 公用体的大小，由最大的成员空间构成\n4. 公用体每一个成员都共同拥有一个首地址，只是因为寻址能力的不同而取到的数据不同，小类型都从低位开始获取数据 \n小端序.就是（栈空间）低位存的是后申请的数据，我们的电脑一般都是小端序\n大端序.则是低位存的是先申请的数据\n验证大小端序方法.\n\n### 验证大小端序的两种方法\n\n```c\nunion utest\n\t\t{\n\t\t\tint num;\n\t\t\tchar num2;\n\t\t};\n\t\tint main(void)\n\t\t{\n\t\t\tunion utest;\n\t\t\tt.num = 0x12345678;//储存在栈空间因为栈空间是先申请的在高位（自上向下）  \n\t\t\t//printf(\"%x\\n\",t.num2);//系统帮忙省略了0x\n\t\t\tif (t.num2 == 0x78)\n\t\t\t\tprintf(\"小端序！\\n\");\n\t\t\telse\n\t\t\t\tprintf(\"大端序！\\n\");\n\t\t\treturn0;\n\t\t}\n```\n\n\n\n```c\nint data=0x12345678;\nif((char)data==0x78)//if(*(char*)(&data))//先获取到data的地址，然后将int*转换成char*，所以取到最后一个字节的空间地址，再取出*\n    printf(\"小端序\");\nelse\n    printf(\"大端序\");\n```\n\n\n### 枚举\n枚举是一个整形的常量集合，给前面的一个变量赋值一个数值，后面的变量会逐一加一","source":"_posts/技术/2018-03-09-c语言12-共同体,枚举.md","raw":"---\ntitle: c语言12-共同体,枚举\ndate: 2015-03-23 20:49:16\ncategories: 技术\ntags: c语言\n---\n\n## 公用体(union)\n1. 共用体的申明和结构体一样，\n2. 公用体可以嵌套到结构体中，达到一列可以表示不同类型的结果\n3. 公用体的大小，由最大的成员空间构成\n4. 公用体每一个成员都共同拥有一个首地址，只是因为寻址能力的不同而取到的数据不同，小类型都从低位开始获取数据 \n小端序.就是（栈空间）低位存的是后申请的数据，我们的电脑一般都是小端序\n大端序.则是低位存的是先申请的数据\n验证大小端序方法.\n\n### 验证大小端序的两种方法\n\n```c\nunion utest\n\t\t{\n\t\t\tint num;\n\t\t\tchar num2;\n\t\t};\n\t\tint main(void)\n\t\t{\n\t\t\tunion utest;\n\t\t\tt.num = 0x12345678;//储存在栈空间因为栈空间是先申请的在高位（自上向下）  \n\t\t\t//printf(\"%x\\n\",t.num2);//系统帮忙省略了0x\n\t\t\tif (t.num2 == 0x78)\n\t\t\t\tprintf(\"小端序！\\n\");\n\t\t\telse\n\t\t\t\tprintf(\"大端序！\\n\");\n\t\t\treturn0;\n\t\t}\n```\n\n\n\n```c\nint data=0x12345678;\nif((char)data==0x78)//if(*(char*)(&data))//先获取到data的地址，然后将int*转换成char*，所以取到最后一个字节的空间地址，再取出*\n    printf(\"小端序\");\nelse\n    printf(\"大端序\");\n```\n\n\n### 枚举\n枚举是一个整形的常量集合，给前面的一个变量赋值一个数值，后面的变量会逐一加一","slug":"技术/2018-03-09-c语言12-共同体,枚举","published":1,"updated":"2018-03-12T03:29:45.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj5f00275oq8h7tygs37","content":"<h2 id=\"公用体-union\"><a href=\"#公用体-union\" class=\"headerlink\" title=\"公用体(union)\"></a>公用体(union)</h2><ol>\n<li>共用体的申明和结构体一样，</li>\n<li>公用体可以嵌套到结构体中，达到一列可以表示不同类型的结果</li>\n<li>公用体的大小，由最大的成员空间构成</li>\n<li>公用体每一个成员都共同拥有一个首地址，只是因为寻址能力的不同而取到的数据不同，小类型都从低位开始获取数据<br>小端序.就是（栈空间）低位存的是后申请的数据，我们的电脑一般都是小端序<br>大端序.则是低位存的是先申请的数据<br>验证大小端序方法.</li>\n</ol>\n<h3 id=\"验证大小端序的两种方法\"><a href=\"#验证大小端序的两种方法\" class=\"headerlink\" title=\"验证大小端序的两种方法\"></a>验证大小端序的两种方法</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">union</span> utest</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> num2;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">union</span> utest;</span><br><span class=\"line\">\t\t\tt.num = <span class=\"number\">0x12345678</span>;<span class=\"comment\">//储存在栈空间因为栈空间是先申请的在高位（自上向下）  </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//printf(\"%x\\n\",t.num2);//系统帮忙省略了0x</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (t.num2 == <span class=\"number\">0x78</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"小端序！\\n\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"大端序！\\n\"</span>);</span><br><span class=\"line\">\t\t\treturn0;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> data=<span class=\"number\">0x12345678</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>((<span class=\"keyword\">char</span>)data==<span class=\"number\">0x78</span>)<span class=\"comment\">//if(*(char*)(&amp;data))//先获取到data的地址，然后将int*转换成char*，所以取到最后一个字节的空间地址，再取出*</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"小端序\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"大端序\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p>枚举是一个整形的常量集合，给前面的一个变量赋值一个数值，后面的变量会逐一加一</p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"公用体-union\"><a href=\"#公用体-union\" class=\"headerlink\" title=\"公用体(union)\"></a>公用体(union)</h2><ol>\n<li>共用体的申明和结构体一样，</li>\n<li>公用体可以嵌套到结构体中，达到一列可以表示不同类型的结果</li>\n<li>公用体的大小，由最大的成员空间构成</li>\n<li>公用体每一个成员都共同拥有一个首地址，只是因为寻址能力的不同而取到的数据不同，小类型都从低位开始获取数据<br>小端序.就是（栈空间）低位存的是后申请的数据，我们的电脑一般都是小端序<br>大端序.则是低位存的是先申请的数据<br>验证大小端序方法.</li>\n</ol>\n<h3 id=\"验证大小端序的两种方法\"><a href=\"#验证大小端序的两种方法\" class=\"headerlink\" title=\"验证大小端序的两种方法\"></a>验证大小端序的两种方法</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">union</span> utest</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> num2;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">union</span> utest;</span><br><span class=\"line\">\t\t\tt.num = <span class=\"number\">0x12345678</span>;<span class=\"comment\">//储存在栈空间因为栈空间是先申请的在高位（自上向下）  </span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//printf(\"%x\\n\",t.num2);//系统帮忙省略了0x</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (t.num2 == <span class=\"number\">0x78</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"小端序！\\n\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"大端序！\\n\"</span>);</span><br><span class=\"line\">\t\t\treturn0;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> data=<span class=\"number\">0x12345678</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>((<span class=\"keyword\">char</span>)data==<span class=\"number\">0x78</span>)<span class=\"comment\">//if(*(char*)(&amp;data))//先获取到data的地址，然后将int*转换成char*，所以取到最后一个字节的空间地址，再取出*</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"小端序\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"大端序\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p>枚举是一个整形的常量集合，给前面的一个变量赋值一个数值，后面的变量会逐一加一</p>\n"},{"title":"c语言提高1-进程空间,一维数组","date":"2016-03-24T12:49:16.000Z","_content":"\n## 数据类型\n### 数据类型的作用\n在线性的内存中添加一种逻辑操作\n\n### 补码的特点\n正数的补码是他本身\n负数的补码：该负数对应的正数的补码取反加一\n一个8位的有符号的数据范围为什么是-128到127：因为补码编码的格式不同导致\n\n### 数据在内存中的意义\n数据本身是没有意义的，只是要看我们怎样来解释他\n\n### 类型转化\n小类型遇到大类型需要转化为大类型，位数不够的话会根据原类型的符号位来补位（是0补0，是1补1）\n整形遇到浮点型需要转化为浮点型\n有符号和无符号的运算结果是有符号的\n转化都是低位对低位进行取值（低位对齐）\n\n\n## 进程空间\n### 虚拟空间\n虚拟内存不是我们生活上指的内存条，而是我们通过他来映射到物理内存的一套机制；\n虚拟内存的好处：早先的电脑是直接将我们运行的程序加载到物理内存中，所以会造成不同的程序直接可以相互调用的后果（很不安全），但是有了这套机制之后，就没有这个缺点了\n\n### 变量的存放区域总结\n只要是未初始化的全局或者是静态变量全部储存在data段的未初始化数据段(bss)，默认初始化为0\nauto的局部变量名无论初始化或者未初始化都储存在栈空间\n所有的常量都是存储在data区域的只读区域\ntext是储存二进制文件（运行程序）(.exe/.out)的地方\n\n### 图示\n![进程空间](1.jpg)\n\n\n## 数组以及练习\n[点击查看代码](1.c)\n<font color=red>注意:</font>地址的加减其实是加减地址所指向空间的数量，只有&+数组名才是操作数组的整体","source":"_posts/技术/2018-03-09-c语言提高1-进程空间,一维数组.md","raw":"---\ntitle: c语言提高1-进程空间,一维数组\ndate: 2016-03-24 20:49:16\ncategories: 技术\ntags: c语言\n---\n\n## 数据类型\n### 数据类型的作用\n在线性的内存中添加一种逻辑操作\n\n### 补码的特点\n正数的补码是他本身\n负数的补码：该负数对应的正数的补码取反加一\n一个8位的有符号的数据范围为什么是-128到127：因为补码编码的格式不同导致\n\n### 数据在内存中的意义\n数据本身是没有意义的，只是要看我们怎样来解释他\n\n### 类型转化\n小类型遇到大类型需要转化为大类型，位数不够的话会根据原类型的符号位来补位（是0补0，是1补1）\n整形遇到浮点型需要转化为浮点型\n有符号和无符号的运算结果是有符号的\n转化都是低位对低位进行取值（低位对齐）\n\n\n## 进程空间\n### 虚拟空间\n虚拟内存不是我们生活上指的内存条，而是我们通过他来映射到物理内存的一套机制；\n虚拟内存的好处：早先的电脑是直接将我们运行的程序加载到物理内存中，所以会造成不同的程序直接可以相互调用的后果（很不安全），但是有了这套机制之后，就没有这个缺点了\n\n### 变量的存放区域总结\n只要是未初始化的全局或者是静态变量全部储存在data段的未初始化数据段(bss)，默认初始化为0\nauto的局部变量名无论初始化或者未初始化都储存在栈空间\n所有的常量都是存储在data区域的只读区域\ntext是储存二进制文件（运行程序）(.exe/.out)的地方\n\n### 图示\n![进程空间](1.jpg)\n\n\n## 数组以及练习\n[点击查看代码](1.c)\n<font color=red>注意:</font>地址的加减其实是加减地址所指向空间的数量，只有&+数组名才是操作数组的整体","slug":"技术/2018-03-09-c语言提高1-进程空间,一维数组","published":1,"updated":"2018-03-12T06:29:03.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj5h002a5oq8yxi01h0t","content":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"数据类型的作用\"><a href=\"#数据类型的作用\" class=\"headerlink\" title=\"数据类型的作用\"></a>数据类型的作用</h3><p>在线性的内存中添加一种逻辑操作</p>\n<h3 id=\"补码的特点\"><a href=\"#补码的特点\" class=\"headerlink\" title=\"补码的特点\"></a>补码的特点</h3><p>正数的补码是他本身<br>负数的补码：该负数对应的正数的补码取反加一<br>一个8位的有符号的数据范围为什么是-128到127：因为补码编码的格式不同导致</p>\n<h3 id=\"数据在内存中的意义\"><a href=\"#数据在内存中的意义\" class=\"headerlink\" title=\"数据在内存中的意义\"></a>数据在内存中的意义</h3><p>数据本身是没有意义的，只是要看我们怎样来解释他</p>\n<h3 id=\"类型转化\"><a href=\"#类型转化\" class=\"headerlink\" title=\"类型转化\"></a>类型转化</h3><p>小类型遇到大类型需要转化为大类型，位数不够的话会根据原类型的符号位来补位（是0补0，是1补1）<br>整形遇到浮点型需要转化为浮点型<br>有符号和无符号的运算结果是有符号的<br>转化都是低位对低位进行取值（低位对齐）</p>\n<h2 id=\"进程空间\"><a href=\"#进程空间\" class=\"headerlink\" title=\"进程空间\"></a>进程空间</h2><h3 id=\"虚拟空间\"><a href=\"#虚拟空间\" class=\"headerlink\" title=\"虚拟空间\"></a>虚拟空间</h3><p>虚拟内存不是我们生活上指的内存条，而是我们通过他来映射到物理内存的一套机制；<br>虚拟内存的好处：早先的电脑是直接将我们运行的程序加载到物理内存中，所以会造成不同的程序直接可以相互调用的后果（很不安全），但是有了这套机制之后，就没有这个缺点了</p>\n<h3 id=\"变量的存放区域总结\"><a href=\"#变量的存放区域总结\" class=\"headerlink\" title=\"变量的存放区域总结\"></a>变量的存放区域总结</h3><p>只要是未初始化的全局或者是静态变量全部储存在data段的未初始化数据段(bss)，默认初始化为0<br>auto的局部变量名无论初始化或者未初始化都储存在栈空间<br>所有的常量都是存储在data区域的只读区域<br>text是储存二进制文件（运行程序）(.exe/.out)的地方</p>\n<h3 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h3><p><img src=\"/2016/03/24/技术/2018-03-09-c语言提高1-进程空间,一维数组/1.jpg\" alt=\"进程空间\"></p>\n<h2 id=\"数组以及练习\"><a href=\"#数组以及练习\" class=\"headerlink\" title=\"数组以及练习\"></a>数组以及练习</h2><p><a href=\"1.c\">点击查看代码</a></p>\n<p><font color=\"red\">注意:</font>地址的加减其实是加减地址所指向空间的数量，只有&amp;+数组名才是操作数组的整体</p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"数据类型的作用\"><a href=\"#数据类型的作用\" class=\"headerlink\" title=\"数据类型的作用\"></a>数据类型的作用</h3><p>在线性的内存中添加一种逻辑操作</p>\n<h3 id=\"补码的特点\"><a href=\"#补码的特点\" class=\"headerlink\" title=\"补码的特点\"></a>补码的特点</h3><p>正数的补码是他本身<br>负数的补码：该负数对应的正数的补码取反加一<br>一个8位的有符号的数据范围为什么是-128到127：因为补码编码的格式不同导致</p>\n<h3 id=\"数据在内存中的意义\"><a href=\"#数据在内存中的意义\" class=\"headerlink\" title=\"数据在内存中的意义\"></a>数据在内存中的意义</h3><p>数据本身是没有意义的，只是要看我们怎样来解释他</p>\n<h3 id=\"类型转化\"><a href=\"#类型转化\" class=\"headerlink\" title=\"类型转化\"></a>类型转化</h3><p>小类型遇到大类型需要转化为大类型，位数不够的话会根据原类型的符号位来补位（是0补0，是1补1）<br>整形遇到浮点型需要转化为浮点型<br>有符号和无符号的运算结果是有符号的<br>转化都是低位对低位进行取值（低位对齐）</p>\n<h2 id=\"进程空间\"><a href=\"#进程空间\" class=\"headerlink\" title=\"进程空间\"></a>进程空间</h2><h3 id=\"虚拟空间\"><a href=\"#虚拟空间\" class=\"headerlink\" title=\"虚拟空间\"></a>虚拟空间</h3><p>虚拟内存不是我们生活上指的内存条，而是我们通过他来映射到物理内存的一套机制；<br>虚拟内存的好处：早先的电脑是直接将我们运行的程序加载到物理内存中，所以会造成不同的程序直接可以相互调用的后果（很不安全），但是有了这套机制之后，就没有这个缺点了</p>\n<h3 id=\"变量的存放区域总结\"><a href=\"#变量的存放区域总结\" class=\"headerlink\" title=\"变量的存放区域总结\"></a>变量的存放区域总结</h3><p>只要是未初始化的全局或者是静态变量全部储存在data段的未初始化数据段(bss)，默认初始化为0<br>auto的局部变量名无论初始化或者未初始化都储存在栈空间<br>所有的常量都是存储在data区域的只读区域<br>text是储存二进制文件（运行程序）(.exe/.out)的地方</p>\n<h3 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h3><p><img src=\"/2016/03/24/技术/2018-03-09-c语言提高1-进程空间,一维数组/1.jpg\" alt=\"进程空间\"></p>\n<h2 id=\"数组以及练习\"><a href=\"#数组以及练习\" class=\"headerlink\" title=\"数组以及练习\"></a>数组以及练习</h2><p><a href=\"1.c\">点击查看代码</a></p>\n<p><font color=\"red\">注意:</font>地址的加减其实是加减地址所指向空间的数量，只有&amp;+数组名才是操作数组的整体</p>\n"},{"title":"python编写规范pep8的问题笔记","date":"2018-03-12T12:46:25.000Z","_content":"\n\n### 字数,函数限制\n一行列数: PEP 8 规定为 79 列，这个太苛刻了，如果要拼接url一般都会超。\n一个函数: 不要超过 30 行代码, 即可显示在一个屏幕类，可以不使用垂直游标即可看到整个函数。\n一个类: 不要超过 200 行代码，不要有超过 10 个方法。\n一个模块: 不要超过 500 行。\n\n### 不要在一句import中多个库\n不推荐:import os, sys\n推荐:\nimport os\nimport sys\n\n### 错误记录\n错误记录: W292 no newline at end of file\n处理:打个回车有新的一空行即可（新行不要有空格\n\n错误记录:E302 expected 2 blank lines, found 1\n处理:上面只有一行空白，但是需要两个空白行\n\n错误记录:E231 missing whitespace after ‘,’\n翻译:“，”后要有空格\n举例:\n错误 print(“%s %s %s %s %s %s” % (A,B,D,E,K,L))\n正确 print(“%s %s %s %s %s %s” % (A, B, D, E, K, L))\n\n错误记录:E225 missing whitespace around operator\n翻译:\n举例:\n错误 print(“%s %s %s %s %s %s”%(A, B, D, E, K, L))\n正确 rint(“%s %s %s %s %s %s”% (A, B, D, E, K, L))\n\n错误记录:E225 missing whitespace around operator\n举例:\n错误 f=open(“D:\\\\test.txt”, “ab”)\n正确 f = open(“D:\\\\test.txt”, “ab”)\n\n\n***\n> 本文引用自：http://www.simonzhang.net/?p=1072","source":"_posts/技术/2018-03-09-python编写规范pep8的问题笔记.md","raw":"---\ntitle: python编写规范pep8的问题笔记\ndate: 2018/3/12 20:46:25\ncategories: 技术\ntags: python\n---\n\n\n### 字数,函数限制\n一行列数: PEP 8 规定为 79 列，这个太苛刻了，如果要拼接url一般都会超。\n一个函数: 不要超过 30 行代码, 即可显示在一个屏幕类，可以不使用垂直游标即可看到整个函数。\n一个类: 不要超过 200 行代码，不要有超过 10 个方法。\n一个模块: 不要超过 500 行。\n\n### 不要在一句import中多个库\n不推荐:import os, sys\n推荐:\nimport os\nimport sys\n\n### 错误记录\n错误记录: W292 no newline at end of file\n处理:打个回车有新的一空行即可（新行不要有空格\n\n错误记录:E302 expected 2 blank lines, found 1\n处理:上面只有一行空白，但是需要两个空白行\n\n错误记录:E231 missing whitespace after ‘,’\n翻译:“，”后要有空格\n举例:\n错误 print(“%s %s %s %s %s %s” % (A,B,D,E,K,L))\n正确 print(“%s %s %s %s %s %s” % (A, B, D, E, K, L))\n\n错误记录:E225 missing whitespace around operator\n翻译:\n举例:\n错误 print(“%s %s %s %s %s %s”%(A, B, D, E, K, L))\n正确 rint(“%s %s %s %s %s %s”% (A, B, D, E, K, L))\n\n错误记录:E225 missing whitespace around operator\n举例:\n错误 f=open(“D:\\\\test.txt”, “ab”)\n正确 f = open(“D:\\\\test.txt”, “ab”)\n\n\n***\n> 本文引用自：http://www.simonzhang.net/?p=1072","slug":"技术/2018-03-09-python编写规范pep8的问题笔记","published":1,"updated":"2018-03-12T12:54:28.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj5i002e5oq8k4dliupt","content":"<h3 id=\"字数-函数限制\"><a href=\"#字数-函数限制\" class=\"headerlink\" title=\"字数,函数限制\"></a>字数,函数限制</h3><p>一行列数: PEP 8 规定为 79 列，这个太苛刻了，如果要拼接url一般都会超。<br>一个函数: 不要超过 30 行代码, 即可显示在一个屏幕类，可以不使用垂直游标即可看到整个函数。<br>一个类: 不要超过 200 行代码，不要有超过 10 个方法。<br>一个模块: 不要超过 500 行。</p>\n<h3 id=\"不要在一句import中多个库\"><a href=\"#不要在一句import中多个库\" class=\"headerlink\" title=\"不要在一句import中多个库\"></a>不要在一句import中多个库</h3><p>不推荐:import os, sys<br>推荐:<br>import os<br>import sys</p>\n<h3 id=\"错误记录\"><a href=\"#错误记录\" class=\"headerlink\" title=\"错误记录\"></a>错误记录</h3><p>错误记录: W292 no newline at end of file<br>处理:打个回车有新的一空行即可（新行不要有空格</p>\n<p>错误记录:E302 expected 2 blank lines, found 1<br>处理:上面只有一行空白，但是需要两个空白行</p>\n<p>错误记录:E231 missing whitespace after ‘,’<br>翻译:“，”后要有空格<br>举例:<br>错误 print(“%s %s %s %s %s %s” % (A,B,D,E,K,L))<br>正确 print(“%s %s %s %s %s %s” % (A, B, D, E, K, L))</p>\n<p>错误记录:E225 missing whitespace around operator<br>翻译:<br>举例:<br>错误 print(“%s %s %s %s %s %s”%(A, B, D, E, K, L))<br>正确 rint(“%s %s %s %s %s %s”% (A, B, D, E, K, L))</p>\n<p>错误记录:E225 missing whitespace around operator<br>举例:<br>错误 f=open(“D:\\test.txt”, “ab”)<br>正确 f = open(“D:\\test.txt”, “ab”)</p>\n<hr>\n<blockquote>\n<p>本文引用自：<a href=\"http://www.simonzhang.net/?p=1072\" target=\"_blank\" rel=\"noopener\">http://www.simonzhang.net/?p=1072</a></p>\n</blockquote>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"字数-函数限制\"><a href=\"#字数-函数限制\" class=\"headerlink\" title=\"字数,函数限制\"></a>字数,函数限制</h3><p>一行列数: PEP 8 规定为 79 列，这个太苛刻了，如果要拼接url一般都会超。<br>一个函数: 不要超过 30 行代码, 即可显示在一个屏幕类，可以不使用垂直游标即可看到整个函数。<br>一个类: 不要超过 200 行代码，不要有超过 10 个方法。<br>一个模块: 不要超过 500 行。</p>\n<h3 id=\"不要在一句import中多个库\"><a href=\"#不要在一句import中多个库\" class=\"headerlink\" title=\"不要在一句import中多个库\"></a>不要在一句import中多个库</h3><p>不推荐:import os, sys<br>推荐:<br>import os<br>import sys</p>\n<h3 id=\"错误记录\"><a href=\"#错误记录\" class=\"headerlink\" title=\"错误记录\"></a>错误记录</h3><p>错误记录: W292 no newline at end of file<br>处理:打个回车有新的一空行即可（新行不要有空格</p>\n<p>错误记录:E302 expected 2 blank lines, found 1<br>处理:上面只有一行空白，但是需要两个空白行</p>\n<p>错误记录:E231 missing whitespace after ‘,’<br>翻译:“，”后要有空格<br>举例:<br>错误 print(“%s %s %s %s %s %s” % (A,B,D,E,K,L))<br>正确 print(“%s %s %s %s %s %s” % (A, B, D, E, K, L))</p>\n<p>错误记录:E225 missing whitespace around operator<br>翻译:<br>举例:<br>错误 print(“%s %s %s %s %s %s”%(A, B, D, E, K, L))<br>正确 rint(“%s %s %s %s %s %s”% (A, B, D, E, K, L))</p>\n<p>错误记录:E225 missing whitespace around operator<br>举例:<br>错误 f=open(“D:\\test.txt”, “ab”)<br>正确 f = open(“D:\\test.txt”, “ab”)</p>\n<hr>\n<blockquote>\n<p>本文引用自：<a href=\"http://www.simonzhang.net/?p=1072\" target=\"_blank\" rel=\"noopener\">http://www.simonzhang.net/?p=1072</a></p>\n</blockquote>\n"},{"title":"c语言提高3-指针加强,const,函数指针,回调函数","date":"2016-04-12T06:17:48.000Z","_content":"\n\n## 指针加强\n1：指针在内存中都是线性的，如果变成二维或者多维空间只是我们在上面强加了一层逻辑而已，所以无论几维的空间我们都可以以一维空间的方式来访问；\n2：二维数组是一种二维空间，但是二维空间不代表就只能是二维数组，只是二维空间具有二维数组的访问形式\n\n### 堆上根据二级,三级指针做形参,做返回值来申请二维空间的代码\n[堆上根据二级,三级指针做形参,做返回值来申请二维空间](堆上根据二级,三级指针做形参,做返回值来申请二维空间.c)\n\n### 序列加密的代码\n[序列加密的代码](序列加密的代码.c)\n\n### 利用二级指针的方式读取文件到堆内存\n[利用二级指针的方式读取文件到堆内存](利用二级指针的方式读取文件到堆内存.c)\n\n\n## const关键字\n修饰变量不能被修改\n在*左边: 不能修改指向\n在*右边: 不能修改数据\n*左右都被const修饰: 数据和指向都不能修改\n1. const与defined的区别: const有类型的概念，但是defind没有\n2. const变量定义前必须初始化\n\n## 函数\n1. 函数名的本质: 指向函数体这段代码段的首地址\n2. 接收函数名的类型: 返回值 （*变量名）（形参类型）；我们可以直接把函数声明拿过来然后把函数名替换成(*变量名)\n3. 函数指针的申明: 如2直接在变量名加上“[个数]”\n4. 回调函数: 调用一个别的方法然后将自己的一个方法名当参数传过去，这样就能将自己的逻辑加在别人的代码里，从而增强灵活性","source":"_posts/技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数.md","raw":"---\ntitle: 'c语言提高3-指针加强,const,函数指针,回调函数'\ndate: 2016-04-12 14:17:48\ncategories: 技术\ntags: c语言\n---\n\n\n## 指针加强\n1：指针在内存中都是线性的，如果变成二维或者多维空间只是我们在上面强加了一层逻辑而已，所以无论几维的空间我们都可以以一维空间的方式来访问；\n2：二维数组是一种二维空间，但是二维空间不代表就只能是二维数组，只是二维空间具有二维数组的访问形式\n\n### 堆上根据二级,三级指针做形参,做返回值来申请二维空间的代码\n[堆上根据二级,三级指针做形参,做返回值来申请二维空间](堆上根据二级,三级指针做形参,做返回值来申请二维空间.c)\n\n### 序列加密的代码\n[序列加密的代码](序列加密的代码.c)\n\n### 利用二级指针的方式读取文件到堆内存\n[利用二级指针的方式读取文件到堆内存](利用二级指针的方式读取文件到堆内存.c)\n\n\n## const关键字\n修饰变量不能被修改\n在*左边: 不能修改指向\n在*右边: 不能修改数据\n*左右都被const修饰: 数据和指向都不能修改\n1. const与defined的区别: const有类型的概念，但是defind没有\n2. const变量定义前必须初始化\n\n## 函数\n1. 函数名的本质: 指向函数体这段代码段的首地址\n2. 接收函数名的类型: 返回值 （*变量名）（形参类型）；我们可以直接把函数声明拿过来然后把函数名替换成(*变量名)\n3. 函数指针的申明: 如2直接在变量名加上“[个数]”\n4. 回调函数: 调用一个别的方法然后将自己的一个方法名当参数传过去，这样就能将自己的逻辑加在别人的代码里，从而增强灵活性","slug":"技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数","published":1,"updated":"2018-03-12T06:31:37.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj5k002h5oq8oc794q7u","content":"<h2 id=\"指针加强\"><a href=\"#指针加强\" class=\"headerlink\" title=\"指针加强\"></a>指针加强</h2><p>1：指针在内存中都是线性的，如果变成二维或者多维空间只是我们在上面强加了一层逻辑而已，所以无论几维的空间我们都可以以一维空间的方式来访问；<br>2：二维数组是一种二维空间，但是二维空间不代表就只能是二维数组，只是二维空间具有二维数组的访问形式</p>\n<h3 id=\"堆上根据二级-三级指针做形参-做返回值来申请二维空间的代码\"><a href=\"#堆上根据二级-三级指针做形参-做返回值来申请二维空间的代码\" class=\"headerlink\" title=\"堆上根据二级,三级指针做形参,做返回值来申请二维空间的代码\"></a>堆上根据二级,三级指针做形参,做返回值来申请二维空间的代码</h3><p><a href=\"堆上根据二级,三级指针做形参,做返回值来申请二维空间.c\">堆上根据二级,三级指针做形参,做返回值来申请二维空间</a></p>\n<h3 id=\"序列加密的代码\"><a href=\"#序列加密的代码\" class=\"headerlink\" title=\"序列加密的代码\"></a>序列加密的代码</h3><p><a href=\"序列加密的代码.c\">序列加密的代码</a></p>\n<h3 id=\"利用二级指针的方式读取文件到堆内存\"><a href=\"#利用二级指针的方式读取文件到堆内存\" class=\"headerlink\" title=\"利用二级指针的方式读取文件到堆内存\"></a>利用二级指针的方式读取文件到堆内存</h3><p><a href=\"利用二级指针的方式读取文件到堆内存.c\">利用二级指针的方式读取文件到堆内存</a></p>\n<h2 id=\"const关键字\"><a href=\"#const关键字\" class=\"headerlink\" title=\"const关键字\"></a>const关键字</h2><p>修饰变量不能被修改<br>在<em>左边: 不能修改指向<br>在</em>右边: 不能修改数据<br>*左右都被const修饰: 数据和指向都不能修改</p>\n<ol>\n<li>const与defined的区别: const有类型的概念，但是defind没有</li>\n<li>const变量定义前必须初始化</li>\n</ol>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ol>\n<li>函数名的本质: 指向函数体这段代码段的首地址</li>\n<li>接收函数名的类型: 返回值 （<em>变量名）（形参类型）；我们可以直接把函数声明拿过来然后把函数名替换成(</em>变量名)</li>\n<li>函数指针的申明: 如2直接在变量名加上“[个数]”</li>\n<li>回调函数: 调用一个别的方法然后将自己的一个方法名当参数传过去，这样就能将自己的逻辑加在别人的代码里，从而增强灵活性</li>\n</ol>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"指针加强\"><a href=\"#指针加强\" class=\"headerlink\" title=\"指针加强\"></a>指针加强</h2><p>1：指针在内存中都是线性的，如果变成二维或者多维空间只是我们在上面强加了一层逻辑而已，所以无论几维的空间我们都可以以一维空间的方式来访问；<br>2：二维数组是一种二维空间，但是二维空间不代表就只能是二维数组，只是二维空间具有二维数组的访问形式</p>\n<h3 id=\"堆上根据二级-三级指针做形参-做返回值来申请二维空间的代码\"><a href=\"#堆上根据二级-三级指针做形参-做返回值来申请二维空间的代码\" class=\"headerlink\" title=\"堆上根据二级,三级指针做形参,做返回值来申请二维空间的代码\"></a>堆上根据二级,三级指针做形参,做返回值来申请二维空间的代码</h3><p><a href=\"堆上根据二级,三级指针做形参,做返回值来申请二维空间.c\">堆上根据二级,三级指针做形参,做返回值来申请二维空间</a></p>\n<h3 id=\"序列加密的代码\"><a href=\"#序列加密的代码\" class=\"headerlink\" title=\"序列加密的代码\"></a>序列加密的代码</h3><p><a href=\"序列加密的代码.c\">序列加密的代码</a></p>\n<h3 id=\"利用二级指针的方式读取文件到堆内存\"><a href=\"#利用二级指针的方式读取文件到堆内存\" class=\"headerlink\" title=\"利用二级指针的方式读取文件到堆内存\"></a>利用二级指针的方式读取文件到堆内存</h3><p><a href=\"利用二级指针的方式读取文件到堆内存.c\">利用二级指针的方式读取文件到堆内存</a></p>\n<h2 id=\"const关键字\"><a href=\"#const关键字\" class=\"headerlink\" title=\"const关键字\"></a>const关键字</h2><p>修饰变量不能被修改<br>在<em>左边: 不能修改指向<br>在</em>右边: 不能修改数据<br>*左右都被const修饰: 数据和指向都不能修改</p>\n<ol>\n<li>const与defined的区别: const有类型的概念，但是defind没有</li>\n<li>const变量定义前必须初始化</li>\n</ol>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ol>\n<li>函数名的本质: 指向函数体这段代码段的首地址</li>\n<li>接收函数名的类型: 返回值 （<em>变量名）（形参类型）；我们可以直接把函数声明拿过来然后把函数名替换成(</em>变量名)</li>\n<li>函数指针的申明: 如2直接在变量名加上“[个数]”</li>\n<li>回调函数: 调用一个别的方法然后将自己的一个方法名当参数传过去，这样就能将自己的逻辑加在别人的代码里，从而增强灵活性</li>\n</ol>\n"},{"title":"virtualbox中ubuntu和windows共享文件夹设置","date":"2018-03-09T12:14:29.000Z","_content":"\n\n## 系统平台\n系统平台：win8.1、virtualbox4.3.8、ubuntu12.04\n安装VBoxGuestAdditions_4.3.8.iso增强工具，安装完毕后根据提示重启Ubuntu，具体操作如下：\n\n### Step 1\n<img src=\"1.png\"/>\n\n### Step 2.安装virtualbox增强包\n```shell\nlinjiqin@ubuntu:~$ cd ~\nlinjiqin@ubuntu:~$ su -\n密码： \nroot@ubuntu:~# cd /media/\nroot@ubuntu:/media# ls\nsf_share  VBOXADDITIONS_4.3.8_92456\nroot@ubuntu:/media# cd VBOXADDITIONS_4.3.8_92456/\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# ls\n32Bit        cert                    VBoxSolarisAdditions.pkg\n64Bit        OS2                     VBoxWindowsAdditions-amd64.exe\nAUTORUN.INF  runasroot.sh            VBoxWindowsAdditions.exe\nautorun.sh   VBoxLinuxAdditions.run  VBoxWindowsAdditions-x86.exe\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# sudo ./VBoxLinuxAdditions.run #安装virtualbox增强包\n....\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# \n```\n\n### Step 3\n先关闭ubuntu，在virtualbox“设置”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加windows中要共享的目录，取一个名。比如我在D盘建一个名为share的文件夹，如下图：\n<img src=\"2.png\"/>\n\n### Step 4\n重启ubuntu，在ubuntu系统最上端“设备”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加第二步操作的共享目录，如下图：\n<img src=\"3.png\"/>\n\n### Step 5\n进入虚拟Ubuntu，在命令行终端下输入：\nsudo mkdir /mnt/shared\nsudo mount -t vboxsf share /mnt/shared\n其中\"share\"是之前创建的共享文件夹的名字。OK，现在Ubuntu和主机可以互传文件了。\n要想自动挂载的话，可以在/etc/fstab中添加一项\nshare /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0\n\n### 卸载的话使用下面的命令:\nsudo umount -f /mnt/shared\n\n### <font color=red>注意</font>\n共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的名字也是shared的话，在挂载的时候就会出现如下的错误信息：/sbin/mount.vboxsf: mounting failed with the error: Protocol error\n\n\n","source":"_posts/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置.md","raw":"---\ntitle: virtualbox中ubuntu和windows共享文件夹设置\ndate: 2018-03-09 20:14:29\ncategories: 技术\ntags: [linux,windows,虚拟机]\n---\n\n\n## 系统平台\n系统平台：win8.1、virtualbox4.3.8、ubuntu12.04\n安装VBoxGuestAdditions_4.3.8.iso增强工具，安装完毕后根据提示重启Ubuntu，具体操作如下：\n\n### Step 1\n<img src=\"1.png\"/>\n\n### Step 2.安装virtualbox增强包\n```shell\nlinjiqin@ubuntu:~$ cd ~\nlinjiqin@ubuntu:~$ su -\n密码： \nroot@ubuntu:~# cd /media/\nroot@ubuntu:/media# ls\nsf_share  VBOXADDITIONS_4.3.8_92456\nroot@ubuntu:/media# cd VBOXADDITIONS_4.3.8_92456/\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# ls\n32Bit        cert                    VBoxSolarisAdditions.pkg\n64Bit        OS2                     VBoxWindowsAdditions-amd64.exe\nAUTORUN.INF  runasroot.sh            VBoxWindowsAdditions.exe\nautorun.sh   VBoxLinuxAdditions.run  VBoxWindowsAdditions-x86.exe\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# sudo ./VBoxLinuxAdditions.run #安装virtualbox增强包\n....\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# \n```\n\n### Step 3\n先关闭ubuntu，在virtualbox“设置”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加windows中要共享的目录，取一个名。比如我在D盘建一个名为share的文件夹，如下图：\n<img src=\"2.png\"/>\n\n### Step 4\n重启ubuntu，在ubuntu系统最上端“设备”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加第二步操作的共享目录，如下图：\n<img src=\"3.png\"/>\n\n### Step 5\n进入虚拟Ubuntu，在命令行终端下输入：\nsudo mkdir /mnt/shared\nsudo mount -t vboxsf share /mnt/shared\n其中\"share\"是之前创建的共享文件夹的名字。OK，现在Ubuntu和主机可以互传文件了。\n要想自动挂载的话，可以在/etc/fstab中添加一项\nshare /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0\n\n### 卸载的话使用下面的命令:\nsudo umount -f /mnt/shared\n\n### <font color=red>注意</font>\n共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的名字也是shared的话，在挂载的时候就会出现如下的错误信息：/sbin/mount.vboxsf: mounting failed with the error: Protocol error\n\n\n","slug":"技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置","published":1,"updated":"2018-03-10T04:14:35.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj5m002l5oq89f49ya2b","content":"<h2 id=\"系统平台\"><a href=\"#系统平台\" class=\"headerlink\" title=\"系统平台\"></a>系统平台</h2><p>系统平台：win8.1、virtualbox4.3.8、ubuntu12.04<br>安装VBoxGuestAdditions_4.3.8.iso增强工具，安装完毕后根据提示重启Ubuntu，具体操作如下：</p>\n<h3 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h3><p><img src=\"/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png\"></p>\n<h3 id=\"Step-2-安装virtualbox增强包\"><a href=\"#Step-2-安装virtualbox增强包\" class=\"headerlink\" title=\"Step 2.安装virtualbox增强包\"></a>Step 2.安装virtualbox增强包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linjiqin@ubuntu:~$ cd ~</span><br><span class=\"line\">linjiqin@ubuntu:~$ su -</span><br><span class=\"line\">密码： </span><br><span class=\"line\">root@ubuntu:~# cd /media/</span><br><span class=\"line\">root@ubuntu:/media# ls</span><br><span class=\"line\">sf_share  VBOXADDITIONS_4.3.8_92456</span><br><span class=\"line\">root@ubuntu:/media# cd VBOXADDITIONS_4.3.8_92456/</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# ls</span><br><span class=\"line\">32Bit        cert                    VBoxSolarisAdditions.pkg</span><br><span class=\"line\">64Bit        OS2                     VBoxWindowsAdditions-amd64.exe</span><br><span class=\"line\">AUTORUN.INF  runasroot.sh            VBoxWindowsAdditions.exe</span><br><span class=\"line\">autorun.sh   VBoxLinuxAdditions.run  VBoxWindowsAdditions-x86.exe</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# sudo ./VBoxLinuxAdditions.run #安装virtualbox增强包</span><br><span class=\"line\">....</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456#</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h3><p>先关闭ubuntu，在virtualbox“设置”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加windows中要共享的目录，取一个名。比如我在D盘建一个名为share的文件夹，如下图：<br><img src=\"/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png\"></p>\n<h3 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h3><p>重启ubuntu，在ubuntu系统最上端“设备”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加第二步操作的共享目录，如下图：<br><img src=\"/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png\"></p>\n<h3 id=\"Step-5\"><a href=\"#Step-5\" class=\"headerlink\" title=\"Step 5\"></a>Step 5</h3><p>进入虚拟Ubuntu，在命令行终端下输入：<br>sudo mkdir /mnt/shared<br>sudo mount -t vboxsf share /mnt/shared<br>其中”share”是之前创建的共享文件夹的名字。OK，现在Ubuntu和主机可以互传文件了。<br>要想自动挂载的话，可以在/etc/fstab中添加一项<br>share /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0</p>\n<h3 id=\"卸载的话使用下面的命令\"><a href=\"#卸载的话使用下面的命令\" class=\"headerlink\" title=\"卸载的话使用下面的命令:\"></a>卸载的话使用下面的命令:</h3><p>sudo umount -f /mnt/shared</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a><font color=\"red\">注意</font></h3><p>共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的名字也是shared的话，在挂载的时候就会出现如下的错误信息：/sbin/mount.vboxsf: mounting failed with the error: Protocol error</p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"系统平台\"><a href=\"#系统平台\" class=\"headerlink\" title=\"系统平台\"></a>系统平台</h2><p>系统平台：win8.1、virtualbox4.3.8、ubuntu12.04<br>安装VBoxGuestAdditions_4.3.8.iso增强工具，安装完毕后根据提示重启Ubuntu，具体操作如下：</p>\n<h3 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h3><p><img src=\"/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png\"></p>\n<h3 id=\"Step-2-安装virtualbox增强包\"><a href=\"#Step-2-安装virtualbox增强包\" class=\"headerlink\" title=\"Step 2.安装virtualbox增强包\"></a>Step 2.安装virtualbox增强包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linjiqin@ubuntu:~$ cd ~</span><br><span class=\"line\">linjiqin@ubuntu:~$ su -</span><br><span class=\"line\">密码： </span><br><span class=\"line\">root@ubuntu:~# cd /media/</span><br><span class=\"line\">root@ubuntu:/media# ls</span><br><span class=\"line\">sf_share  VBOXADDITIONS_4.3.8_92456</span><br><span class=\"line\">root@ubuntu:/media# cd VBOXADDITIONS_4.3.8_92456/</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# ls</span><br><span class=\"line\">32Bit        cert                    VBoxSolarisAdditions.pkg</span><br><span class=\"line\">64Bit        OS2                     VBoxWindowsAdditions-amd64.exe</span><br><span class=\"line\">AUTORUN.INF  runasroot.sh            VBoxWindowsAdditions.exe</span><br><span class=\"line\">autorun.sh   VBoxLinuxAdditions.run  VBoxWindowsAdditions-x86.exe</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# sudo ./VBoxLinuxAdditions.run #安装virtualbox增强包</span><br><span class=\"line\">....</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456#</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h3><p>先关闭ubuntu，在virtualbox“设置”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加windows中要共享的目录，取一个名。比如我在D盘建一个名为share的文件夹，如下图：<br><img src=\"/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png\"></p>\n<h3 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h3><p>重启ubuntu，在ubuntu系统最上端“设备”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加第二步操作的共享目录，如下图：<br><img src=\"/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png\"></p>\n<h3 id=\"Step-5\"><a href=\"#Step-5\" class=\"headerlink\" title=\"Step 5\"></a>Step 5</h3><p>进入虚拟Ubuntu，在命令行终端下输入：<br>sudo mkdir /mnt/shared<br>sudo mount -t vboxsf share /mnt/shared<br>其中”share”是之前创建的共享文件夹的名字。OK，现在Ubuntu和主机可以互传文件了。<br>要想自动挂载的话，可以在/etc/fstab中添加一项<br>share /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0</p>\n<h3 id=\"卸载的话使用下面的命令\"><a href=\"#卸载的话使用下面的命令\" class=\"headerlink\" title=\"卸载的话使用下面的命令:\"></a>卸载的话使用下面的命令:</h3><p>sudo umount -f /mnt/shared</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a><font color=\"red\">注意</font></h3><p>共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的名字也是shared的话，在挂载的时候就会出现如下的错误信息：/sbin/mount.vboxsf: mounting failed with the error: Protocol error</p>\n"},{"title":"C#代码的编译过程","date":"2018-03-12T07:04:49.000Z","_content":"\n![csharp代码的编译过程](csharp代码的编译过程.png)\n","source":"_posts/技术/2018-03-10-csharp代码的编译过程.md","raw":"---\ntitle: C#代码的编译过程\ndate: 2018-03-12 15:04:49\ncategories: 技术\ntags: csharp\n---\n\n![csharp代码的编译过程](csharp代码的编译过程.png)\n","slug":"技术/2018-03-10-csharp代码的编译过程","published":1,"updated":"2018-03-12T07:06:51.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj5n002o5oq87zlpoehi","content":"<p><img src=\"/2018/03/12/技术/2018-03-10-csharp代码的编译过程/csharp代码的编译过程.png\" alt=\"csharp代码的编译过程\"></p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p><img src=\"/2018/03/12/技术/2018-03-10-csharp代码的编译过程/csharp代码的编译过程.png\" alt=\"csharp代码的编译过程\"></p>\n"},{"title":"C#学习笔记.exe下载","date":"2018-03-12T07:09:23.000Z","_content":"\n[点击下载 C#学习笔记.exe](csharp学习笔记.exe)","source":"_posts/技术/2018-03-10-csharp学习笔记.md","raw":"---\ntitle: C#学习笔记.exe下载\ndate: 2018-03-12 15:09:23\ncategories: 技术\ntags: [csharp,工具/插件]\n---\n\n[点击下载 C#学习笔记.exe](csharp学习笔记.exe)","slug":"技术/2018-03-10-csharp学习笔记","published":1,"updated":"2018-03-12T08:11:44.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj5p002r5oq8jvbpbc73","content":"<p><a href=\"csharp学习笔记.exe\">点击下载 C#学习笔记.exe</a></p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p><a href=\"csharp学习笔记.exe\">点击下载 C#学习笔记.exe</a></p>\n"},{"title":"C#控件属性事件大全","date":"2018-03-12T07:00:42.000Z","_content":"\n[点击下载 C#控件属性事件大全](csharp控件属性事件大全.doc)\n\n\n","source":"_posts/技术/2018-03-10-csharp控件属性事件大全.md","raw":"---\ntitle: 'C#控件属性事件大全'\ndate: 2018-03-12 15:00:42\ncategories: 技术\ntags: csharp\n---\n\n[点击下载 C#控件属性事件大全](csharp控件属性事件大全.doc)\n\n\n","slug":"技术/2018-03-10-csharp控件属性事件大全","published":1,"updated":"2018-03-12T07:04:00.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj5q002v5oq841hdcdfo","content":"<p><a href=\"csharp控件属性事件大全.doc\">点击下载 C#控件属性事件大全</a></p>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p><a href=\"csharp控件属性事件大全.doc\">点击下载 C#控件属性事件大全</a></p>\n"},{"title":"图片","date":"2018-03-12T08:40:41.000Z","_content":"\n\n<figure>\n    <img src=\"1.png\">\n</figure> ","source":"_posts/生活/2018-03-10-图片.md","raw":"---\ntitle: 图片\ndate: 2018-03-12 16:40:41\ncategories: 生活\ntags: 生活随笔\n---\n\n\n<figure>\n    <img src=\"1.png\">\n</figure> ","slug":"生活/2018-03-10-图片","published":1,"updated":"2018-03-12T09:03:20.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj5t002y5oq80pohx4wz","content":"<figure><br>    <img src=\"/2018/03/12/生活/2018-03-10-图片/1.png\"><br></figure> ","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<figure><br>    <img src=\"/2018/03/12/生活/2018-03-10-图片/1.png\"><br></figure> "},{"title":"最全的前端资源教程","date":"2018-03-12T07:00:42.000Z","_content":"\n\n## Javascript\n| Article | Article |\n| --------- | --------- |\n|[Javascript深浅拷贝](https://github.com/Wscats/Good-text-Share/issues/57)|[Javascript中的apply和call继承](https://github.com/Wscats/Good-text-Share/issues/56)|\n|[Javascript的jsonp原理](https://github.com/Wscats/Good-text-Share/issues/55)|[Javascript监听触摸事件](https://github.com/Wscats/Good-text-Share/issues/49)|\n|[Javascript中的var self = this](https://github.com/Wscats/Good-text-Share/issues/52)|[Javascript面向对象编程](https://github.com/Wscats/Good-text-Share/issues/32)|\n|[Javascript滑屏切换场景](https://github.com/Wscats/Good-text-Share/issues/14)|[Javascript获取经纬度，关于调用百度API的问题](https://github.com/Wscats/Good-text-Share/issues/16)|\n|[妙用Javascript运算符](https://github.com/Wscats/Good-text-Share/issues/3)|[深入理解Javascript函数编程](https://github.com/Wscats/Good-text-Share/issues/1)|\n|[Javascript的setTimeout详细用例](https://github.com/Wscats/Good-text-Share/issues/4)|[sessionstorage，localstorage和cookie](https://github.com/Wscats/Good-text-Share/issues/42)|\n|[JS日期对比](https://github.com/Wscats/Good-text-Share/issues/11)|[JSONP参考文章](https://github.com/Wscats/Good-text-Share/issues/10)|\n|[Javascript的createElement](https://wscats.github.io/angular-demo/createElement.html)|[Javascript的createDocumentFragment](https://wscats.github.io/angular-demo/createDocumentFragment.html)|\n|[sessionStorage和localStorage](https://wscats.github.io/angular-demo/sessionStoragelocalStorage.html)|[像素帧动画](https://wscats.github.io/angular-demo/像素动画.html)|\n| **Reference** | **Reference** |\n|[收集最全前端学习资料](https://github.com/windiest/Front-end-tutorial)|[最全前端教程-猫的回忆录](https://github.com/Wscats/Good-text-Share)|\n|[JavaScript中的this陷阱的最全收集--没有之一](https://segmentfault.com/a/1190000002640298)|[JS函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html)|\n|[JavaScript Promise迷你书（中文版）](http://liubin.github.io/promises-book)|[阮一峰 Javascript](http://javascript.ruanyifeng.com)|\n|[前端 TOP 100](https://www.awesomes.cn/rank)|[小白的零基础JavaScript全栈教程](http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000)|\n\n## UI\n| Reference | Reference |\n| --------- | --------- |\n|[WeUI](https://github.com/weui/weui)|[Bootstrap](http://www.bootcss.com)|\n|[MUI-最接近原生APP体验的高性能前端框架](http://dev.dcloud.net.cn/mui/)|[Amaze UI中国首个开源HTML5跨屏前端框架](http://amazeui.org)|\n|[Frozen UI](http://frozenui.github.io/)|[Foundation](http://foundation.zurb.com/)|\n|[SUI](http://sui.taobao.org/sui/docs/)|[ZUI](https://github.com/easysoft/zui)|\n|[淘宝HTML5前端框架](http://m.sui.taobao.org)|[KISSY - 阿里前端JavaScript库](http://docs.kissyui.com)|\n|[网易Nej - Nice Easy Javascript](http://nej.netease.com)|[Kendo UI MVVM Demo](http://demos.telerik.com/kendo-ui/mvvm/index)|\n|[Smart UI](http://smartui.chinamzz.com)|[雅虎UI - CSS UI](http://developer.yahoo.com/yui/grids)|\n\n## CSS\n| Article | Article |\n| --------- | --------- |\n|[CSS Flex布局](https://github.com/Wscats/Good-text-Share/issues/41)|[移动前端开发CSS3](https://github.com/Wscats/Good-text-Share/issues/38)|\n|[响应式布局 媒体查询](https://github.com/Wscats/Good-text-Share/issues/43)|[CSS图片响应式布局](https://github.com/Wscats/Good-text-Share/issues/34)|\n|[lessDemo的less文件](https://wscats.github.io/angular-demo/stylesheets/styles.less)||\n| **Reference** | **Reference** |\n|[CSS 语法参考](http://tympanus.net/codrops/css_reference)|[CSS3动画手册](http://isux.tencent.com/css3/index.html)|\n|[腾讯css3动画制作工具](http://isux.tencent.com/css3/tools.html)|[animate.css](http://daneden.github.io/animate.css)|\n|[Animated Books with CSS 3D Transforms](http://tympanus.net/Development/AnimatedBooks/)|[Browserhacks](http://browserhacks.com/)|\n\n## HTML\n| Article | Article |\n| --------- | --------- |\n[HTML5有哪些让你惊艳的demo](http://www.zhihu.com/question/24398907)|[Wallpaperbetter](http://www.wallpaperbetter.com/)|\n\n## Angular\n| Article | Angular文档 |\n| --------- | --------- |\n|[Angular源码解读publishExternalAPI函数](https://github.com/Wscats/Good-text-Share/issues/26)|[Angular源码解读setupModuleLoader函数](https://github.com/Wscats/Good-text-Share/issues/25)|\n|[Angular的ng-style用法](https://github.com/Wscats/Good-text-Share/issues/35)|[Angular判断在那个浏览器下打开的服务](https://github.com/Wscats/Good-text-Share/issues/29)|\n|[Angular文字折叠展开组件的原理分析](https://github.com/Wscats/Good-text-Share/issues/28)|[Angular服务Request异步请求的详细分析](https://github.com/Wscats/Good-text-Share/issues/21)|\n|[Angular自定义service服务详解](https://github.com/Wscats/Good-text-Share/issues/24)|[Angular自定义判断上一页是否存在的服务](https://github.com/Wscats/Good-text-Share/issues/22)|\n|[Angular操作cookies方法](https://github.com/Wscats/Good-text-Share/issues/19)|[Angular打印错误的minErr函数](https://github.com/Wscats/Good-text-Share/issues/18)|\n|[Angular的fromJson与toJson方法](https://github.com/Wscats/Good-text-Share/issues/17)|[Angular用ng-repeat生成表单并绑定ng-click时的一个细节](https://github.com/Wscats/Good-text-Share/issues/12)|\n|[Angular的run方法巧妙运用](https://github.com/Wscats/Good-text-Share/issues/6)|[Angular处理Html转义问题](https://github.com/Wscats/Good-text-Share/issues/5)|\n|[ng-repeat绑定事件和嵌套](ng-repeat绑定事件和嵌套)|[Angular的post请求后台接受不了数据的解决方法](https://github.com/Wscats/angular-demo/issues/4)|\n|[ionic总结](https://github.com/Wscats/angular-demo/issues/19)|[ui-route和ng-route](https://github.com/Wscats/angular-demo/issues/17)|\n|[ng-options&&ng-switch](https://github.com/Wscats/angular-demo/issues/15)|[directive组件作用域](https://github.com/Wscats/angular-demo/issues/14)|\n|[表单认证](https://github.com/Wscats/angular-demo/issues/13)|[$broadcast,$emit and $on](https://github.com/Wscats/angular-demo/issues/11)|\n|[自定义过滤器](https://github.com/Wscats/angular-demo/issues/9)|[自定义手势指令ng-touch](https://github.com/Wscats/angular-demo/issues/8)|\n|[ng-animate](https://github.com/Wscats/angular-demo/issues/7)|[单页面应用的技术点](https://github.com/Wscats/angular-demo/issues/3)|\n| **Guess you like** |**AppDemo**|\n|[Angular商城Demo](https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html)|[Angular的Cnode社区](https://wscats.github.io/angular-demo/spa/CNode/index.html)|\n|[AngularStovepipe](https://wscats.github.io/angular-demo/spa/Stovepipe/index.html)|[Angular的新闻客户端](https://wscats.github.io/angular-demo/spa/TT/index.html)|\n|[Angular商城Demo](https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html)|[Angular的Cnode社区](https://wscats.github.io/angular-demo/spa/CNode/index.html)|\n|[Angular内联编辑器](https://wscats.github.io/angular-demo/angularjs5examples/inline-editor/index.html)|[Angular即时搜索](https://wscats.github.io/angular-demo/angularjs5examples/instant-search/index.html)|\n|[Angular导航菜单](https://wscats.github.io/angular-demo/angularjs5examples/navigation-menu/index.html)|[Angular订单表单](https://wscats.github.io/angular-demo/angularjs5examples/order-form/index.html)|\n|[Angular切换网格](https://wscats.github.io/angular-demo/angularjs5examples/switchable-grid/index.html)|[Angular新闻＋WEUI DEMO](https://wscats.github.io/angular-demo/spa/news/index.html) [源码](https://github.com/Wscats/angular-demo/tree/gh-pages/spa/NodeServerAndApi-Weui-News)|\n| **Controller** |**控制器**|\n|[Angular控制器demo](https://wscats.github.io/angular-demo/view/student.html)||\n| **SPA DEMO** |**单页面应用**|\n|[Angular+Weui单页面应用DEMO-每日笑话](https://wscats.github.io/angular-demo/weui每日笑话.html)||\n| **Service** |**服务**|\n|[Angular自定义服务的常用方法](https://github.com/Wscats/angular-demo/blob/gh-pages/%E5%B8%B8%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95.md)|[Angular部分服务demo](https://wscats.github.io/angular-demo/部分服务demo.html)|\n|[Angular自定义Canvas画图服务](https://wscats.github.io/angular-demo/Angular自定义Canvas画图服务.html)|[Angular自定义http服务 面向对象封装](https://wscats.github.io/angular-demo/自定义http服务.html)|\n| **Directive** |**组件与指令**|\n|[Angular自定义手势指令](https://wscats.github.io/angular-demo/自定义手势事件.html)|[Angular自定义轮播图组件](https://wscats.github.io/angular-demo/自定义directive轮播图.html)|\n|[Angular自定义下拉刷新组件1](https://wscats.github.io/angular-demo/下拉刷新.html)|[Angular自定义下拉刷新组件2](https://wscats.github.io/angular-demo/Angular自定义下拉刷新组件.html)|\n| **Router** |**路由**|\n|[Angular路由嵌套](https://wscats.github.io/angular-demo/UI路由嵌套DEMO.html)|[Angular路由单页多个ui-view](https://wscats.github.io/angular-demo/uiRoute/index.html)|\n| **Filter** |**过滤器**|\n|[Angular自带过滤器](https://wscats.github.io/angular-demo/angular自带过滤器.html)|[Angular自定义关键词检索过滤器](https://wscats.github.io/angular-demo/自定义关键词检索过滤器.html)|\n| **Animate** |**动画**|\n|[Angular ng-animate动画1](https://wscats.github.io/angular-demo/ng-animate动画.html)|[Angular ng-animate动画2](https://wscats.github.io/angular-demo/ng-animate动画2.html)|\n| **Other** |**其他**|\n|[Angular中使用iframe](https://wscats.github.io/angular-demo/iframesdemo.html)|[Angular三级联动(1)](https://wscats.github.io/angular-demo/%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8.html)|\n|[Angular中使用ng-switch](https://wscats.github.io/angular-demo/ngSwitch.html)|[百度定位DEMO](https://wscats.github.io/angular-demo/百度地图定位DEMO.html)|\n|[Angular三级联动(2)](https://wscats.github.io/angular-demo/三级联动改进.html)|[Angular事件监听](https://wscats.github.io/angular-demo/事件监听.html)|\n|[jQuery模拟ng-repeat](https://wscats.github.io/angular-demo/jquery模拟ng-repeat.html)|[lessDemo](https://wscats.github.io/angular-demo/lessDemo.html)|\n|[Angular自定义cookie服务和ngCookie的使用](https://wscats.github.io/angular-demo/ngCookie.html)|[图灵机器人](https://wscats.github.io/angular-demo/图灵机器人.html)|\n|[Angular利用angular.module()实现模块化](https://wscats.github.io/angular-demo/angular模块化.html)|[Angular的form表单验证](https://wscats.github.io/angular-demo/form表单验证.html)|\n|[Angular的ng-repeat嵌套](https://wscats.github.io/angular-demo/ng-repeat嵌套.html)|[Angular利用angular.module()实现模块化2](https://wscats.github.io/angular-demo/angular模块化2.html)|\n| **PHP** | **PHP** |\n|[PHP CURL请求的小细节](https://github.com/Wscats/Good-text-Share/issues/53)||\n| **Reference** | **Reference** |\n|[最流行的PHP 代码规范](https://segmentfault.com/a/1190000000443795)|[最流行的PHP 代码规范](https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md)|\n|[Angular.js的一些学习资源](http://blog.aijc.net/AngularLearning/)|[Angularjs中文社区](http://angularjs.cn)|\n|[一些扩展Angular UI组件](https://github.com/angular-ui)|[Angular UI](http://mgcrea.github.io/angular-strap)|\n|[AngularJS在线教程](http://each.sinaapp.com/angular)|[Angular学习笔记](http://www.zouyesheng.com/angular.html)|\n\n## React\n| React | Reference |\n| --------- | --------- |\n|[React教程 菜鸟教程](http://www.runoob.com/react/react-tutorial.html)|[React Router 使用教程](http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu)|\n|[React开发中文手册-极客学院](http://wiki.jikexueyuan.com/project/react/)|[React教程-汇智网](http://www.hubwiz.com/course/552762019964049d1872fc88/)|\n|[React.js快速开始](http://www.phperz.com/article/15/0712/140537.html#)|[Reactjs 2016最佳实践](http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/)|\n|[React 入门教程](https://hulufei.gitbooks.io/react-tutorial/content/introduction.html)|[汇智网 React教程](http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam)|\n|[轻松入门React和Webpack](https://segmentfault.com/a/1190000002767365)|[React中文索引](http://nav.react-china.org/#docs)|\n|[Redux 中文文档](http://cn.redux.js.org/)|[React Router官方文档中文翻译](https://github.com/react-guide/react-router-cn)|\n|[React入门教程](http://www.cnblogs.com/kunyashaw/p/5619256.html)|[React介绍及实践教程](http://www.ibm.com/developerworks/cn/web/1509_dongyue_react/index.html)|\n|[React.js 官方网址](https://facebook.github.io/react/index.html)|[React.js 官方文档](https://facebook.github.io/react/docs/getting-started.html)|\n|[React.js material UI](http://material-ui.com/#)|[React.js TouchstoneJS UI](http://touchstonejs.io)|\n|[React.js amazeui UI](http://amazeui.org/react)|[React 入门实例教程 - 阮一峰](http://www.ruanyifeng.com/blog/2015/03/react.html)|\n|[React Native 中文版](http://wiki.jikexueyuan.com/project/react-native)|[Webpack 和 React 小书 - gitbook](https://fakefish.github.io/react-webpack-cookbook)|\n\n## Vue\n| Vue |AppDemo|Demo|\n| --------- | --------- | --------- |\n|[NewsDemo](https://wscats.github.io/vue-demo/news/index.html)|[vue计算属性](https://wscats.github.io/vue-demo/vue计算属性.html)|[vue生命周期](https://wscats.github.io/vue-demo/vue生命周期.html)|\n| **Article** |**Vue文档**||\n|[Vue-cli脚手架](https://github.com/Wscats/vue-demo/issues/2)|[Vue组件](https://github.com/Wscats/vue-demo/issues/3)|[vue自定义指令](https://github.com/Wscats/vue-demo/issues/8)|\n|[Vue过渡动画](https://github.com/Wscats/vue-demo/issues/9)|[Vue指令](https://github.com/Wscats/vue-demo/issues/7)|[Vue api文档](https://github.com/Wscats/vue-demo/issues/6)|\n|[Vue执行ajax请求](https://github.com/Wscats/vue-demo/issues/5)|[vue实现类似angular服务的方法](https://github.com/Wscats/vue-demo/issues/4)|[Vue源码参考文档](https://github.com/Wscats/vue-demo/issues/10)|\n| **Router** |**路由**||\n|[路由demo](https://wscats.github.io/vue-demo/路由.html)|[路由demo2](https://wscats.github.io/vue-demo/路由2.html)||\n| **Directive** |**指令**||\n|[指令demo](https://wscats.github.io/vue-demo/指令.html)|[自定义指令demo](https://wscats.github.io/vue-demo/自定义指令.html)|[滑动手势demo](https://wscats.github.io/vue-demo/滑动手势指令.html)|\n| **Filter** |**过滤器**||\n|[过滤器demo](https://wscats.github.io/vue-demo/过滤器.html)|[过滤器实现分页demo](https://wscats.github.io/vue-demo/vue使用过滤器实现分页.html)|[过滤器读写数据](https://wscats.github.io/vue-demo/vue过滤器读写数据.html)|\n| **Transition** |**过渡**||\n|[过渡demo](https://wscats.github.io/vue-demo/过渡.html)|[过渡demo2](https://wscats.github.io/vue-demo/过渡2.html)||\n| **Form** |**表单**||\n|[获取表单值](https://wscats.github.io/vue-demo/vue获取表单值.html)|||\n| **Computed** |**计算**||\n|[计算属性](https://wscats.github.io/vue-demo/vue计算属性.html)|||\n| Component |组件||\n|[组件demo](https://wscats.github.io/vue-demo/组件.html)|||\n| **Reference** | **Reference** | **Reference** |\n|[Vue官网](http://cn.vuejs.org)|[Vue论坛](http://forum.vuejs.org)|[Awesome-vue](https://github.com/vuejs/awesome-vue)|\n\n\n## Node\n| Node | Article |\n| --------- | --------- |\n|[node技巧](https://github.com/Wscats/Good-text-Share/issues/44)|[NodeJs静态服务器](https://github.com/Wscats/angular-demo/tree/gh-pages/diyNodeServer)|\n| **Reference** | **Reference** |\n|[Node.js 包教不包会](https://github.com/alsotang/node-lessons)|[七天学会NodeJS](http://nqdeng.github.io/7-days-nodejs/)|\n|[从零开始nodejs系列文章](http://blog.fens.me/series-nodejs)|[Node入门](http://www.nodebeginner.org/index-zh-cn.html)|\n|[Node初学者入门，一本全面的NodeJS教程](http://ourjs.com/detail/529ca5950cb6498814000005)||\n\n## Gulp \n| Gulp | Article |\n| --------- | --------- |\n|[Gulp Demo](https://github.com/Wscats/glup)||\n| **Gulp** | **Reference** |\n|[Gulp官网](http://gulpjs.com)|[Gulp中文网](http://www.gulpjs.com.cn)|\n|[Gulp资料收集](https://github.com/Platform-CUF/use-gulp)|[Gulp：任务自动管理工具 - ruanyifeng](http://javascript.ruanyifeng.com/tool/gulp.html)|\n|[Gulp插件](http://gulpjs.com/plugins])|[Gulp不完全入门教程](http://www.ido321.com/1622.html)|\n|[Gulp 入门指南](https://github.com/nimojs/gulp-book)||\n\n## 其他\n| Other | Article |\n| --------- | --------- |\n|[关于Pornographic website的一些前端分析](https://github.com/Wscats/node-demo/issues/4)|[微信公众号开发](https://github.com/Wscats/Good-text-Share/issues/50)|\n|[Atom技巧总结](https://github.com/Wscats/Good-text-Share/issues/30)|[Mac小技巧](https://github.com/Wscats/Good-text-Share/issues/46)|\n|[CSDN页面内JS跳转脚本](https://github.com/Wscats/Good-text-Share/issues/9)|[CSDN博客隐藏配置](https://github.com/Wscats/Good-text-Share/issues/8)|\n|[百度设置小度机器人出现](https://github.com/Wscats/Good-text-Share/issues/7)|[前端冷知识，妙用浏览器地址栏](https://github.com/Wscats/Good-text-Share/issues/2)|\n|[Vim笔记](https://github.com/Wscats/Good-text-Share/issues/27)|[Cordova配置&&Ionic配置（WebApp混合开发环境）](https://github.com/Wscats/Good-text-Share/issues/48)|\n|[IE8及以下按钮超链接无法跳转的问题](https://github.com/Wscats/Good-text-Share/issues/33)||\n\n## 分享功能\n| Share | Reference |\n| --------- | --------- |\n|[百度分享(PC)](http://share.baidu.com)|[JiaThis(PC)](http://jiathis.com)|\n|[社会化分享组件(Mobile)](http://developer.baidu.com/soc/share)|[ShareSDK轻松实现社会化功能(Mobile)](http://www.mob.com)|\n|[友盟分享(Mobile)](http://dev.umeng.com/social/android/quick-integration)||\n\n## 在线演示\n| Reference | Reference |\n| --------- | --------- |\n|[js 在线编辑 - runjs](http://runjs.cn)|[js 在线编辑 - jsbin](http://jsbin.com)|\n|[js 在线编辑 - codepen](http://codepen.io)|[js 在线编辑 - jsfiddle](http://jsfiddle.net)|\n|[java 在线编辑 - runjs](http://ideone.com)|[js 在线编辑 - hcharts](http://code.hcharts.cn)|\n|[js 在线编辑 - jsdm](http://jsdm.com)|[sql 在线编辑 - sqlfiddle](http://sqlfiddle.com)|\n|[mozilla 在线编辑器](https://thimble.mozilla.org)||\n\n## 富文本编辑器\n| Reference | Reference |\n| --------- | --------- |\n|[百度ueditor](http://ueditor.baidu.com/website)|[ckeditor](http://ckeditor.com)|\n|[tinymce](https://www.tinymce.com)|[kindeditor](http://kindeditor.net)|\n|[wysiwyg](http://www.bootcss.com/p/bootstrap-wysiwyg)|[BachEditor](http://integ.github.io/BachEditor)|\n|[simditor](https://github.com/mycolorway/simditor)|[summernote](https://github.com/summernote/summernote)|\n|[Squire](http://neilj.github.io/Squire)|[wangEditor](https://github.com/wangfupeng1988/wangEditor)|\n\n## Chrome\n| Reference | Reference |\n| --------- | --------- |\n|[Chrome - 基础](http://www.cnblogs.com/constantince/p/4565261.html)|[Chrome - 进阶](http://www.cnblogs.com/constantince/p/4579121.html)|\n|[Chrome - 性能](http://www.cnblogs.com/constantince/p/4585983.html)|[Chrome - 性能进阶](http://www.cnblogs.com/constantince/p/4607497.html)|\n|[Chrome - 移动](http://www.cnblogs.com/constantince/p/4624241.html)|[Chrome - 使用技巧](http://www.cnblogs.com/liyunhua/p/4544738.html)|\n|[Chrome - Console控制台不完全指南](http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html)|[chrome开发工具快捷键](http://anti-code.com/devtools-cheatsheet)|\n|[Chrome 开发工具 Workspace 使用](http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace)|[Chrome神器Vimium快捷键学习记录](http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html)|\n|[Sass调试-w3cplus](http://www.w3cplus.com/sassguide/debug.html)|[如何更专业的使用Chrome开发者工具-w3cplus](http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html)|\n|[Chrome调试canvas](http://sentsin.com/web/253.html)|[神器——Chrome开发者工具(一)](https://segmentfault.com/a/1190000000683599)|\n|[奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍](https://xinranliu.me/2015-05-22-qiqu-performance)|[Chrome 开发者工具的 15 个小技巧](http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html)|\n|[Chrome开发者工具不完全指南](http://1ke.co/course/361)|[Chrome 开发者工具使用技巧](http://segmentfault.com/a/1190000003882567)|\n\n## 性能优化\n| Reference | Reference |\n| --------- | --------- |\n|[Javascript高性能动画与页面渲染](http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering)|[移动H5前端性能优化指南](http://isux.tencent.com/h5-performance.html)|\n|[给网页设计师和前端开发者看的前端性能优化](http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers)|[张鑫旭——前端性能](http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/)|\n|[web前端性能优化进阶路](http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html)|[Hey——前端性能](http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD)|\n|[YSLOW中文介绍](http://www.cnblogs.com/yslow)|[Yahoo!团队实践分享：网站性能](http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml)|\n|[加载，不只是少一点点](http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml)|[由12306谈谈网站前端性能和后端性能优化](http://coolshell.cn/articles/6470.html)|\n|[【高性能前端1】高性能HTML](http://www.alloyteam.com/2012/10/high-performance-html)|[【高性能前端2】高性能CSS](http://www.alloyteam.com/2012/10/high-performance-css)|\n|[前端工程与性能优化（上）：静态资源版本更新与缓存](http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1)|[前端工程与性能优化（下）：静态资源管理与模板框架](http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2)|\n|[HTTPS连接的前几毫秒发生了什么](http://blog.jobbole.com/48369)|[Yslow](http://uicss.cn/yslow/#more-12319)|\n|[阿里无线前端性能优化指南(Pt.1 加载期优化)](https://github.com/amfe/article/issues/1)|[毫秒必争，前端网页性能最佳实践](http://www.cnblogs.com/developersupport/p/3248695.html)|\n\n## CDN\n| Reference | Reference |\n| --------- | --------- |\n|[Jquery&Bootstrap中文网开源项目免费 CDN 服务](http://www.bootcdn.cn/jquery)|[Bootstrap中文网开源项目免费 CDN 服务](http://www.bootcdn.cn)|\n|[新浪CDN](http://lib.sinaapp.com)|[百度静态资源公共库](http://cdn.code.baidu.com)|\n|[开放静态文件 CDN - 七牛](http://staticfile.org)|[CDN加速 - jq22](http://www.jq22.com/cdn)|\n|[微软CDN](http://www.asp.net/ajax/cdn)|[Angular CDN](https://code.angularjs.org/1.5.8/)|\n|[360网站卫士常用前端公共库CDN服务](http://libs.useso.com)||\n\n## Git\n| Article | Article |\n| --------- | --------- |\n|[Git操作](https://github.com/Wscats/Good-text-Share/issues/20)|[Git CSDN Blog](http://blog.csdn.net/qq_27080247/article/details/49942991)|\n| **Reference** | **Reference** |\n|[Git-scm](http://git-scm.com)|[Git-for-windows](https://git-for-windows.github.io)|\n|[廖雪峰-Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)|[Gogithub](http://www.worldhello.net/gotgithub/index.html)|\n|[Git常规命令练习](http://pcottle.github.io/learnGitBranching)|[Git的资料整理](https://github.com/xirong/my-git)|\n|[我所记录的git命令（非常实用）](http://www.cnblogs.com/fanfan259/p/4810517.html)|[GitHub 漫游指南](https://github.com/phodal/github-roam)|\n|[GitHub秘籍](https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md)|[动画方式练习git](http://onlywei.github.io/explain-git-with-d3)|\n\n## Sass&Less\n| Article | Article |\n| --------- | --------- |\n|[Less教程](https://github.com/Wscats/less-demo/issues/1)||\n| **Reference** | **Reference** |\n|[Sass](http://www.w3cplus.com/sassguide)|[Sass中文文档](http://sass.bootcss.com)|\n|[Less](http://less.bootcss.com)||\n\n## Markdown\n| Reference | Reference |\n| --------- | --------- |\n|[Markdown 语法说明 (简体中文版)](http://wowubuntu.com/markdown)|[Markdown入门参考](https://github.com/LearnShare/Learning-Markdown/blob/master/README.md)|\n|[Mdeditor(一款国内的在线markdown编辑器)](https://www.zybuluo.com/mdeditor)|[Stackedit(国外的在线markdown编辑器，功能强大，同步云盘)](https://stackedit.io)|\n|[Mditor一款轻量级的markdown编辑器](http://bh-lay.github.io/mditor)|[lepture-editor](https://github.com/lepture/editor)|\n|[Markdown-editor](https://github.com/jbt/markdown-editor)||\n\n## 前端文档\n| Reference | Reference |\n| --------- | --------- |\n|[前端知识结构](https://github.com/JacksonTian/fks)|[Web前端开发大系概览](https://github.com/unruledboy/WebFrontEndStack)|\n|[免费的编程中文书籍索](https://github.com/justjavac/free-programming-books-zh_CN)|[前端书籍](https://github.com/dypsilon/frontend-dev-bookmarks)|\n|[前端免费书籍大全](https://github.com/vhf/free-programming-books)|[重新介绍JavaScript（JS教程）](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript)|\n|[Gitbook](https://www.gitbook.com 国外的在线markdown可编辑成书)|[Front-End-Develop-Guide 前端开发指南](https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide)|\n|[前端开发笔记本](https://li-xinyang.gitbooks.io/frontend-notebook/content)|[大前端工具集](https://github.com/nieweidong/fetool)|\n|[前端开发者手册](https://dwqs.gitbooks.io/frontenddevhandbook/content)|[结合个人经历总结的前端入门方法](https://github.com/qiu-deqing/FE-learning)|\n|[2016最新前端学习计划](http://blog.csdn.net/qq_25827845/article/details/53079094)|\n\n## 前端规范\n| Reference | Reference |\n| --------- | --------- |\n|[通过分析github代码库总结出来的工程师代码书写习惯](http://alloyteam.github.io/CodeGuide/)|[HTML&CSS编码规范 by @mdo](http://codeguide.bootcss.com)|\n|[前端编码规范之js - by yuwenhui](http://yuwenhui.github.io)|[前端编码规范之js - by 李靖](http://www.cnblogs.com/hustskyking/p/javascript-spec.html)|\n|[Airbnb JavaScript 编码规范（简体中文版）](https://github.com/yuche/javascript#table-of-contents)|[AMD与CMD规范的区别](http://www.zhihu.com/question/20351507)|\n|[AMD与CMD规范的区别](http://www.cnblogs.com/tugenhua0707/p/3507957.html)|[KISSY 源码规范](http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html)|\n|[前端代码规范及最佳实践](http://blog.jobbole.com/79075)|[百度前端规范](http://coderlmn.github.io/code-standards)|\n|[JavaScript风格指南/编码规范（Airbnb公司版）](http://blog.jobbole.com/79484)|[网易前端开发规范](http://nec.netease.com/standard)|\n|[前端规范资源列表](https://github.com/ecomfe/spec)|[Web 前端开发规范文档](http://codecloud.net/5622.html)|\n\n## 前端面试\n| Reference | Reference |\n| --------- | --------- |\n|[2016校招内推 -- 阿里巴巴前端 -- 四面面试经历](http://www.cnblogs.com/imwtr/p/4685546.html)|[那几个月在找工作（百度，网易游戏，华为）](https://www.nowcoder.com/discuss/3196)|\n|[前端开发面试题](https://segmentfault.com/a/1190000000465431)|[Front-end-Interview-questions](https://github.com/hawx1993/Front-end-Interview-questions)|\n|[5个经典的前端面试问题](http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E)|[Front-end-Developer-Interview-Questions](https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese)|\n|[BAT及各大互联网公司2014前端笔试面试题：JavaScript篇](http://blog.jobbole.com/78738/)|[前端开发面试题大收集](https://github.com/paddingme/Front-end-Web-Development-Interview-Question)|\n|[收集的前端面试题和答案](https://github.com/qiu-deqing/FE-interview)|[前端开发面试题](https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md)|\n|[前端面试大全](https://segmentfault.com/a/1190000005947094)|[关于前端面试](https://mdluo.github.io/blog/about-front-end-interview/)|\n\n## 前端网站\n| Reference | Reference |\n| --------- | --------- |\n|[掘金](https://gold.xitu.io/)|[百度FEX](http://fex.baidu.com/)|\n|[阿里UED](http://www.aliued.com/)|[菜鸟教程](http://www.runoob.com/)|\n|[QDFuns](http://www.qdfuns.com/portal.php)|[幕课网](http://www.imooc.com/)|\n|[Codepen](http://codepen.io/)|[Sentsin](http://sentsin.com/daohang/)|\n|[CTOLib](http://www.ctolib.com/javascript/)|[CTOLib/Node](http://www.ctolib.com/nodejs/)|\n\n## JS练习\n| Reference | Reference |\n| --------- | --------- |\n|[Codewars](https://www.codewars.com/)|[Javascript-puzzlers](http://javascript-puzzlers.herokuapp.com/)|\n|[Freecodecamp中文版](https://freecodecamp.cn/)|[ES6katas](http://es6katas.org/)|\n|[Now Coder牛客网](https://www.nowcoder.com/ta/js-assessment)|[Leetcode](https://leetcode.com/)|\n|[Nodeschool](https://nodeschool.io/)|[Hackerrank](https://www.hackerrank.com/)|\n\n## 算法\n| Reference | Reference |\n| --------- | --------- |\n|[数据结构与算法 JavaScript 描述. 章节练习](https://github.com/Ralph-Wang/algorithm.in.js)|[常见排序算法（JS版）](https://github.com/twobin/twobinSort)|\n|[经典排序](https://github.com/luofei2011/jsAgm/blob/master/js/sort.js)|[常见排序算法-js版本](https://github.com/hechangmin/jssort)|\n\n## ES\n| Reference | Reference |\n| --------- | --------- |\n|[Exploring-ES6翻译](http://es6-org.github.io/exploring-es6/)|[阮一峰 ES6](http://es6.ruanyifeng.com)|\n|[ECMA-262，第 5 版](http://yanhaijing.com/es5)|[ES5](http://es5.github.io)|\n\n***\n> 本文引用自：https://github.com/GuoXingGitHub/Front-end-tutorial","source":"_posts/技术/2018-03-10-最全的前端资源教程.md","raw":"---\ntitle: '最全的前端资源教程'\ndate: 2018-03-12 15:00:42\ncategories: 技术\ntags: [web前端,开发工具/插件]\n---\n\n\n## Javascript\n| Article | Article |\n| --------- | --------- |\n|[Javascript深浅拷贝](https://github.com/Wscats/Good-text-Share/issues/57)|[Javascript中的apply和call继承](https://github.com/Wscats/Good-text-Share/issues/56)|\n|[Javascript的jsonp原理](https://github.com/Wscats/Good-text-Share/issues/55)|[Javascript监听触摸事件](https://github.com/Wscats/Good-text-Share/issues/49)|\n|[Javascript中的var self = this](https://github.com/Wscats/Good-text-Share/issues/52)|[Javascript面向对象编程](https://github.com/Wscats/Good-text-Share/issues/32)|\n|[Javascript滑屏切换场景](https://github.com/Wscats/Good-text-Share/issues/14)|[Javascript获取经纬度，关于调用百度API的问题](https://github.com/Wscats/Good-text-Share/issues/16)|\n|[妙用Javascript运算符](https://github.com/Wscats/Good-text-Share/issues/3)|[深入理解Javascript函数编程](https://github.com/Wscats/Good-text-Share/issues/1)|\n|[Javascript的setTimeout详细用例](https://github.com/Wscats/Good-text-Share/issues/4)|[sessionstorage，localstorage和cookie](https://github.com/Wscats/Good-text-Share/issues/42)|\n|[JS日期对比](https://github.com/Wscats/Good-text-Share/issues/11)|[JSONP参考文章](https://github.com/Wscats/Good-text-Share/issues/10)|\n|[Javascript的createElement](https://wscats.github.io/angular-demo/createElement.html)|[Javascript的createDocumentFragment](https://wscats.github.io/angular-demo/createDocumentFragment.html)|\n|[sessionStorage和localStorage](https://wscats.github.io/angular-demo/sessionStoragelocalStorage.html)|[像素帧动画](https://wscats.github.io/angular-demo/像素动画.html)|\n| **Reference** | **Reference** |\n|[收集最全前端学习资料](https://github.com/windiest/Front-end-tutorial)|[最全前端教程-猫的回忆录](https://github.com/Wscats/Good-text-Share)|\n|[JavaScript中的this陷阱的最全收集--没有之一](https://segmentfault.com/a/1190000002640298)|[JS函数式编程指南](https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html)|\n|[JavaScript Promise迷你书（中文版）](http://liubin.github.io/promises-book)|[阮一峰 Javascript](http://javascript.ruanyifeng.com)|\n|[前端 TOP 100](https://www.awesomes.cn/rank)|[小白的零基础JavaScript全栈教程](http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000)|\n\n## UI\n| Reference | Reference |\n| --------- | --------- |\n|[WeUI](https://github.com/weui/weui)|[Bootstrap](http://www.bootcss.com)|\n|[MUI-最接近原生APP体验的高性能前端框架](http://dev.dcloud.net.cn/mui/)|[Amaze UI中国首个开源HTML5跨屏前端框架](http://amazeui.org)|\n|[Frozen UI](http://frozenui.github.io/)|[Foundation](http://foundation.zurb.com/)|\n|[SUI](http://sui.taobao.org/sui/docs/)|[ZUI](https://github.com/easysoft/zui)|\n|[淘宝HTML5前端框架](http://m.sui.taobao.org)|[KISSY - 阿里前端JavaScript库](http://docs.kissyui.com)|\n|[网易Nej - Nice Easy Javascript](http://nej.netease.com)|[Kendo UI MVVM Demo](http://demos.telerik.com/kendo-ui/mvvm/index)|\n|[Smart UI](http://smartui.chinamzz.com)|[雅虎UI - CSS UI](http://developer.yahoo.com/yui/grids)|\n\n## CSS\n| Article | Article |\n| --------- | --------- |\n|[CSS Flex布局](https://github.com/Wscats/Good-text-Share/issues/41)|[移动前端开发CSS3](https://github.com/Wscats/Good-text-Share/issues/38)|\n|[响应式布局 媒体查询](https://github.com/Wscats/Good-text-Share/issues/43)|[CSS图片响应式布局](https://github.com/Wscats/Good-text-Share/issues/34)|\n|[lessDemo的less文件](https://wscats.github.io/angular-demo/stylesheets/styles.less)||\n| **Reference** | **Reference** |\n|[CSS 语法参考](http://tympanus.net/codrops/css_reference)|[CSS3动画手册](http://isux.tencent.com/css3/index.html)|\n|[腾讯css3动画制作工具](http://isux.tencent.com/css3/tools.html)|[animate.css](http://daneden.github.io/animate.css)|\n|[Animated Books with CSS 3D Transforms](http://tympanus.net/Development/AnimatedBooks/)|[Browserhacks](http://browserhacks.com/)|\n\n## HTML\n| Article | Article |\n| --------- | --------- |\n[HTML5有哪些让你惊艳的demo](http://www.zhihu.com/question/24398907)|[Wallpaperbetter](http://www.wallpaperbetter.com/)|\n\n## Angular\n| Article | Angular文档 |\n| --------- | --------- |\n|[Angular源码解读publishExternalAPI函数](https://github.com/Wscats/Good-text-Share/issues/26)|[Angular源码解读setupModuleLoader函数](https://github.com/Wscats/Good-text-Share/issues/25)|\n|[Angular的ng-style用法](https://github.com/Wscats/Good-text-Share/issues/35)|[Angular判断在那个浏览器下打开的服务](https://github.com/Wscats/Good-text-Share/issues/29)|\n|[Angular文字折叠展开组件的原理分析](https://github.com/Wscats/Good-text-Share/issues/28)|[Angular服务Request异步请求的详细分析](https://github.com/Wscats/Good-text-Share/issues/21)|\n|[Angular自定义service服务详解](https://github.com/Wscats/Good-text-Share/issues/24)|[Angular自定义判断上一页是否存在的服务](https://github.com/Wscats/Good-text-Share/issues/22)|\n|[Angular操作cookies方法](https://github.com/Wscats/Good-text-Share/issues/19)|[Angular打印错误的minErr函数](https://github.com/Wscats/Good-text-Share/issues/18)|\n|[Angular的fromJson与toJson方法](https://github.com/Wscats/Good-text-Share/issues/17)|[Angular用ng-repeat生成表单并绑定ng-click时的一个细节](https://github.com/Wscats/Good-text-Share/issues/12)|\n|[Angular的run方法巧妙运用](https://github.com/Wscats/Good-text-Share/issues/6)|[Angular处理Html转义问题](https://github.com/Wscats/Good-text-Share/issues/5)|\n|[ng-repeat绑定事件和嵌套](ng-repeat绑定事件和嵌套)|[Angular的post请求后台接受不了数据的解决方法](https://github.com/Wscats/angular-demo/issues/4)|\n|[ionic总结](https://github.com/Wscats/angular-demo/issues/19)|[ui-route和ng-route](https://github.com/Wscats/angular-demo/issues/17)|\n|[ng-options&&ng-switch](https://github.com/Wscats/angular-demo/issues/15)|[directive组件作用域](https://github.com/Wscats/angular-demo/issues/14)|\n|[表单认证](https://github.com/Wscats/angular-demo/issues/13)|[$broadcast,$emit and $on](https://github.com/Wscats/angular-demo/issues/11)|\n|[自定义过滤器](https://github.com/Wscats/angular-demo/issues/9)|[自定义手势指令ng-touch](https://github.com/Wscats/angular-demo/issues/8)|\n|[ng-animate](https://github.com/Wscats/angular-demo/issues/7)|[单页面应用的技术点](https://github.com/Wscats/angular-demo/issues/3)|\n| **Guess you like** |**AppDemo**|\n|[Angular商城Demo](https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html)|[Angular的Cnode社区](https://wscats.github.io/angular-demo/spa/CNode/index.html)|\n|[AngularStovepipe](https://wscats.github.io/angular-demo/spa/Stovepipe/index.html)|[Angular的新闻客户端](https://wscats.github.io/angular-demo/spa/TT/index.html)|\n|[Angular商城Demo](https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html)|[Angular的Cnode社区](https://wscats.github.io/angular-demo/spa/CNode/index.html)|\n|[Angular内联编辑器](https://wscats.github.io/angular-demo/angularjs5examples/inline-editor/index.html)|[Angular即时搜索](https://wscats.github.io/angular-demo/angularjs5examples/instant-search/index.html)|\n|[Angular导航菜单](https://wscats.github.io/angular-demo/angularjs5examples/navigation-menu/index.html)|[Angular订单表单](https://wscats.github.io/angular-demo/angularjs5examples/order-form/index.html)|\n|[Angular切换网格](https://wscats.github.io/angular-demo/angularjs5examples/switchable-grid/index.html)|[Angular新闻＋WEUI DEMO](https://wscats.github.io/angular-demo/spa/news/index.html) [源码](https://github.com/Wscats/angular-demo/tree/gh-pages/spa/NodeServerAndApi-Weui-News)|\n| **Controller** |**控制器**|\n|[Angular控制器demo](https://wscats.github.io/angular-demo/view/student.html)||\n| **SPA DEMO** |**单页面应用**|\n|[Angular+Weui单页面应用DEMO-每日笑话](https://wscats.github.io/angular-demo/weui每日笑话.html)||\n| **Service** |**服务**|\n|[Angular自定义服务的常用方法](https://github.com/Wscats/angular-demo/blob/gh-pages/%E5%B8%B8%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95.md)|[Angular部分服务demo](https://wscats.github.io/angular-demo/部分服务demo.html)|\n|[Angular自定义Canvas画图服务](https://wscats.github.io/angular-demo/Angular自定义Canvas画图服务.html)|[Angular自定义http服务 面向对象封装](https://wscats.github.io/angular-demo/自定义http服务.html)|\n| **Directive** |**组件与指令**|\n|[Angular自定义手势指令](https://wscats.github.io/angular-demo/自定义手势事件.html)|[Angular自定义轮播图组件](https://wscats.github.io/angular-demo/自定义directive轮播图.html)|\n|[Angular自定义下拉刷新组件1](https://wscats.github.io/angular-demo/下拉刷新.html)|[Angular自定义下拉刷新组件2](https://wscats.github.io/angular-demo/Angular自定义下拉刷新组件.html)|\n| **Router** |**路由**|\n|[Angular路由嵌套](https://wscats.github.io/angular-demo/UI路由嵌套DEMO.html)|[Angular路由单页多个ui-view](https://wscats.github.io/angular-demo/uiRoute/index.html)|\n| **Filter** |**过滤器**|\n|[Angular自带过滤器](https://wscats.github.io/angular-demo/angular自带过滤器.html)|[Angular自定义关键词检索过滤器](https://wscats.github.io/angular-demo/自定义关键词检索过滤器.html)|\n| **Animate** |**动画**|\n|[Angular ng-animate动画1](https://wscats.github.io/angular-demo/ng-animate动画.html)|[Angular ng-animate动画2](https://wscats.github.io/angular-demo/ng-animate动画2.html)|\n| **Other** |**其他**|\n|[Angular中使用iframe](https://wscats.github.io/angular-demo/iframesdemo.html)|[Angular三级联动(1)](https://wscats.github.io/angular-demo/%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8.html)|\n|[Angular中使用ng-switch](https://wscats.github.io/angular-demo/ngSwitch.html)|[百度定位DEMO](https://wscats.github.io/angular-demo/百度地图定位DEMO.html)|\n|[Angular三级联动(2)](https://wscats.github.io/angular-demo/三级联动改进.html)|[Angular事件监听](https://wscats.github.io/angular-demo/事件监听.html)|\n|[jQuery模拟ng-repeat](https://wscats.github.io/angular-demo/jquery模拟ng-repeat.html)|[lessDemo](https://wscats.github.io/angular-demo/lessDemo.html)|\n|[Angular自定义cookie服务和ngCookie的使用](https://wscats.github.io/angular-demo/ngCookie.html)|[图灵机器人](https://wscats.github.io/angular-demo/图灵机器人.html)|\n|[Angular利用angular.module()实现模块化](https://wscats.github.io/angular-demo/angular模块化.html)|[Angular的form表单验证](https://wscats.github.io/angular-demo/form表单验证.html)|\n|[Angular的ng-repeat嵌套](https://wscats.github.io/angular-demo/ng-repeat嵌套.html)|[Angular利用angular.module()实现模块化2](https://wscats.github.io/angular-demo/angular模块化2.html)|\n| **PHP** | **PHP** |\n|[PHP CURL请求的小细节](https://github.com/Wscats/Good-text-Share/issues/53)||\n| **Reference** | **Reference** |\n|[最流行的PHP 代码规范](https://segmentfault.com/a/1190000000443795)|[最流行的PHP 代码规范](https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md)|\n|[Angular.js的一些学习资源](http://blog.aijc.net/AngularLearning/)|[Angularjs中文社区](http://angularjs.cn)|\n|[一些扩展Angular UI组件](https://github.com/angular-ui)|[Angular UI](http://mgcrea.github.io/angular-strap)|\n|[AngularJS在线教程](http://each.sinaapp.com/angular)|[Angular学习笔记](http://www.zouyesheng.com/angular.html)|\n\n## React\n| React | Reference |\n| --------- | --------- |\n|[React教程 菜鸟教程](http://www.runoob.com/react/react-tutorial.html)|[React Router 使用教程](http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu)|\n|[React开发中文手册-极客学院](http://wiki.jikexueyuan.com/project/react/)|[React教程-汇智网](http://www.hubwiz.com/course/552762019964049d1872fc88/)|\n|[React.js快速开始](http://www.phperz.com/article/15/0712/140537.html#)|[Reactjs 2016最佳实践](http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/)|\n|[React 入门教程](https://hulufei.gitbooks.io/react-tutorial/content/introduction.html)|[汇智网 React教程](http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam)|\n|[轻松入门React和Webpack](https://segmentfault.com/a/1190000002767365)|[React中文索引](http://nav.react-china.org/#docs)|\n|[Redux 中文文档](http://cn.redux.js.org/)|[React Router官方文档中文翻译](https://github.com/react-guide/react-router-cn)|\n|[React入门教程](http://www.cnblogs.com/kunyashaw/p/5619256.html)|[React介绍及实践教程](http://www.ibm.com/developerworks/cn/web/1509_dongyue_react/index.html)|\n|[React.js 官方网址](https://facebook.github.io/react/index.html)|[React.js 官方文档](https://facebook.github.io/react/docs/getting-started.html)|\n|[React.js material UI](http://material-ui.com/#)|[React.js TouchstoneJS UI](http://touchstonejs.io)|\n|[React.js amazeui UI](http://amazeui.org/react)|[React 入门实例教程 - 阮一峰](http://www.ruanyifeng.com/blog/2015/03/react.html)|\n|[React Native 中文版](http://wiki.jikexueyuan.com/project/react-native)|[Webpack 和 React 小书 - gitbook](https://fakefish.github.io/react-webpack-cookbook)|\n\n## Vue\n| Vue |AppDemo|Demo|\n| --------- | --------- | --------- |\n|[NewsDemo](https://wscats.github.io/vue-demo/news/index.html)|[vue计算属性](https://wscats.github.io/vue-demo/vue计算属性.html)|[vue生命周期](https://wscats.github.io/vue-demo/vue生命周期.html)|\n| **Article** |**Vue文档**||\n|[Vue-cli脚手架](https://github.com/Wscats/vue-demo/issues/2)|[Vue组件](https://github.com/Wscats/vue-demo/issues/3)|[vue自定义指令](https://github.com/Wscats/vue-demo/issues/8)|\n|[Vue过渡动画](https://github.com/Wscats/vue-demo/issues/9)|[Vue指令](https://github.com/Wscats/vue-demo/issues/7)|[Vue api文档](https://github.com/Wscats/vue-demo/issues/6)|\n|[Vue执行ajax请求](https://github.com/Wscats/vue-demo/issues/5)|[vue实现类似angular服务的方法](https://github.com/Wscats/vue-demo/issues/4)|[Vue源码参考文档](https://github.com/Wscats/vue-demo/issues/10)|\n| **Router** |**路由**||\n|[路由demo](https://wscats.github.io/vue-demo/路由.html)|[路由demo2](https://wscats.github.io/vue-demo/路由2.html)||\n| **Directive** |**指令**||\n|[指令demo](https://wscats.github.io/vue-demo/指令.html)|[自定义指令demo](https://wscats.github.io/vue-demo/自定义指令.html)|[滑动手势demo](https://wscats.github.io/vue-demo/滑动手势指令.html)|\n| **Filter** |**过滤器**||\n|[过滤器demo](https://wscats.github.io/vue-demo/过滤器.html)|[过滤器实现分页demo](https://wscats.github.io/vue-demo/vue使用过滤器实现分页.html)|[过滤器读写数据](https://wscats.github.io/vue-demo/vue过滤器读写数据.html)|\n| **Transition** |**过渡**||\n|[过渡demo](https://wscats.github.io/vue-demo/过渡.html)|[过渡demo2](https://wscats.github.io/vue-demo/过渡2.html)||\n| **Form** |**表单**||\n|[获取表单值](https://wscats.github.io/vue-demo/vue获取表单值.html)|||\n| **Computed** |**计算**||\n|[计算属性](https://wscats.github.io/vue-demo/vue计算属性.html)|||\n| Component |组件||\n|[组件demo](https://wscats.github.io/vue-demo/组件.html)|||\n| **Reference** | **Reference** | **Reference** |\n|[Vue官网](http://cn.vuejs.org)|[Vue论坛](http://forum.vuejs.org)|[Awesome-vue](https://github.com/vuejs/awesome-vue)|\n\n\n## Node\n| Node | Article |\n| --------- | --------- |\n|[node技巧](https://github.com/Wscats/Good-text-Share/issues/44)|[NodeJs静态服务器](https://github.com/Wscats/angular-demo/tree/gh-pages/diyNodeServer)|\n| **Reference** | **Reference** |\n|[Node.js 包教不包会](https://github.com/alsotang/node-lessons)|[七天学会NodeJS](http://nqdeng.github.io/7-days-nodejs/)|\n|[从零开始nodejs系列文章](http://blog.fens.me/series-nodejs)|[Node入门](http://www.nodebeginner.org/index-zh-cn.html)|\n|[Node初学者入门，一本全面的NodeJS教程](http://ourjs.com/detail/529ca5950cb6498814000005)||\n\n## Gulp \n| Gulp | Article |\n| --------- | --------- |\n|[Gulp Demo](https://github.com/Wscats/glup)||\n| **Gulp** | **Reference** |\n|[Gulp官网](http://gulpjs.com)|[Gulp中文网](http://www.gulpjs.com.cn)|\n|[Gulp资料收集](https://github.com/Platform-CUF/use-gulp)|[Gulp：任务自动管理工具 - ruanyifeng](http://javascript.ruanyifeng.com/tool/gulp.html)|\n|[Gulp插件](http://gulpjs.com/plugins])|[Gulp不完全入门教程](http://www.ido321.com/1622.html)|\n|[Gulp 入门指南](https://github.com/nimojs/gulp-book)||\n\n## 其他\n| Other | Article |\n| --------- | --------- |\n|[关于Pornographic website的一些前端分析](https://github.com/Wscats/node-demo/issues/4)|[微信公众号开发](https://github.com/Wscats/Good-text-Share/issues/50)|\n|[Atom技巧总结](https://github.com/Wscats/Good-text-Share/issues/30)|[Mac小技巧](https://github.com/Wscats/Good-text-Share/issues/46)|\n|[CSDN页面内JS跳转脚本](https://github.com/Wscats/Good-text-Share/issues/9)|[CSDN博客隐藏配置](https://github.com/Wscats/Good-text-Share/issues/8)|\n|[百度设置小度机器人出现](https://github.com/Wscats/Good-text-Share/issues/7)|[前端冷知识，妙用浏览器地址栏](https://github.com/Wscats/Good-text-Share/issues/2)|\n|[Vim笔记](https://github.com/Wscats/Good-text-Share/issues/27)|[Cordova配置&&Ionic配置（WebApp混合开发环境）](https://github.com/Wscats/Good-text-Share/issues/48)|\n|[IE8及以下按钮超链接无法跳转的问题](https://github.com/Wscats/Good-text-Share/issues/33)||\n\n## 分享功能\n| Share | Reference |\n| --------- | --------- |\n|[百度分享(PC)](http://share.baidu.com)|[JiaThis(PC)](http://jiathis.com)|\n|[社会化分享组件(Mobile)](http://developer.baidu.com/soc/share)|[ShareSDK轻松实现社会化功能(Mobile)](http://www.mob.com)|\n|[友盟分享(Mobile)](http://dev.umeng.com/social/android/quick-integration)||\n\n## 在线演示\n| Reference | Reference |\n| --------- | --------- |\n|[js 在线编辑 - runjs](http://runjs.cn)|[js 在线编辑 - jsbin](http://jsbin.com)|\n|[js 在线编辑 - codepen](http://codepen.io)|[js 在线编辑 - jsfiddle](http://jsfiddle.net)|\n|[java 在线编辑 - runjs](http://ideone.com)|[js 在线编辑 - hcharts](http://code.hcharts.cn)|\n|[js 在线编辑 - jsdm](http://jsdm.com)|[sql 在线编辑 - sqlfiddle](http://sqlfiddle.com)|\n|[mozilla 在线编辑器](https://thimble.mozilla.org)||\n\n## 富文本编辑器\n| Reference | Reference |\n| --------- | --------- |\n|[百度ueditor](http://ueditor.baidu.com/website)|[ckeditor](http://ckeditor.com)|\n|[tinymce](https://www.tinymce.com)|[kindeditor](http://kindeditor.net)|\n|[wysiwyg](http://www.bootcss.com/p/bootstrap-wysiwyg)|[BachEditor](http://integ.github.io/BachEditor)|\n|[simditor](https://github.com/mycolorway/simditor)|[summernote](https://github.com/summernote/summernote)|\n|[Squire](http://neilj.github.io/Squire)|[wangEditor](https://github.com/wangfupeng1988/wangEditor)|\n\n## Chrome\n| Reference | Reference |\n| --------- | --------- |\n|[Chrome - 基础](http://www.cnblogs.com/constantince/p/4565261.html)|[Chrome - 进阶](http://www.cnblogs.com/constantince/p/4579121.html)|\n|[Chrome - 性能](http://www.cnblogs.com/constantince/p/4585983.html)|[Chrome - 性能进阶](http://www.cnblogs.com/constantince/p/4607497.html)|\n|[Chrome - 移动](http://www.cnblogs.com/constantince/p/4624241.html)|[Chrome - 使用技巧](http://www.cnblogs.com/liyunhua/p/4544738.html)|\n|[Chrome - Console控制台不完全指南](http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html)|[chrome开发工具快捷键](http://anti-code.com/devtools-cheatsheet)|\n|[Chrome 开发工具 Workspace 使用](http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace)|[Chrome神器Vimium快捷键学习记录](http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html)|\n|[Sass调试-w3cplus](http://www.w3cplus.com/sassguide/debug.html)|[如何更专业的使用Chrome开发者工具-w3cplus](http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html)|\n|[Chrome调试canvas](http://sentsin.com/web/253.html)|[神器——Chrome开发者工具(一)](https://segmentfault.com/a/1190000000683599)|\n|[奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍](https://xinranliu.me/2015-05-22-qiqu-performance)|[Chrome 开发者工具的 15 个小技巧](http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html)|\n|[Chrome开发者工具不完全指南](http://1ke.co/course/361)|[Chrome 开发者工具使用技巧](http://segmentfault.com/a/1190000003882567)|\n\n## 性能优化\n| Reference | Reference |\n| --------- | --------- |\n|[Javascript高性能动画与页面渲染](http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering)|[移动H5前端性能优化指南](http://isux.tencent.com/h5-performance.html)|\n|[给网页设计师和前端开发者看的前端性能优化](http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers)|[张鑫旭——前端性能](http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/)|\n|[web前端性能优化进阶路](http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html)|[Hey——前端性能](http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD)|\n|[YSLOW中文介绍](http://www.cnblogs.com/yslow)|[Yahoo!团队实践分享：网站性能](http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml)|\n|[加载，不只是少一点点](http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml)|[由12306谈谈网站前端性能和后端性能优化](http://coolshell.cn/articles/6470.html)|\n|[【高性能前端1】高性能HTML](http://www.alloyteam.com/2012/10/high-performance-html)|[【高性能前端2】高性能CSS](http://www.alloyteam.com/2012/10/high-performance-css)|\n|[前端工程与性能优化（上）：静态资源版本更新与缓存](http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1)|[前端工程与性能优化（下）：静态资源管理与模板框架](http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2)|\n|[HTTPS连接的前几毫秒发生了什么](http://blog.jobbole.com/48369)|[Yslow](http://uicss.cn/yslow/#more-12319)|\n|[阿里无线前端性能优化指南(Pt.1 加载期优化)](https://github.com/amfe/article/issues/1)|[毫秒必争，前端网页性能最佳实践](http://www.cnblogs.com/developersupport/p/3248695.html)|\n\n## CDN\n| Reference | Reference |\n| --------- | --------- |\n|[Jquery&Bootstrap中文网开源项目免费 CDN 服务](http://www.bootcdn.cn/jquery)|[Bootstrap中文网开源项目免费 CDN 服务](http://www.bootcdn.cn)|\n|[新浪CDN](http://lib.sinaapp.com)|[百度静态资源公共库](http://cdn.code.baidu.com)|\n|[开放静态文件 CDN - 七牛](http://staticfile.org)|[CDN加速 - jq22](http://www.jq22.com/cdn)|\n|[微软CDN](http://www.asp.net/ajax/cdn)|[Angular CDN](https://code.angularjs.org/1.5.8/)|\n|[360网站卫士常用前端公共库CDN服务](http://libs.useso.com)||\n\n## Git\n| Article | Article |\n| --------- | --------- |\n|[Git操作](https://github.com/Wscats/Good-text-Share/issues/20)|[Git CSDN Blog](http://blog.csdn.net/qq_27080247/article/details/49942991)|\n| **Reference** | **Reference** |\n|[Git-scm](http://git-scm.com)|[Git-for-windows](https://git-for-windows.github.io)|\n|[廖雪峰-Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)|[Gogithub](http://www.worldhello.net/gotgithub/index.html)|\n|[Git常规命令练习](http://pcottle.github.io/learnGitBranching)|[Git的资料整理](https://github.com/xirong/my-git)|\n|[我所记录的git命令（非常实用）](http://www.cnblogs.com/fanfan259/p/4810517.html)|[GitHub 漫游指南](https://github.com/phodal/github-roam)|\n|[GitHub秘籍](https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md)|[动画方式练习git](http://onlywei.github.io/explain-git-with-d3)|\n\n## Sass&Less\n| Article | Article |\n| --------- | --------- |\n|[Less教程](https://github.com/Wscats/less-demo/issues/1)||\n| **Reference** | **Reference** |\n|[Sass](http://www.w3cplus.com/sassguide)|[Sass中文文档](http://sass.bootcss.com)|\n|[Less](http://less.bootcss.com)||\n\n## Markdown\n| Reference | Reference |\n| --------- | --------- |\n|[Markdown 语法说明 (简体中文版)](http://wowubuntu.com/markdown)|[Markdown入门参考](https://github.com/LearnShare/Learning-Markdown/blob/master/README.md)|\n|[Mdeditor(一款国内的在线markdown编辑器)](https://www.zybuluo.com/mdeditor)|[Stackedit(国外的在线markdown编辑器，功能强大，同步云盘)](https://stackedit.io)|\n|[Mditor一款轻量级的markdown编辑器](http://bh-lay.github.io/mditor)|[lepture-editor](https://github.com/lepture/editor)|\n|[Markdown-editor](https://github.com/jbt/markdown-editor)||\n\n## 前端文档\n| Reference | Reference |\n| --------- | --------- |\n|[前端知识结构](https://github.com/JacksonTian/fks)|[Web前端开发大系概览](https://github.com/unruledboy/WebFrontEndStack)|\n|[免费的编程中文书籍索](https://github.com/justjavac/free-programming-books-zh_CN)|[前端书籍](https://github.com/dypsilon/frontend-dev-bookmarks)|\n|[前端免费书籍大全](https://github.com/vhf/free-programming-books)|[重新介绍JavaScript（JS教程）](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript)|\n|[Gitbook](https://www.gitbook.com 国外的在线markdown可编辑成书)|[Front-End-Develop-Guide 前端开发指南](https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide)|\n|[前端开发笔记本](https://li-xinyang.gitbooks.io/frontend-notebook/content)|[大前端工具集](https://github.com/nieweidong/fetool)|\n|[前端开发者手册](https://dwqs.gitbooks.io/frontenddevhandbook/content)|[结合个人经历总结的前端入门方法](https://github.com/qiu-deqing/FE-learning)|\n|[2016最新前端学习计划](http://blog.csdn.net/qq_25827845/article/details/53079094)|\n\n## 前端规范\n| Reference | Reference |\n| --------- | --------- |\n|[通过分析github代码库总结出来的工程师代码书写习惯](http://alloyteam.github.io/CodeGuide/)|[HTML&CSS编码规范 by @mdo](http://codeguide.bootcss.com)|\n|[前端编码规范之js - by yuwenhui](http://yuwenhui.github.io)|[前端编码规范之js - by 李靖](http://www.cnblogs.com/hustskyking/p/javascript-spec.html)|\n|[Airbnb JavaScript 编码规范（简体中文版）](https://github.com/yuche/javascript#table-of-contents)|[AMD与CMD规范的区别](http://www.zhihu.com/question/20351507)|\n|[AMD与CMD规范的区别](http://www.cnblogs.com/tugenhua0707/p/3507957.html)|[KISSY 源码规范](http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html)|\n|[前端代码规范及最佳实践](http://blog.jobbole.com/79075)|[百度前端规范](http://coderlmn.github.io/code-standards)|\n|[JavaScript风格指南/编码规范（Airbnb公司版）](http://blog.jobbole.com/79484)|[网易前端开发规范](http://nec.netease.com/standard)|\n|[前端规范资源列表](https://github.com/ecomfe/spec)|[Web 前端开发规范文档](http://codecloud.net/5622.html)|\n\n## 前端面试\n| Reference | Reference |\n| --------- | --------- |\n|[2016校招内推 -- 阿里巴巴前端 -- 四面面试经历](http://www.cnblogs.com/imwtr/p/4685546.html)|[那几个月在找工作（百度，网易游戏，华为）](https://www.nowcoder.com/discuss/3196)|\n|[前端开发面试题](https://segmentfault.com/a/1190000000465431)|[Front-end-Interview-questions](https://github.com/hawx1993/Front-end-Interview-questions)|\n|[5个经典的前端面试问题](http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E)|[Front-end-Developer-Interview-Questions](https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese)|\n|[BAT及各大互联网公司2014前端笔试面试题：JavaScript篇](http://blog.jobbole.com/78738/)|[前端开发面试题大收集](https://github.com/paddingme/Front-end-Web-Development-Interview-Question)|\n|[收集的前端面试题和答案](https://github.com/qiu-deqing/FE-interview)|[前端开发面试题](https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md)|\n|[前端面试大全](https://segmentfault.com/a/1190000005947094)|[关于前端面试](https://mdluo.github.io/blog/about-front-end-interview/)|\n\n## 前端网站\n| Reference | Reference |\n| --------- | --------- |\n|[掘金](https://gold.xitu.io/)|[百度FEX](http://fex.baidu.com/)|\n|[阿里UED](http://www.aliued.com/)|[菜鸟教程](http://www.runoob.com/)|\n|[QDFuns](http://www.qdfuns.com/portal.php)|[幕课网](http://www.imooc.com/)|\n|[Codepen](http://codepen.io/)|[Sentsin](http://sentsin.com/daohang/)|\n|[CTOLib](http://www.ctolib.com/javascript/)|[CTOLib/Node](http://www.ctolib.com/nodejs/)|\n\n## JS练习\n| Reference | Reference |\n| --------- | --------- |\n|[Codewars](https://www.codewars.com/)|[Javascript-puzzlers](http://javascript-puzzlers.herokuapp.com/)|\n|[Freecodecamp中文版](https://freecodecamp.cn/)|[ES6katas](http://es6katas.org/)|\n|[Now Coder牛客网](https://www.nowcoder.com/ta/js-assessment)|[Leetcode](https://leetcode.com/)|\n|[Nodeschool](https://nodeschool.io/)|[Hackerrank](https://www.hackerrank.com/)|\n\n## 算法\n| Reference | Reference |\n| --------- | --------- |\n|[数据结构与算法 JavaScript 描述. 章节练习](https://github.com/Ralph-Wang/algorithm.in.js)|[常见排序算法（JS版）](https://github.com/twobin/twobinSort)|\n|[经典排序](https://github.com/luofei2011/jsAgm/blob/master/js/sort.js)|[常见排序算法-js版本](https://github.com/hechangmin/jssort)|\n\n## ES\n| Reference | Reference |\n| --------- | --------- |\n|[Exploring-ES6翻译](http://es6-org.github.io/exploring-es6/)|[阮一峰 ES6](http://es6.ruanyifeng.com)|\n|[ECMA-262，第 5 版](http://yanhaijing.com/es5)|[ES5](http://es5.github.io)|\n\n***\n> 本文引用自：https://github.com/GuoXingGitHub/Front-end-tutorial","slug":"技术/2018-03-10-最全的前端资源教程","published":1,"updated":"2018-03-12T07:54:41.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjeo8cj5v00325oq8khkod7kw","content":"<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/57\" target=\"_blank\" rel=\"noopener\">Javascript深浅拷贝</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/56\" target=\"_blank\" rel=\"noopener\">Javascript中的apply和call继承</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/55\" target=\"_blank\" rel=\"noopener\">Javascript的jsonp原理</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/49\" target=\"_blank\" rel=\"noopener\">Javascript监听触摸事件</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/52\" target=\"_blank\" rel=\"noopener\">Javascript中的var self = this</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/32\" target=\"_blank\" rel=\"noopener\">Javascript面向对象编程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/14\" target=\"_blank\" rel=\"noopener\">Javascript滑屏切换场景</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/16\" target=\"_blank\" rel=\"noopener\">Javascript获取经纬度，关于调用百度API的问题</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/3\" target=\"_blank\" rel=\"noopener\">妙用Javascript运算符</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/1\" target=\"_blank\" rel=\"noopener\">深入理解Javascript函数编程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/4\" target=\"_blank\" rel=\"noopener\">Javascript的setTimeout详细用例</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/42\" target=\"_blank\" rel=\"noopener\">sessionstorage，localstorage和cookie</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/11\" target=\"_blank\" rel=\"noopener\">JS日期对比</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/10\" target=\"_blank\" rel=\"noopener\">JSONP参考文章</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/createElement.html\" target=\"_blank\" rel=\"noopener\">Javascript的createElement</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/createDocumentFragment.html\" target=\"_blank\" rel=\"noopener\">Javascript的createDocumentFragment</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/sessionStoragelocalStorage.html\" target=\"_blank\" rel=\"noopener\">sessionStorage和localStorage</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/像素动画.html\" target=\"_blank\" rel=\"noopener\">像素帧动画</a></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/windiest/Front-end-tutorial\" target=\"_blank\" rel=\"noopener\">收集最全前端学习资料</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share\" target=\"_blank\" rel=\"noopener\">最全前端教程-猫的回忆录</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000002640298\" target=\"_blank\" rel=\"noopener\">JavaScript中的this陷阱的最全收集–没有之一</a></td>\n<td><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html\" target=\"_blank\" rel=\"noopener\">JS函数式编程指南</a></td>\n</tr>\n<tr>\n<td><a href=\"http://liubin.github.io/promises-book\" target=\"_blank\" rel=\"noopener\">JavaScript Promise迷你书（中文版）</a></td>\n<td><a href=\"http://javascript.ruanyifeng.com\" target=\"_blank\" rel=\"noopener\">阮一峰 Javascript</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.awesomes.cn/rank\" target=\"_blank\" rel=\"noopener\">前端 TOP 100</a></td>\n<td><a href=\"http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000\" target=\"_blank\" rel=\"noopener\">小白的零基础JavaScript全栈教程</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"UI\"><a href=\"#UI\" class=\"headerlink\" title=\"UI\"></a>UI</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/weui/weui\" target=\"_blank\" rel=\"noopener\">WeUI</a></td>\n<td><a href=\"http://www.bootcss.com\" target=\"_blank\" rel=\"noopener\">Bootstrap</a></td>\n</tr>\n<tr>\n<td><a href=\"http://dev.dcloud.net.cn/mui/\" target=\"_blank\" rel=\"noopener\">MUI-最接近原生APP体验的高性能前端框架</a></td>\n<td><a href=\"http://amazeui.org\" target=\"_blank\" rel=\"noopener\">Amaze UI中国首个开源HTML5跨屏前端框架</a></td>\n</tr>\n<tr>\n<td><a href=\"http://frozenui.github.io/\" target=\"_blank\" rel=\"noopener\">Frozen UI</a></td>\n<td><a href=\"http://foundation.zurb.com/\" target=\"_blank\" rel=\"noopener\">Foundation</a></td>\n</tr>\n<tr>\n<td><a href=\"http://sui.taobao.org/sui/docs/\" target=\"_blank\" rel=\"noopener\">SUI</a></td>\n<td><a href=\"https://github.com/easysoft/zui\" target=\"_blank\" rel=\"noopener\">ZUI</a></td>\n</tr>\n<tr>\n<td><a href=\"http://m.sui.taobao.org\" target=\"_blank\" rel=\"noopener\">淘宝HTML5前端框架</a></td>\n<td><a href=\"http://docs.kissyui.com\" target=\"_blank\" rel=\"noopener\">KISSY - 阿里前端JavaScript库</a></td>\n</tr>\n<tr>\n<td><a href=\"http://nej.netease.com\" target=\"_blank\" rel=\"noopener\">网易Nej - Nice Easy Javascript</a></td>\n<td><a href=\"http://demos.telerik.com/kendo-ui/mvvm/index\" target=\"_blank\" rel=\"noopener\">Kendo UI MVVM Demo</a></td>\n</tr>\n<tr>\n<td><a href=\"http://smartui.chinamzz.com\" target=\"_blank\" rel=\"noopener\">Smart UI</a></td>\n<td><a href=\"http://developer.yahoo.com/yui/grids\" target=\"_blank\" rel=\"noopener\">雅虎UI - CSS UI</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/41\" target=\"_blank\" rel=\"noopener\">CSS Flex布局</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/38\" target=\"_blank\" rel=\"noopener\">移动前端开发CSS3</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/43\" target=\"_blank\" rel=\"noopener\">响应式布局 媒体查询</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/34\" target=\"_blank\" rel=\"noopener\">CSS图片响应式布局</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/stylesheets/styles.less\" target=\"_blank\" rel=\"noopener\">lessDemo的less文件</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://tympanus.net/codrops/css_reference\" target=\"_blank\" rel=\"noopener\">CSS 语法参考</a></td>\n<td><a href=\"http://isux.tencent.com/css3/index.html\" target=\"_blank\" rel=\"noopener\">CSS3动画手册</a></td>\n</tr>\n<tr>\n<td><a href=\"http://isux.tencent.com/css3/tools.html\" target=\"_blank\" rel=\"noopener\">腾讯css3动画制作工具</a></td>\n<td><a href=\"http://daneden.github.io/animate.css\" target=\"_blank\" rel=\"noopener\">animate.css</a></td>\n</tr>\n<tr>\n<td><a href=\"http://tympanus.net/Development/AnimatedBooks/\" target=\"_blank\" rel=\"noopener\">Animated Books with CSS 3D Transforms</a></td>\n<td><a href=\"http://browserhacks.com/\" target=\"_blank\" rel=\"noopener\">Browserhacks</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"http://www.zhihu.com/question/24398907\" target=\"_blank\" rel=\"noopener\">HTML5有哪些让你惊艳的demo</a>|<a href=\"http://www.wallpaperbetter.com/\" target=\"_blank\" rel=\"noopener\">Wallpaperbetter</a>|</p>\n<h2 id=\"Angular\"><a href=\"#Angular\" class=\"headerlink\" title=\"Angular\"></a>Angular</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th>Angular文档</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/26\" target=\"_blank\" rel=\"noopener\">Angular源码解读publishExternalAPI函数</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/25\" target=\"_blank\" rel=\"noopener\">Angular源码解读setupModuleLoader函数</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/35\" target=\"_blank\" rel=\"noopener\">Angular的ng-style用法</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/29\" target=\"_blank\" rel=\"noopener\">Angular判断在那个浏览器下打开的服务</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/28\" target=\"_blank\" rel=\"noopener\">Angular文字折叠展开组件的原理分析</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/21\" target=\"_blank\" rel=\"noopener\">Angular服务Request异步请求的详细分析</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/24\" target=\"_blank\" rel=\"noopener\">Angular自定义service服务详解</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/22\" target=\"_blank\" rel=\"noopener\">Angular自定义判断上一页是否存在的服务</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/19\" target=\"_blank\" rel=\"noopener\">Angular操作cookies方法</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/18\" target=\"_blank\" rel=\"noopener\">Angular打印错误的minErr函数</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/17\" target=\"_blank\" rel=\"noopener\">Angular的fromJson与toJson方法</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/12\" target=\"_blank\" rel=\"noopener\">Angular用ng-repeat生成表单并绑定ng-click时的一个细节</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/6\" target=\"_blank\" rel=\"noopener\">Angular的run方法巧妙运用</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/5\" target=\"_blank\" rel=\"noopener\">Angular处理Html转义问题</a></td>\n</tr>\n<tr>\n<td><a href=\"ng-repeat绑定事件和嵌套\">ng-repeat绑定事件和嵌套</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/4\" target=\"_blank\" rel=\"noopener\">Angular的post请求后台接受不了数据的解决方法</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/19\" target=\"_blank\" rel=\"noopener\">ionic总结</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/17\" target=\"_blank\" rel=\"noopener\">ui-route和ng-route</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/15\" target=\"_blank\" rel=\"noopener\">ng-options&amp;&amp;ng-switch</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/14\" target=\"_blank\" rel=\"noopener\">directive组件作用域</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/13\" target=\"_blank\" rel=\"noopener\">表单认证</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/11\" target=\"_blank\" rel=\"noopener\">$broadcast,$emit and $on</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/9\" target=\"_blank\" rel=\"noopener\">自定义过滤器</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/8\" target=\"_blank\" rel=\"noopener\">自定义手势指令ng-touch</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/7\" target=\"_blank\" rel=\"noopener\">ng-animate</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/3\" target=\"_blank\" rel=\"noopener\">单页面应用的技术点</a></td>\n</tr>\n<tr>\n<td><strong>Guess you like</strong></td>\n<td><strong>AppDemo</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html\" target=\"_blank\" rel=\"noopener\">Angular商城Demo</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/CNode/index.html\" target=\"_blank\" rel=\"noopener\">Angular的Cnode社区</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/Stovepipe/index.html\" target=\"_blank\" rel=\"noopener\">AngularStovepipe</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/TT/index.html\" target=\"_blank\" rel=\"noopener\">Angular的新闻客户端</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html\" target=\"_blank\" rel=\"noopener\">Angular商城Demo</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/CNode/index.html\" target=\"_blank\" rel=\"noopener\">Angular的Cnode社区</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/inline-editor/index.html\" target=\"_blank\" rel=\"noopener\">Angular内联编辑器</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/instant-search/index.html\" target=\"_blank\" rel=\"noopener\">Angular即时搜索</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/navigation-menu/index.html\" target=\"_blank\" rel=\"noopener\">Angular导航菜单</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/order-form/index.html\" target=\"_blank\" rel=\"noopener\">Angular订单表单</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/switchable-grid/index.html\" target=\"_blank\" rel=\"noopener\">Angular切换网格</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/news/index.html\" target=\"_blank\" rel=\"noopener\">Angular新闻＋WEUI DEMO</a> <a href=\"https://github.com/Wscats/angular-demo/tree/gh-pages/spa/NodeServerAndApi-Weui-News\" target=\"_blank\" rel=\"noopener\">源码</a></td>\n</tr>\n<tr>\n<td><strong>Controller</strong></td>\n<td><strong>控制器</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/view/student.html\" target=\"_blank\" rel=\"noopener\">Angular控制器demo</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>SPA DEMO</strong></td>\n<td><strong>单页面应用</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/weui每日笑话.html\" target=\"_blank\" rel=\"noopener\">Angular+Weui单页面应用DEMO-每日笑话</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Service</strong></td>\n<td><strong>服务</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/blob/gh-pages/%E5%B8%B8%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95.md\" target=\"_blank\" rel=\"noopener\">Angular自定义服务的常用方法</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/部分服务demo.html\" target=\"_blank\" rel=\"noopener\">Angular部分服务demo</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/Angular自定义Canvas画图服务.html\" target=\"_blank\" rel=\"noopener\">Angular自定义Canvas画图服务</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/自定义http服务.html\" target=\"_blank\" rel=\"noopener\">Angular自定义http服务 面向对象封装</a></td>\n</tr>\n<tr>\n<td><strong>Directive</strong></td>\n<td><strong>组件与指令</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/自定义手势事件.html\" target=\"_blank\" rel=\"noopener\">Angular自定义手势指令</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/自定义directive轮播图.html\" target=\"_blank\" rel=\"noopener\">Angular自定义轮播图组件</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/下拉刷新.html\" target=\"_blank\" rel=\"noopener\">Angular自定义下拉刷新组件1</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/Angular自定义下拉刷新组件.html\" target=\"_blank\" rel=\"noopener\">Angular自定义下拉刷新组件2</a></td>\n</tr>\n<tr>\n<td><strong>Router</strong></td>\n<td><strong>路由</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/UI路由嵌套DEMO.html\" target=\"_blank\" rel=\"noopener\">Angular路由嵌套</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/uiRoute/index.html\" target=\"_blank\" rel=\"noopener\">Angular路由单页多个ui-view</a></td>\n</tr>\n<tr>\n<td><strong>Filter</strong></td>\n<td><strong>过滤器</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angular自带过滤器.html\" target=\"_blank\" rel=\"noopener\">Angular自带过滤器</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/自定义关键词检索过滤器.html\" target=\"_blank\" rel=\"noopener\">Angular自定义关键词检索过滤器</a></td>\n</tr>\n<tr>\n<td><strong>Animate</strong></td>\n<td><strong>动画</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ng-animate动画.html\" target=\"_blank\" rel=\"noopener\">Angular ng-animate动画1</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/ng-animate动画2.html\" target=\"_blank\" rel=\"noopener\">Angular ng-animate动画2</a></td>\n</tr>\n<tr>\n<td><strong>Other</strong></td>\n<td><strong>其他</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/iframesdemo.html\" target=\"_blank\" rel=\"noopener\">Angular中使用iframe</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8.html\" target=\"_blank\" rel=\"noopener\">Angular三级联动(1)</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ngSwitch.html\" target=\"_blank\" rel=\"noopener\">Angular中使用ng-switch</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/百度地图定位DEMO.html\" target=\"_blank\" rel=\"noopener\">百度定位DEMO</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/三级联动改进.html\" target=\"_blank\" rel=\"noopener\">Angular三级联动(2)</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/事件监听.html\" target=\"_blank\" rel=\"noopener\">Angular事件监听</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/jquery模拟ng-repeat.html\" target=\"_blank\" rel=\"noopener\">jQuery模拟ng-repeat</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/lessDemo.html\" target=\"_blank\" rel=\"noopener\">lessDemo</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ngCookie.html\" target=\"_blank\" rel=\"noopener\">Angular自定义cookie服务和ngCookie的使用</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/图灵机器人.html\" target=\"_blank\" rel=\"noopener\">图灵机器人</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angular模块化.html\" target=\"_blank\" rel=\"noopener\">Angular利用angular.module()实现模块化</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/form表单验证.html\" target=\"_blank\" rel=\"noopener\">Angular的form表单验证</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ng-repeat嵌套.html\" target=\"_blank\" rel=\"noopener\">Angular的ng-repeat嵌套</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/angular模块化2.html\" target=\"_blank\" rel=\"noopener\">Angular利用angular.module()实现模块化2</a></td>\n</tr>\n<tr>\n<td><strong>PHP</strong></td>\n<td><strong>PHP</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/53\" target=\"_blank\" rel=\"noopener\">PHP CURL请求的小细节</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000000443795\" target=\"_blank\" rel=\"noopener\">最流行的PHP 代码规范</a></td>\n<td><a href=\"https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md\" target=\"_blank\" rel=\"noopener\">最流行的PHP 代码规范</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.aijc.net/AngularLearning/\" target=\"_blank\" rel=\"noopener\">Angular.js的一些学习资源</a></td>\n<td><a href=\"http://angularjs.cn\" target=\"_blank\" rel=\"noopener\">Angularjs中文社区</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/angular-ui\" target=\"_blank\" rel=\"noopener\">一些扩展Angular UI组件</a></td>\n<td><a href=\"http://mgcrea.github.io/angular-strap\" target=\"_blank\" rel=\"noopener\">Angular UI</a></td>\n</tr>\n<tr>\n<td><a href=\"http://each.sinaapp.com/angular\" target=\"_blank\" rel=\"noopener\">AngularJS在线教程</a></td>\n<td><a href=\"http://www.zouyesheng.com/angular.html\" target=\"_blank\" rel=\"noopener\">Angular学习笔记</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><table>\n<thead>\n<tr>\n<th>React</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.runoob.com/react/react-tutorial.html\" target=\"_blank\" rel=\"noopener\">React教程 菜鸟教程</a></td>\n<td><a href=\"http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu\" target=\"_blank\" rel=\"noopener\">React Router 使用教程</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wiki.jikexueyuan.com/project/react/\" target=\"_blank\" rel=\"noopener\">React开发中文手册-极客学院</a></td>\n<td><a href=\"http://www.hubwiz.com/course/552762019964049d1872fc88/\" target=\"_blank\" rel=\"noopener\">React教程-汇智网</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.phperz.com/article/15/0712/140537.html#\" target=\"_blank\" rel=\"noopener\">React.js快速开始</a></td>\n<td><a href=\"http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/\" target=\"_blank\" rel=\"noopener\">Reactjs 2016最佳实践</a></td>\n</tr>\n<tr>\n<td><a href=\"https://hulufei.gitbooks.io/react-tutorial/content/introduction.html\" target=\"_blank\" rel=\"noopener\">React 入门教程</a></td>\n<td><a href=\"http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam\" target=\"_blank\" rel=\"noopener\">汇智网 React教程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000002767365\" target=\"_blank\" rel=\"noopener\">轻松入门React和Webpack</a></td>\n<td><a href=\"http://nav.react-china.org/#docs\" target=\"_blank\" rel=\"noopener\">React中文索引</a></td>\n</tr>\n<tr>\n<td><a href=\"http://cn.redux.js.org/\" target=\"_blank\" rel=\"noopener\">Redux 中文文档</a></td>\n<td><a href=\"https://github.com/react-guide/react-router-cn\" target=\"_blank\" rel=\"noopener\">React Router官方文档中文翻译</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/kunyashaw/p/5619256.html\" target=\"_blank\" rel=\"noopener\">React入门教程</a></td>\n<td><a href=\"http://www.ibm.com/developerworks/cn/web/1509_dongyue_react/index.html\" target=\"_blank\" rel=\"noopener\">React介绍及实践教程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://facebook.github.io/react/index.html\" target=\"_blank\" rel=\"noopener\">React.js 官方网址</a></td>\n<td><a href=\"https://facebook.github.io/react/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">React.js 官方文档</a></td>\n</tr>\n<tr>\n<td><a href=\"http://material-ui.com/#\" target=\"_blank\" rel=\"noopener\">React.js material UI</a></td>\n<td><a href=\"http://touchstonejs.io\" target=\"_blank\" rel=\"noopener\">React.js TouchstoneJS UI</a></td>\n</tr>\n<tr>\n<td><a href=\"http://amazeui.org/react\" target=\"_blank\" rel=\"noopener\">React.js amazeui UI</a></td>\n<td><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\" target=\"_blank\" rel=\"noopener\">React 入门实例教程 - 阮一峰</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wiki.jikexueyuan.com/project/react-native\" target=\"_blank\" rel=\"noopener\">React Native 中文版</a></td>\n<td><a href=\"https://fakefish.github.io/react-webpack-cookbook\" target=\"_blank\" rel=\"noopener\">Webpack 和 React 小书 - gitbook</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><table>\n<thead>\n<tr>\n<th>Vue</th>\n<th>AppDemo</th>\n<th>Demo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/news/index.html\" target=\"_blank\" rel=\"noopener\">NewsDemo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/vue计算属性.html\" target=\"_blank\" rel=\"noopener\">vue计算属性</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/vue生命周期.html\" target=\"_blank\" rel=\"noopener\">vue生命周期</a></td>\n</tr>\n<tr>\n<td><strong>Article</strong></td>\n<td><strong>Vue文档</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/2\" target=\"_blank\" rel=\"noopener\">Vue-cli脚手架</a></td>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/3\" target=\"_blank\" rel=\"noopener\">Vue组件</a></td>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/8\" target=\"_blank\" rel=\"noopener\">vue自定义指令</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/9\" target=\"_blank\" rel=\"noopener\">Vue过渡动画</a></td>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/7\" target=\"_blank\" rel=\"noopener\">Vue指令</a></td>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/6\" target=\"_blank\" rel=\"noopener\">Vue api文档</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/5\" target=\"_blank\" rel=\"noopener\">Vue执行ajax请求</a></td>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/4\" target=\"_blank\" rel=\"noopener\">vue实现类似angular服务的方法</a></td>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/10\" target=\"_blank\" rel=\"noopener\">Vue源码参考文档</a></td>\n</tr>\n<tr>\n<td><strong>Router</strong></td>\n<td><strong>路由</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/路由.html\" target=\"_blank\" rel=\"noopener\">路由demo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/路由2.html\" target=\"_blank\" rel=\"noopener\">路由demo2</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Directive</strong></td>\n<td><strong>指令</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/指令.html\" target=\"_blank\" rel=\"noopener\">指令demo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/自定义指令.html\" target=\"_blank\" rel=\"noopener\">自定义指令demo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/滑动手势指令.html\" target=\"_blank\" rel=\"noopener\">滑动手势demo</a></td>\n</tr>\n<tr>\n<td><strong>Filter</strong></td>\n<td><strong>过滤器</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/过滤器.html\" target=\"_blank\" rel=\"noopener\">过滤器demo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/vue使用过滤器实现分页.html\" target=\"_blank\" rel=\"noopener\">过滤器实现分页demo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/vue过滤器读写数据.html\" target=\"_blank\" rel=\"noopener\">过滤器读写数据</a></td>\n</tr>\n<tr>\n<td><strong>Transition</strong></td>\n<td><strong>过渡</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/过渡.html\" target=\"_blank\" rel=\"noopener\">过渡demo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/过渡2.html\" target=\"_blank\" rel=\"noopener\">过渡demo2</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Form</strong></td>\n<td><strong>表单</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/vue获取表单值.html\" target=\"_blank\" rel=\"noopener\">获取表单值</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Computed</strong></td>\n<td><strong>计算</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/vue计算属性.html\" target=\"_blank\" rel=\"noopener\">计算属性</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Component</td>\n<td>组件</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/组件.html\" target=\"_blank\" rel=\"noopener\">组件demo</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://cn.vuejs.org\" target=\"_blank\" rel=\"noopener\">Vue官网</a></td>\n<td><a href=\"http://forum.vuejs.org\" target=\"_blank\" rel=\"noopener\">Vue论坛</a></td>\n<td><a href=\"https://github.com/vuejs/awesome-vue\" target=\"_blank\" rel=\"noopener\">Awesome-vue</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h2><table>\n<thead>\n<tr>\n<th>Node</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/44\" target=\"_blank\" rel=\"noopener\">node技巧</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/tree/gh-pages/diyNodeServer\" target=\"_blank\" rel=\"noopener\">NodeJs静态服务器</a></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/alsotang/node-lessons\" target=\"_blank\" rel=\"noopener\">Node.js 包教不包会</a></td>\n<td><a href=\"http://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"noopener\">七天学会NodeJS</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.fens.me/series-nodejs\" target=\"_blank\" rel=\"noopener\">从零开始nodejs系列文章</a></td>\n<td><a href=\"http://www.nodebeginner.org/index-zh-cn.html\" target=\"_blank\" rel=\"noopener\">Node入门</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ourjs.com/detail/529ca5950cb6498814000005\" target=\"_blank\" rel=\"noopener\">Node初学者入门，一本全面的NodeJS教程</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h2><table>\n<thead>\n<tr>\n<th>Gulp</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/glup\" target=\"_blank\" rel=\"noopener\">Gulp Demo</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Gulp</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://gulpjs.com\" target=\"_blank\" rel=\"noopener\">Gulp官网</a></td>\n<td><a href=\"http://www.gulpjs.com.cn\" target=\"_blank\" rel=\"noopener\">Gulp中文网</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Platform-CUF/use-gulp\" target=\"_blank\" rel=\"noopener\">Gulp资料收集</a></td>\n<td><a href=\"http://javascript.ruanyifeng.com/tool/gulp.html\" target=\"_blank\" rel=\"noopener\">Gulp：任务自动管理工具 - ruanyifeng</a></td>\n</tr>\n<tr>\n<td><a href=\"http://gulpjs.com/plugins]\" target=\"_blank\" rel=\"noopener\">Gulp插件</a></td>\n<td><a href=\"http://www.ido321.com/1622.html\" target=\"_blank\" rel=\"noopener\">Gulp不完全入门教程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/nimojs/gulp-book\" target=\"_blank\" rel=\"noopener\">Gulp 入门指南</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><table>\n<thead>\n<tr>\n<th>Other</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/node-demo/issues/4\" target=\"_blank\" rel=\"noopener\">关于Pornographic website的一些前端分析</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/50\" target=\"_blank\" rel=\"noopener\">微信公众号开发</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/30\" target=\"_blank\" rel=\"noopener\">Atom技巧总结</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/46\" target=\"_blank\" rel=\"noopener\">Mac小技巧</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/9\" target=\"_blank\" rel=\"noopener\">CSDN页面内JS跳转脚本</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/8\" target=\"_blank\" rel=\"noopener\">CSDN博客隐藏配置</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/7\" target=\"_blank\" rel=\"noopener\">百度设置小度机器人出现</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/2\" target=\"_blank\" rel=\"noopener\">前端冷知识，妙用浏览器地址栏</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/27\" target=\"_blank\" rel=\"noopener\">Vim笔记</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/48\" target=\"_blank\" rel=\"noopener\">Cordova配置&amp;&amp;Ionic配置（WebApp混合开发环境）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/33\" target=\"_blank\" rel=\"noopener\">IE8及以下按钮超链接无法跳转的问题</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"分享功能\"><a href=\"#分享功能\" class=\"headerlink\" title=\"分享功能\"></a>分享功能</h2><table>\n<thead>\n<tr>\n<th>Share</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://share.baidu.com\" target=\"_blank\" rel=\"noopener\">百度分享(PC)</a></td>\n<td><a href=\"http://jiathis.com\" target=\"_blank\" rel=\"noopener\">JiaThis(PC)</a></td>\n</tr>\n<tr>\n<td><a href=\"http://developer.baidu.com/soc/share\" target=\"_blank\" rel=\"noopener\">社会化分享组件(Mobile)</a></td>\n<td><a href=\"http://www.mob.com\" target=\"_blank\" rel=\"noopener\">ShareSDK轻松实现社会化功能(Mobile)</a></td>\n</tr>\n<tr>\n<td><a href=\"http://dev.umeng.com/social/android/quick-integration\" target=\"_blank\" rel=\"noopener\">友盟分享(Mobile)</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"在线演示\"><a href=\"#在线演示\" class=\"headerlink\" title=\"在线演示\"></a>在线演示</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://runjs.cn\" target=\"_blank\" rel=\"noopener\">js 在线编辑 - runjs</a></td>\n<td><a href=\"http://jsbin.com\" target=\"_blank\" rel=\"noopener\">js 在线编辑 - jsbin</a></td>\n</tr>\n<tr>\n<td><a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">js 在线编辑 - codepen</a></td>\n<td><a href=\"http://jsfiddle.net\" target=\"_blank\" rel=\"noopener\">js 在线编辑 - jsfiddle</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ideone.com\" target=\"_blank\" rel=\"noopener\">java 在线编辑 - runjs</a></td>\n<td><a href=\"http://code.hcharts.cn\" target=\"_blank\" rel=\"noopener\">js 在线编辑 - hcharts</a></td>\n</tr>\n<tr>\n<td><a href=\"http://jsdm.com\" target=\"_blank\" rel=\"noopener\">js 在线编辑 - jsdm</a></td>\n<td><a href=\"http://sqlfiddle.com\" target=\"_blank\" rel=\"noopener\">sql 在线编辑 - sqlfiddle</a></td>\n</tr>\n<tr>\n<td><a href=\"https://thimble.mozilla.org\" target=\"_blank\" rel=\"noopener\">mozilla 在线编辑器</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"富文本编辑器\"><a href=\"#富文本编辑器\" class=\"headerlink\" title=\"富文本编辑器\"></a>富文本编辑器</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://ueditor.baidu.com/website\" target=\"_blank\" rel=\"noopener\">百度ueditor</a></td>\n<td><a href=\"http://ckeditor.com\" target=\"_blank\" rel=\"noopener\">ckeditor</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.tinymce.com\" target=\"_blank\" rel=\"noopener\">tinymce</a></td>\n<td><a href=\"http://kindeditor.net\" target=\"_blank\" rel=\"noopener\">kindeditor</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.bootcss.com/p/bootstrap-wysiwyg\" target=\"_blank\" rel=\"noopener\">wysiwyg</a></td>\n<td><a href=\"http://integ.github.io/BachEditor\" target=\"_blank\" rel=\"noopener\">BachEditor</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/mycolorway/simditor\" target=\"_blank\" rel=\"noopener\">simditor</a></td>\n<td><a href=\"https://github.com/summernote/summernote\" target=\"_blank\" rel=\"noopener\">summernote</a></td>\n</tr>\n<tr>\n<td><a href=\"http://neilj.github.io/Squire\" target=\"_blank\" rel=\"noopener\">Squire</a></td>\n<td><a href=\"https://github.com/wangfupeng1988/wangEditor\" target=\"_blank\" rel=\"noopener\">wangEditor</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4565261.html\" target=\"_blank\" rel=\"noopener\">Chrome - 基础</a></td>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4579121.html\" target=\"_blank\" rel=\"noopener\">Chrome - 进阶</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4585983.html\" target=\"_blank\" rel=\"noopener\">Chrome - 性能</a></td>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4607497.html\" target=\"_blank\" rel=\"noopener\">Chrome - 性能进阶</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4624241.html\" target=\"_blank\" rel=\"noopener\">Chrome - 移动</a></td>\n<td><a href=\"http://www.cnblogs.com/liyunhua/p/4544738.html\" target=\"_blank\" rel=\"noopener\">Chrome - 使用技巧</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html\" target=\"_blank\" rel=\"noopener\">Chrome - Console控制台不完全指南</a></td>\n<td><a href=\"http://anti-code.com/devtools-cheatsheet\" target=\"_blank\" rel=\"noopener\">chrome开发工具快捷键</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace\" target=\"_blank\" rel=\"noopener\">Chrome 开发工具 Workspace 使用</a></td>\n<td><a href=\"http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html\" target=\"_blank\" rel=\"noopener\">Chrome神器Vimium快捷键学习记录</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.w3cplus.com/sassguide/debug.html\" target=\"_blank\" rel=\"noopener\">Sass调试-w3cplus</a></td>\n<td><a href=\"http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html\" target=\"_blank\" rel=\"noopener\">如何更专业的使用Chrome开发者工具-w3cplus</a></td>\n</tr>\n<tr>\n<td><a href=\"http://sentsin.com/web/253.html\" target=\"_blank\" rel=\"noopener\">Chrome调试canvas</a></td>\n<td><a href=\"https://segmentfault.com/a/1190000000683599\" target=\"_blank\" rel=\"noopener\">神器——Chrome开发者工具(一)</a></td>\n</tr>\n<tr>\n<td><a href=\"https://xinranliu.me/2015-05-22-qiqu-performance\" target=\"_blank\" rel=\"noopener\">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍</a></td>\n<td><a href=\"http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html\" target=\"_blank\" rel=\"noopener\">Chrome 开发者工具的 15 个小技巧</a></td>\n</tr>\n<tr>\n<td><a href=\"http://1ke.co/course/361\" target=\"_blank\" rel=\"noopener\">Chrome开发者工具不完全指南</a></td>\n<td><a href=\"http://segmentfault.com/a/1190000003882567\" target=\"_blank\" rel=\"noopener\">Chrome 开发者工具使用技巧</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering\" target=\"_blank\" rel=\"noopener\">Javascript高性能动画与页面渲染</a></td>\n<td><a href=\"http://isux.tencent.com/h5-performance.html\" target=\"_blank\" rel=\"noopener\">移动H5前端性能优化指南</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers\" target=\"_blank\" rel=\"noopener\">给网页设计师和前端开发者看的前端性能优化</a></td>\n<td><a href=\"http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/\" target=\"_blank\" rel=\"noopener\">张鑫旭——前端性能</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html\" target=\"_blank\" rel=\"noopener\">web前端性能优化进阶路</a></td>\n<td><a href=\"http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD\" target=\"_blank\" rel=\"noopener\">Hey——前端性能</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/yslow\" target=\"_blank\" rel=\"noopener\">YSLOW中文介绍</a></td>\n<td><a href=\"http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml\" target=\"_blank\" rel=\"noopener\">Yahoo!团队实践分享：网站性能</a></td>\n</tr>\n<tr>\n<td><a href=\"http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml\" target=\"_blank\" rel=\"noopener\">加载，不只是少一点点</a></td>\n<td><a href=\"http://coolshell.cn/articles/6470.html\" target=\"_blank\" rel=\"noopener\">由12306谈谈网站前端性能和后端性能优化</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.alloyteam.com/2012/10/high-performance-html\" target=\"_blank\" rel=\"noopener\">【高性能前端1】高性能HTML</a></td>\n<td><a href=\"http://www.alloyteam.com/2012/10/high-performance-css\" target=\"_blank\" rel=\"noopener\">【高性能前端2】高性能CSS</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1\" target=\"_blank\" rel=\"noopener\">前端工程与性能优化（上）：静态资源版本更新与缓存</a></td>\n<td><a href=\"http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2\" target=\"_blank\" rel=\"noopener\">前端工程与性能优化（下）：静态资源管理与模板框架</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/48369\" target=\"_blank\" rel=\"noopener\">HTTPS连接的前几毫秒发生了什么</a></td>\n<td><a href=\"http://uicss.cn/yslow/#more-12319\" target=\"_blank\" rel=\"noopener\">Yslow</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/amfe/article/issues/1\" target=\"_blank\" rel=\"noopener\">阿里无线前端性能优化指南(Pt.1 加载期优化)</a></td>\n<td><a href=\"http://www.cnblogs.com/developersupport/p/3248695.html\" target=\"_blank\" rel=\"noopener\">毫秒必争，前端网页性能最佳实践</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.bootcdn.cn/jquery\" target=\"_blank\" rel=\"noopener\">Jquery&amp;Bootstrap中文网开源项目免费 CDN 服务</a></td>\n<td><a href=\"http://www.bootcdn.cn\" target=\"_blank\" rel=\"noopener\">Bootstrap中文网开源项目免费 CDN 服务</a></td>\n</tr>\n<tr>\n<td><a href=\"http://lib.sinaapp.com\" target=\"_blank\" rel=\"noopener\">新浪CDN</a></td>\n<td><a href=\"http://cdn.code.baidu.com\" target=\"_blank\" rel=\"noopener\">百度静态资源公共库</a></td>\n</tr>\n<tr>\n<td><a href=\"http://staticfile.org\" target=\"_blank\" rel=\"noopener\">开放静态文件 CDN - 七牛</a></td>\n<td><a href=\"http://www.jq22.com/cdn\" target=\"_blank\" rel=\"noopener\">CDN加速 - jq22</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.asp.net/ajax/cdn\" target=\"_blank\" rel=\"noopener\">微软CDN</a></td>\n<td><a href=\"https://code.angularjs.org/1.5.8/\" target=\"_blank\" rel=\"noopener\">Angular CDN</a></td>\n</tr>\n<tr>\n<td><a href=\"http://libs.useso.com\" target=\"_blank\" rel=\"noopener\">360网站卫士常用前端公共库CDN服务</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/20\" target=\"_blank\" rel=\"noopener\">Git操作</a></td>\n<td><a href=\"http://blog.csdn.net/qq_27080247/article/details/49942991\" target=\"_blank\" rel=\"noopener\">Git CSDN Blog</a></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://git-scm.com\" target=\"_blank\" rel=\"noopener\">Git-scm</a></td>\n<td><a href=\"https://git-for-windows.github.io\" target=\"_blank\" rel=\"noopener\">Git-for-windows</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰-Git教程</a></td>\n<td><a href=\"http://www.worldhello.net/gotgithub/index.html\" target=\"_blank\" rel=\"noopener\">Gogithub</a></td>\n</tr>\n<tr>\n<td><a href=\"http://pcottle.github.io/learnGitBranching\" target=\"_blank\" rel=\"noopener\">Git常规命令练习</a></td>\n<td><a href=\"https://github.com/xirong/my-git\" target=\"_blank\" rel=\"noopener\">Git的资料整理</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/fanfan259/p/4810517.html\" target=\"_blank\" rel=\"noopener\">我所记录的git命令（非常实用）</a></td>\n<td><a href=\"https://github.com/phodal/github-roam\" target=\"_blank\" rel=\"noopener\">GitHub 漫游指南</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md\" target=\"_blank\" rel=\"noopener\">GitHub秘籍</a></td>\n<td><a href=\"http://onlywei.github.io/explain-git-with-d3\" target=\"_blank\" rel=\"noopener\">动画方式练习git</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Sass-amp-Less\"><a href=\"#Sass-amp-Less\" class=\"headerlink\" title=\"Sass&amp;Less\"></a>Sass&amp;Less</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/less-demo/issues/1\" target=\"_blank\" rel=\"noopener\">Less教程</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://www.w3cplus.com/sassguide\" target=\"_blank\" rel=\"noopener\">Sass</a></td>\n<td><a href=\"http://sass.bootcss.com\" target=\"_blank\" rel=\"noopener\">Sass中文文档</a></td>\n</tr>\n<tr>\n<td><a href=\"http://less.bootcss.com\" target=\"_blank\" rel=\"noopener\">Less</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://wowubuntu.com/markdown\" target=\"_blank\" rel=\"noopener\">Markdown 语法说明 (简体中文版)</a></td>\n<td><a href=\"https://github.com/LearnShare/Learning-Markdown/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">Markdown入门参考</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">Mdeditor(一款国内的在线markdown编辑器)</a></td>\n<td><a href=\"https://stackedit.io\" target=\"_blank\" rel=\"noopener\">Stackedit(国外的在线markdown编辑器，功能强大，同步云盘)</a></td>\n</tr>\n<tr>\n<td><a href=\"http://bh-lay.github.io/mditor\" target=\"_blank\" rel=\"noopener\">Mditor一款轻量级的markdown编辑器</a></td>\n<td><a href=\"https://github.com/lepture/editor\" target=\"_blank\" rel=\"noopener\">lepture-editor</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jbt/markdown-editor\" target=\"_blank\" rel=\"noopener\">Markdown-editor</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端文档\"><a href=\"#前端文档\" class=\"headerlink\" title=\"前端文档\"></a>前端文档</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/JacksonTian/fks\" target=\"_blank\" rel=\"noopener\">前端知识结构</a></td>\n<td><a href=\"https://github.com/unruledboy/WebFrontEndStack\" target=\"_blank\" rel=\"noopener\">Web前端开发大系概览</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/justjavac/free-programming-books-zh_CN\" target=\"_blank\" rel=\"noopener\">免费的编程中文书籍索</a></td>\n<td><a href=\"https://github.com/dypsilon/frontend-dev-bookmarks\" target=\"_blank\" rel=\"noopener\">前端书籍</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/vhf/free-programming-books\" target=\"_blank\" rel=\"noopener\">前端免费书籍大全</a></td>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"noopener\">重新介绍JavaScript（JS教程）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.gitbook.com 国外的在线markdown可编辑成书\" target=\"_blank\" rel=\"noopener\">Gitbook</a></td>\n<td><a href=\"https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide\" target=\"_blank\" rel=\"noopener\">Front-End-Develop-Guide 前端开发指南</a></td>\n</tr>\n<tr>\n<td><a href=\"https://li-xinyang.gitbooks.io/frontend-notebook/content\" target=\"_blank\" rel=\"noopener\">前端开发笔记本</a></td>\n<td><a href=\"https://github.com/nieweidong/fetool\" target=\"_blank\" rel=\"noopener\">大前端工具集</a></td>\n</tr>\n<tr>\n<td><a href=\"https://dwqs.gitbooks.io/frontenddevhandbook/content\" target=\"_blank\" rel=\"noopener\">前端开发者手册</a></td>\n<td><a href=\"https://github.com/qiu-deqing/FE-learning\" target=\"_blank\" rel=\"noopener\">结合个人经历总结的前端入门方法</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.csdn.net/qq_25827845/article/details/53079094\" target=\"_blank\" rel=\"noopener\">2016最新前端学习计划</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端规范\"><a href=\"#前端规范\" class=\"headerlink\" title=\"前端规范\"></a>前端规范</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://alloyteam.github.io/CodeGuide/\" target=\"_blank\" rel=\"noopener\">通过分析github代码库总结出来的工程师代码书写习惯</a></td>\n<td><a href=\"http://codeguide.bootcss.com\" target=\"_blank\" rel=\"noopener\">HTML&amp;CSS编码规范 by @mdo</a></td>\n</tr>\n<tr>\n<td><a href=\"http://yuwenhui.github.io\" target=\"_blank\" rel=\"noopener\">前端编码规范之js - by yuwenhui</a></td>\n<td><a href=\"http://www.cnblogs.com/hustskyking/p/javascript-spec.html\" target=\"_blank\" rel=\"noopener\">前端编码规范之js - by 李靖</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/yuche/javascript#table-of-contents\" target=\"_blank\" rel=\"noopener\">Airbnb JavaScript 编码规范（简体中文版）</a></td>\n<td><a href=\"http://www.zhihu.com/question/20351507\" target=\"_blank\" rel=\"noopener\">AMD与CMD规范的区别</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/tugenhua0707/p/3507957.html\" target=\"_blank\" rel=\"noopener\">AMD与CMD规范的区别</a></td>\n<td><a href=\"http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html\" target=\"_blank\" rel=\"noopener\">KISSY 源码规范</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/79075\" target=\"_blank\" rel=\"noopener\">前端代码规范及最佳实践</a></td>\n<td><a href=\"http://coderlmn.github.io/code-standards\" target=\"_blank\" rel=\"noopener\">百度前端规范</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/79484\" target=\"_blank\" rel=\"noopener\">JavaScript风格指南/编码规范（Airbnb公司版）</a></td>\n<td><a href=\"http://nec.netease.com/standard\" target=\"_blank\" rel=\"noopener\">网易前端开发规范</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ecomfe/spec\" target=\"_blank\" rel=\"noopener\">前端规范资源列表</a></td>\n<td><a href=\"http://codecloud.net/5622.html\" target=\"_blank\" rel=\"noopener\">Web 前端开发规范文档</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端面试\"><a href=\"#前端面试\" class=\"headerlink\" title=\"前端面试\"></a>前端面试</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.cnblogs.com/imwtr/p/4685546.html\" target=\"_blank\" rel=\"noopener\">2016校招内推 – 阿里巴巴前端 – 四面面试经历</a></td>\n<td><a href=\"https://www.nowcoder.com/discuss/3196\" target=\"_blank\" rel=\"noopener\">那几个月在找工作（百度，网易游戏，华为）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000000465431\" target=\"_blank\" rel=\"noopener\">前端开发面试题</a></td>\n<td><a href=\"https://github.com/hawx1993/Front-end-Interview-questions\" target=\"_blank\" rel=\"noopener\">Front-end-Interview-questions</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E\" target=\"_blank\" rel=\"noopener\">5个经典的前端面试问题</a></td>\n<td><a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese\" target=\"_blank\" rel=\"noopener\">Front-end-Developer-Interview-Questions</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/78738/\" target=\"_blank\" rel=\"noopener\">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</a></td>\n<td><a href=\"https://github.com/paddingme/Front-end-Web-Development-Interview-Question\" target=\"_blank\" rel=\"noopener\">前端开发面试题大收集</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/qiu-deqing/FE-interview\" target=\"_blank\" rel=\"noopener\">收集的前端面试题和答案</a></td>\n<td><a href=\"https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md\" target=\"_blank\" rel=\"noopener\">前端开发面试题</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000005947094\" target=\"_blank\" rel=\"noopener\">前端面试大全</a></td>\n<td><a href=\"https://mdluo.github.io/blog/about-front-end-interview/\" target=\"_blank\" rel=\"noopener\">关于前端面试</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端网站\"><a href=\"#前端网站\" class=\"headerlink\" title=\"前端网站\"></a>前端网站</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://gold.xitu.io/\" target=\"_blank\" rel=\"noopener\">掘金</a></td>\n<td><a href=\"http://fex.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度FEX</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.aliued.com/\" target=\"_blank\" rel=\"noopener\">阿里UED</a></td>\n<td><a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.qdfuns.com/portal.php\" target=\"_blank\" rel=\"noopener\">QDFuns</a></td>\n<td><a href=\"http://www.imooc.com/\" target=\"_blank\" rel=\"noopener\">幕课网</a></td>\n</tr>\n<tr>\n<td><a href=\"http://codepen.io/\" target=\"_blank\" rel=\"noopener\">Codepen</a></td>\n<td><a href=\"http://sentsin.com/daohang/\" target=\"_blank\" rel=\"noopener\">Sentsin</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.ctolib.com/javascript/\" target=\"_blank\" rel=\"noopener\">CTOLib</a></td>\n<td><a href=\"http://www.ctolib.com/nodejs/\" target=\"_blank\" rel=\"noopener\">CTOLib/Node</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"JS练习\"><a href=\"#JS练习\" class=\"headerlink\" title=\"JS练习\"></a>JS练习</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://www.codewars.com/\" target=\"_blank\" rel=\"noopener\">Codewars</a></td>\n<td><a href=\"http://javascript-puzzlers.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">Javascript-puzzlers</a></td>\n</tr>\n<tr>\n<td><a href=\"https://freecodecamp.cn/\" target=\"_blank\" rel=\"noopener\">Freecodecamp中文版</a></td>\n<td><a href=\"http://es6katas.org/\" target=\"_blank\" rel=\"noopener\">ES6katas</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.nowcoder.com/ta/js-assessment\" target=\"_blank\" rel=\"noopener\">Now Coder牛客网</a></td>\n<td><a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"noopener\">Leetcode</a></td>\n</tr>\n<tr>\n<td><a href=\"https://nodeschool.io/\" target=\"_blank\" rel=\"noopener\">Nodeschool</a></td>\n<td><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener\">Hackerrank</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Ralph-Wang/algorithm.in.js\" target=\"_blank\" rel=\"noopener\">数据结构与算法 JavaScript 描述. 章节练习</a></td>\n<td><a href=\"https://github.com/twobin/twobinSort\" target=\"_blank\" rel=\"noopener\">常见排序算法（JS版）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/luofei2011/jsAgm/blob/master/js/sort.js\" target=\"_blank\" rel=\"noopener\">经典排序</a></td>\n<td><a href=\"https://github.com/hechangmin/jssort\" target=\"_blank\" rel=\"noopener\">常见排序算法-js版本</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ES\"><a href=\"#ES\" class=\"headerlink\" title=\"ES\"></a>ES</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://es6-org.github.io/exploring-es6/\" target=\"_blank\" rel=\"noopener\">Exploring-ES6翻译</a></td>\n<td><a href=\"http://es6.ruanyifeng.com\" target=\"_blank\" rel=\"noopener\">阮一峰 ES6</a></td>\n</tr>\n<tr>\n<td><a href=\"http://yanhaijing.com/es5\" target=\"_blank\" rel=\"noopener\">ECMA-262，第 5 版</a></td>\n<td><a href=\"http://es5.github.io\" target=\"_blank\" rel=\"noopener\">ES5</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<blockquote>\n<p>本文引用自：<a href=\"https://github.com/GuoXingGitHub/Front-end-tutorial\" target=\"_blank\" rel=\"noopener\">https://github.com/GuoXingGitHub/Front-end-tutorial</a></p>\n</blockquote>\n","site":{"data":{"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"w3school":{"link":"http://www.w3school.com.cn/","avatar":"/images/favatar/w3school.jpg","desc":"领先的 Web 技术教程 - 全部免费"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/json.cn.jpg","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/57\" target=\"_blank\" rel=\"noopener\">Javascript深浅拷贝</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/56\" target=\"_blank\" rel=\"noopener\">Javascript中的apply和call继承</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/55\" target=\"_blank\" rel=\"noopener\">Javascript的jsonp原理</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/49\" target=\"_blank\" rel=\"noopener\">Javascript监听触摸事件</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/52\" target=\"_blank\" rel=\"noopener\">Javascript中的var self = this</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/32\" target=\"_blank\" rel=\"noopener\">Javascript面向对象编程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/14\" target=\"_blank\" rel=\"noopener\">Javascript滑屏切换场景</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/16\" target=\"_blank\" rel=\"noopener\">Javascript获取经纬度，关于调用百度API的问题</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/3\" target=\"_blank\" rel=\"noopener\">妙用Javascript运算符</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/1\" target=\"_blank\" rel=\"noopener\">深入理解Javascript函数编程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/4\" target=\"_blank\" rel=\"noopener\">Javascript的setTimeout详细用例</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/42\" target=\"_blank\" rel=\"noopener\">sessionstorage，localstorage和cookie</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/11\" target=\"_blank\" rel=\"noopener\">JS日期对比</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/10\" target=\"_blank\" rel=\"noopener\">JSONP参考文章</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/createElement.html\" target=\"_blank\" rel=\"noopener\">Javascript的createElement</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/createDocumentFragment.html\" target=\"_blank\" rel=\"noopener\">Javascript的createDocumentFragment</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/sessionStoragelocalStorage.html\" target=\"_blank\" rel=\"noopener\">sessionStorage和localStorage</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/像素动画.html\" target=\"_blank\" rel=\"noopener\">像素帧动画</a></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/windiest/Front-end-tutorial\" target=\"_blank\" rel=\"noopener\">收集最全前端学习资料</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share\" target=\"_blank\" rel=\"noopener\">最全前端教程-猫的回忆录</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000002640298\" target=\"_blank\" rel=\"noopener\">JavaScript中的this陷阱的最全收集–没有之一</a></td>\n<td><a href=\"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html\" target=\"_blank\" rel=\"noopener\">JS函数式编程指南</a></td>\n</tr>\n<tr>\n<td><a href=\"http://liubin.github.io/promises-book\" target=\"_blank\" rel=\"noopener\">JavaScript Promise迷你书（中文版）</a></td>\n<td><a href=\"http://javascript.ruanyifeng.com\" target=\"_blank\" rel=\"noopener\">阮一峰 Javascript</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.awesomes.cn/rank\" target=\"_blank\" rel=\"noopener\">前端 TOP 100</a></td>\n<td><a href=\"http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000\" target=\"_blank\" rel=\"noopener\">小白的零基础JavaScript全栈教程</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"UI\"><a href=\"#UI\" class=\"headerlink\" title=\"UI\"></a>UI</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/weui/weui\" target=\"_blank\" rel=\"noopener\">WeUI</a></td>\n<td><a href=\"http://www.bootcss.com\" target=\"_blank\" rel=\"noopener\">Bootstrap</a></td>\n</tr>\n<tr>\n<td><a href=\"http://dev.dcloud.net.cn/mui/\" target=\"_blank\" rel=\"noopener\">MUI-最接近原生APP体验的高性能前端框架</a></td>\n<td><a href=\"http://amazeui.org\" target=\"_blank\" rel=\"noopener\">Amaze UI中国首个开源HTML5跨屏前端框架</a></td>\n</tr>\n<tr>\n<td><a href=\"http://frozenui.github.io/\" target=\"_blank\" rel=\"noopener\">Frozen UI</a></td>\n<td><a href=\"http://foundation.zurb.com/\" target=\"_blank\" rel=\"noopener\">Foundation</a></td>\n</tr>\n<tr>\n<td><a href=\"http://sui.taobao.org/sui/docs/\" target=\"_blank\" rel=\"noopener\">SUI</a></td>\n<td><a href=\"https://github.com/easysoft/zui\" target=\"_blank\" rel=\"noopener\">ZUI</a></td>\n</tr>\n<tr>\n<td><a href=\"http://m.sui.taobao.org\" target=\"_blank\" rel=\"noopener\">淘宝HTML5前端框架</a></td>\n<td><a href=\"http://docs.kissyui.com\" target=\"_blank\" rel=\"noopener\">KISSY - 阿里前端JavaScript库</a></td>\n</tr>\n<tr>\n<td><a href=\"http://nej.netease.com\" target=\"_blank\" rel=\"noopener\">网易Nej - Nice Easy Javascript</a></td>\n<td><a href=\"http://demos.telerik.com/kendo-ui/mvvm/index\" target=\"_blank\" rel=\"noopener\">Kendo UI MVVM Demo</a></td>\n</tr>\n<tr>\n<td><a href=\"http://smartui.chinamzz.com\" target=\"_blank\" rel=\"noopener\">Smart UI</a></td>\n<td><a href=\"http://developer.yahoo.com/yui/grids\" target=\"_blank\" rel=\"noopener\">雅虎UI - CSS UI</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/41\" target=\"_blank\" rel=\"noopener\">CSS Flex布局</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/38\" target=\"_blank\" rel=\"noopener\">移动前端开发CSS3</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/43\" target=\"_blank\" rel=\"noopener\">响应式布局 媒体查询</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/34\" target=\"_blank\" rel=\"noopener\">CSS图片响应式布局</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/stylesheets/styles.less\" target=\"_blank\" rel=\"noopener\">lessDemo的less文件</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://tympanus.net/codrops/css_reference\" target=\"_blank\" rel=\"noopener\">CSS 语法参考</a></td>\n<td><a href=\"http://isux.tencent.com/css3/index.html\" target=\"_blank\" rel=\"noopener\">CSS3动画手册</a></td>\n</tr>\n<tr>\n<td><a href=\"http://isux.tencent.com/css3/tools.html\" target=\"_blank\" rel=\"noopener\">腾讯css3动画制作工具</a></td>\n<td><a href=\"http://daneden.github.io/animate.css\" target=\"_blank\" rel=\"noopener\">animate.css</a></td>\n</tr>\n<tr>\n<td><a href=\"http://tympanus.net/Development/AnimatedBooks/\" target=\"_blank\" rel=\"noopener\">Animated Books with CSS 3D Transforms</a></td>\n<td><a href=\"http://browserhacks.com/\" target=\"_blank\" rel=\"noopener\">Browserhacks</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"http://www.zhihu.com/question/24398907\" target=\"_blank\" rel=\"noopener\">HTML5有哪些让你惊艳的demo</a>|<a href=\"http://www.wallpaperbetter.com/\" target=\"_blank\" rel=\"noopener\">Wallpaperbetter</a>|</p>\n<h2 id=\"Angular\"><a href=\"#Angular\" class=\"headerlink\" title=\"Angular\"></a>Angular</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th>Angular文档</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/26\" target=\"_blank\" rel=\"noopener\">Angular源码解读publishExternalAPI函数</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/25\" target=\"_blank\" rel=\"noopener\">Angular源码解读setupModuleLoader函数</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/35\" target=\"_blank\" rel=\"noopener\">Angular的ng-style用法</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/29\" target=\"_blank\" rel=\"noopener\">Angular判断在那个浏览器下打开的服务</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/28\" target=\"_blank\" rel=\"noopener\">Angular文字折叠展开组件的原理分析</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/21\" target=\"_blank\" rel=\"noopener\">Angular服务Request异步请求的详细分析</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/24\" target=\"_blank\" rel=\"noopener\">Angular自定义service服务详解</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/22\" target=\"_blank\" rel=\"noopener\">Angular自定义判断上一页是否存在的服务</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/19\" target=\"_blank\" rel=\"noopener\">Angular操作cookies方法</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/18\" target=\"_blank\" rel=\"noopener\">Angular打印错误的minErr函数</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/17\" target=\"_blank\" rel=\"noopener\">Angular的fromJson与toJson方法</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/12\" target=\"_blank\" rel=\"noopener\">Angular用ng-repeat生成表单并绑定ng-click时的一个细节</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/6\" target=\"_blank\" rel=\"noopener\">Angular的run方法巧妙运用</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/5\" target=\"_blank\" rel=\"noopener\">Angular处理Html转义问题</a></td>\n</tr>\n<tr>\n<td><a href=\"ng-repeat绑定事件和嵌套\">ng-repeat绑定事件和嵌套</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/4\" target=\"_blank\" rel=\"noopener\">Angular的post请求后台接受不了数据的解决方法</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/19\" target=\"_blank\" rel=\"noopener\">ionic总结</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/17\" target=\"_blank\" rel=\"noopener\">ui-route和ng-route</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/15\" target=\"_blank\" rel=\"noopener\">ng-options&amp;&amp;ng-switch</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/14\" target=\"_blank\" rel=\"noopener\">directive组件作用域</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/13\" target=\"_blank\" rel=\"noopener\">表单认证</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/11\" target=\"_blank\" rel=\"noopener\">$broadcast,$emit and $on</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/9\" target=\"_blank\" rel=\"noopener\">自定义过滤器</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/8\" target=\"_blank\" rel=\"noopener\">自定义手势指令ng-touch</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/7\" target=\"_blank\" rel=\"noopener\">ng-animate</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/issues/3\" target=\"_blank\" rel=\"noopener\">单页面应用的技术点</a></td>\n</tr>\n<tr>\n<td><strong>Guess you like</strong></td>\n<td><strong>AppDemo</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html\" target=\"_blank\" rel=\"noopener\">Angular商城Demo</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/CNode/index.html\" target=\"_blank\" rel=\"noopener\">Angular的Cnode社区</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/Stovepipe/index.html\" target=\"_blank\" rel=\"noopener\">AngularStovepipe</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/TT/index.html\" target=\"_blank\" rel=\"noopener\">Angular的新闻客户端</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html\" target=\"_blank\" rel=\"noopener\">Angular商城Demo</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/CNode/index.html\" target=\"_blank\" rel=\"noopener\">Angular的Cnode社区</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/inline-editor/index.html\" target=\"_blank\" rel=\"noopener\">Angular内联编辑器</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/instant-search/index.html\" target=\"_blank\" rel=\"noopener\">Angular即时搜索</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/navigation-menu/index.html\" target=\"_blank\" rel=\"noopener\">Angular导航菜单</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/order-form/index.html\" target=\"_blank\" rel=\"noopener\">Angular订单表单</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angularjs5examples/switchable-grid/index.html\" target=\"_blank\" rel=\"noopener\">Angular切换网格</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/spa/news/index.html\" target=\"_blank\" rel=\"noopener\">Angular新闻＋WEUI DEMO</a> <a href=\"https://github.com/Wscats/angular-demo/tree/gh-pages/spa/NodeServerAndApi-Weui-News\" target=\"_blank\" rel=\"noopener\">源码</a></td>\n</tr>\n<tr>\n<td><strong>Controller</strong></td>\n<td><strong>控制器</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/view/student.html\" target=\"_blank\" rel=\"noopener\">Angular控制器demo</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>SPA DEMO</strong></td>\n<td><strong>单页面应用</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/weui每日笑话.html\" target=\"_blank\" rel=\"noopener\">Angular+Weui单页面应用DEMO-每日笑话</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Service</strong></td>\n<td><strong>服务</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/angular-demo/blob/gh-pages/%E5%B8%B8%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95.md\" target=\"_blank\" rel=\"noopener\">Angular自定义服务的常用方法</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/部分服务demo.html\" target=\"_blank\" rel=\"noopener\">Angular部分服务demo</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/Angular自定义Canvas画图服务.html\" target=\"_blank\" rel=\"noopener\">Angular自定义Canvas画图服务</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/自定义http服务.html\" target=\"_blank\" rel=\"noopener\">Angular自定义http服务 面向对象封装</a></td>\n</tr>\n<tr>\n<td><strong>Directive</strong></td>\n<td><strong>组件与指令</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/自定义手势事件.html\" target=\"_blank\" rel=\"noopener\">Angular自定义手势指令</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/自定义directive轮播图.html\" target=\"_blank\" rel=\"noopener\">Angular自定义轮播图组件</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/下拉刷新.html\" target=\"_blank\" rel=\"noopener\">Angular自定义下拉刷新组件1</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/Angular自定义下拉刷新组件.html\" target=\"_blank\" rel=\"noopener\">Angular自定义下拉刷新组件2</a></td>\n</tr>\n<tr>\n<td><strong>Router</strong></td>\n<td><strong>路由</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/UI路由嵌套DEMO.html\" target=\"_blank\" rel=\"noopener\">Angular路由嵌套</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/uiRoute/index.html\" target=\"_blank\" rel=\"noopener\">Angular路由单页多个ui-view</a></td>\n</tr>\n<tr>\n<td><strong>Filter</strong></td>\n<td><strong>过滤器</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angular自带过滤器.html\" target=\"_blank\" rel=\"noopener\">Angular自带过滤器</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/自定义关键词检索过滤器.html\" target=\"_blank\" rel=\"noopener\">Angular自定义关键词检索过滤器</a></td>\n</tr>\n<tr>\n<td><strong>Animate</strong></td>\n<td><strong>动画</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ng-animate动画.html\" target=\"_blank\" rel=\"noopener\">Angular ng-animate动画1</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/ng-animate动画2.html\" target=\"_blank\" rel=\"noopener\">Angular ng-animate动画2</a></td>\n</tr>\n<tr>\n<td><strong>Other</strong></td>\n<td><strong>其他</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/iframesdemo.html\" target=\"_blank\" rel=\"noopener\">Angular中使用iframe</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8.html\" target=\"_blank\" rel=\"noopener\">Angular三级联动(1)</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ngSwitch.html\" target=\"_blank\" rel=\"noopener\">Angular中使用ng-switch</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/百度地图定位DEMO.html\" target=\"_blank\" rel=\"noopener\">百度定位DEMO</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/三级联动改进.html\" target=\"_blank\" rel=\"noopener\">Angular三级联动(2)</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/事件监听.html\" target=\"_blank\" rel=\"noopener\">Angular事件监听</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/jquery模拟ng-repeat.html\" target=\"_blank\" rel=\"noopener\">jQuery模拟ng-repeat</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/lessDemo.html\" target=\"_blank\" rel=\"noopener\">lessDemo</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ngCookie.html\" target=\"_blank\" rel=\"noopener\">Angular自定义cookie服务和ngCookie的使用</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/图灵机器人.html\" target=\"_blank\" rel=\"noopener\">图灵机器人</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/angular模块化.html\" target=\"_blank\" rel=\"noopener\">Angular利用angular.module()实现模块化</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/form表单验证.html\" target=\"_blank\" rel=\"noopener\">Angular的form表单验证</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/angular-demo/ng-repeat嵌套.html\" target=\"_blank\" rel=\"noopener\">Angular的ng-repeat嵌套</a></td>\n<td><a href=\"https://wscats.github.io/angular-demo/angular模块化2.html\" target=\"_blank\" rel=\"noopener\">Angular利用angular.module()实现模块化2</a></td>\n</tr>\n<tr>\n<td><strong>PHP</strong></td>\n<td><strong>PHP</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/53\" target=\"_blank\" rel=\"noopener\">PHP CURL请求的小细节</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000000443795\" target=\"_blank\" rel=\"noopener\">最流行的PHP 代码规范</a></td>\n<td><a href=\"https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md\" target=\"_blank\" rel=\"noopener\">最流行的PHP 代码规范</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.aijc.net/AngularLearning/\" target=\"_blank\" rel=\"noopener\">Angular.js的一些学习资源</a></td>\n<td><a href=\"http://angularjs.cn\" target=\"_blank\" rel=\"noopener\">Angularjs中文社区</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/angular-ui\" target=\"_blank\" rel=\"noopener\">一些扩展Angular UI组件</a></td>\n<td><a href=\"http://mgcrea.github.io/angular-strap\" target=\"_blank\" rel=\"noopener\">Angular UI</a></td>\n</tr>\n<tr>\n<td><a href=\"http://each.sinaapp.com/angular\" target=\"_blank\" rel=\"noopener\">AngularJS在线教程</a></td>\n<td><a href=\"http://www.zouyesheng.com/angular.html\" target=\"_blank\" rel=\"noopener\">Angular学习笔记</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><table>\n<thead>\n<tr>\n<th>React</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.runoob.com/react/react-tutorial.html\" target=\"_blank\" rel=\"noopener\">React教程 菜鸟教程</a></td>\n<td><a href=\"http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu\" target=\"_blank\" rel=\"noopener\">React Router 使用教程</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wiki.jikexueyuan.com/project/react/\" target=\"_blank\" rel=\"noopener\">React开发中文手册-极客学院</a></td>\n<td><a href=\"http://www.hubwiz.com/course/552762019964049d1872fc88/\" target=\"_blank\" rel=\"noopener\">React教程-汇智网</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.phperz.com/article/15/0712/140537.html#\" target=\"_blank\" rel=\"noopener\">React.js快速开始</a></td>\n<td><a href=\"http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/\" target=\"_blank\" rel=\"noopener\">Reactjs 2016最佳实践</a></td>\n</tr>\n<tr>\n<td><a href=\"https://hulufei.gitbooks.io/react-tutorial/content/introduction.html\" target=\"_blank\" rel=\"noopener\">React 入门教程</a></td>\n<td><a href=\"http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam\" target=\"_blank\" rel=\"noopener\">汇智网 React教程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000002767365\" target=\"_blank\" rel=\"noopener\">轻松入门React和Webpack</a></td>\n<td><a href=\"http://nav.react-china.org/#docs\" target=\"_blank\" rel=\"noopener\">React中文索引</a></td>\n</tr>\n<tr>\n<td><a href=\"http://cn.redux.js.org/\" target=\"_blank\" rel=\"noopener\">Redux 中文文档</a></td>\n<td><a href=\"https://github.com/react-guide/react-router-cn\" target=\"_blank\" rel=\"noopener\">React Router官方文档中文翻译</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/kunyashaw/p/5619256.html\" target=\"_blank\" rel=\"noopener\">React入门教程</a></td>\n<td><a href=\"http://www.ibm.com/developerworks/cn/web/1509_dongyue_react/index.html\" target=\"_blank\" rel=\"noopener\">React介绍及实践教程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://facebook.github.io/react/index.html\" target=\"_blank\" rel=\"noopener\">React.js 官方网址</a></td>\n<td><a href=\"https://facebook.github.io/react/docs/getting-started.html\" target=\"_blank\" rel=\"noopener\">React.js 官方文档</a></td>\n</tr>\n<tr>\n<td><a href=\"http://material-ui.com/#\" target=\"_blank\" rel=\"noopener\">React.js material UI</a></td>\n<td><a href=\"http://touchstonejs.io\" target=\"_blank\" rel=\"noopener\">React.js TouchstoneJS UI</a></td>\n</tr>\n<tr>\n<td><a href=\"http://amazeui.org/react\" target=\"_blank\" rel=\"noopener\">React.js amazeui UI</a></td>\n<td><a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\" target=\"_blank\" rel=\"noopener\">React 入门实例教程 - 阮一峰</a></td>\n</tr>\n<tr>\n<td><a href=\"http://wiki.jikexueyuan.com/project/react-native\" target=\"_blank\" rel=\"noopener\">React Native 中文版</a></td>\n<td><a href=\"https://fakefish.github.io/react-webpack-cookbook\" target=\"_blank\" rel=\"noopener\">Webpack 和 React 小书 - gitbook</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><table>\n<thead>\n<tr>\n<th>Vue</th>\n<th>AppDemo</th>\n<th>Demo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/news/index.html\" target=\"_blank\" rel=\"noopener\">NewsDemo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/vue计算属性.html\" target=\"_blank\" rel=\"noopener\">vue计算属性</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/vue生命周期.html\" target=\"_blank\" rel=\"noopener\">vue生命周期</a></td>\n</tr>\n<tr>\n<td><strong>Article</strong></td>\n<td><strong>Vue文档</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/2\" target=\"_blank\" rel=\"noopener\">Vue-cli脚手架</a></td>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/3\" target=\"_blank\" rel=\"noopener\">Vue组件</a></td>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/8\" target=\"_blank\" rel=\"noopener\">vue自定义指令</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/9\" target=\"_blank\" rel=\"noopener\">Vue过渡动画</a></td>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/7\" target=\"_blank\" rel=\"noopener\">Vue指令</a></td>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/6\" target=\"_blank\" rel=\"noopener\">Vue api文档</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/5\" target=\"_blank\" rel=\"noopener\">Vue执行ajax请求</a></td>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/4\" target=\"_blank\" rel=\"noopener\">vue实现类似angular服务的方法</a></td>\n<td><a href=\"https://github.com/Wscats/vue-demo/issues/10\" target=\"_blank\" rel=\"noopener\">Vue源码参考文档</a></td>\n</tr>\n<tr>\n<td><strong>Router</strong></td>\n<td><strong>路由</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/路由.html\" target=\"_blank\" rel=\"noopener\">路由demo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/路由2.html\" target=\"_blank\" rel=\"noopener\">路由demo2</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Directive</strong></td>\n<td><strong>指令</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/指令.html\" target=\"_blank\" rel=\"noopener\">指令demo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/自定义指令.html\" target=\"_blank\" rel=\"noopener\">自定义指令demo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/滑动手势指令.html\" target=\"_blank\" rel=\"noopener\">滑动手势demo</a></td>\n</tr>\n<tr>\n<td><strong>Filter</strong></td>\n<td><strong>过滤器</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/过滤器.html\" target=\"_blank\" rel=\"noopener\">过滤器demo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/vue使用过滤器实现分页.html\" target=\"_blank\" rel=\"noopener\">过滤器实现分页demo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/vue过滤器读写数据.html\" target=\"_blank\" rel=\"noopener\">过滤器读写数据</a></td>\n</tr>\n<tr>\n<td><strong>Transition</strong></td>\n<td><strong>过渡</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/过渡.html\" target=\"_blank\" rel=\"noopener\">过渡demo</a></td>\n<td><a href=\"https://wscats.github.io/vue-demo/过渡2.html\" target=\"_blank\" rel=\"noopener\">过渡demo2</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Form</strong></td>\n<td><strong>表单</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/vue获取表单值.html\" target=\"_blank\" rel=\"noopener\">获取表单值</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Computed</strong></td>\n<td><strong>计算</strong></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/vue计算属性.html\" target=\"_blank\" rel=\"noopener\">计算属性</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Component</td>\n<td>组件</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://wscats.github.io/vue-demo/组件.html\" target=\"_blank\" rel=\"noopener\">组件demo</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://cn.vuejs.org\" target=\"_blank\" rel=\"noopener\">Vue官网</a></td>\n<td><a href=\"http://forum.vuejs.org\" target=\"_blank\" rel=\"noopener\">Vue论坛</a></td>\n<td><a href=\"https://github.com/vuejs/awesome-vue\" target=\"_blank\" rel=\"noopener\">Awesome-vue</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h2><table>\n<thead>\n<tr>\n<th>Node</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/44\" target=\"_blank\" rel=\"noopener\">node技巧</a></td>\n<td><a href=\"https://github.com/Wscats/angular-demo/tree/gh-pages/diyNodeServer\" target=\"_blank\" rel=\"noopener\">NodeJs静态服务器</a></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/alsotang/node-lessons\" target=\"_blank\" rel=\"noopener\">Node.js 包教不包会</a></td>\n<td><a href=\"http://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"noopener\">七天学会NodeJS</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.fens.me/series-nodejs\" target=\"_blank\" rel=\"noopener\">从零开始nodejs系列文章</a></td>\n<td><a href=\"http://www.nodebeginner.org/index-zh-cn.html\" target=\"_blank\" rel=\"noopener\">Node入门</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ourjs.com/detail/529ca5950cb6498814000005\" target=\"_blank\" rel=\"noopener\">Node初学者入门，一本全面的NodeJS教程</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Gulp\"><a href=\"#Gulp\" class=\"headerlink\" title=\"Gulp\"></a>Gulp</h2><table>\n<thead>\n<tr>\n<th>Gulp</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/glup\" target=\"_blank\" rel=\"noopener\">Gulp Demo</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Gulp</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://gulpjs.com\" target=\"_blank\" rel=\"noopener\">Gulp官网</a></td>\n<td><a href=\"http://www.gulpjs.com.cn\" target=\"_blank\" rel=\"noopener\">Gulp中文网</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Platform-CUF/use-gulp\" target=\"_blank\" rel=\"noopener\">Gulp资料收集</a></td>\n<td><a href=\"http://javascript.ruanyifeng.com/tool/gulp.html\" target=\"_blank\" rel=\"noopener\">Gulp：任务自动管理工具 - ruanyifeng</a></td>\n</tr>\n<tr>\n<td><a href=\"http://gulpjs.com/plugins]\" target=\"_blank\" rel=\"noopener\">Gulp插件</a></td>\n<td><a href=\"http://www.ido321.com/1622.html\" target=\"_blank\" rel=\"noopener\">Gulp不完全入门教程</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/nimojs/gulp-book\" target=\"_blank\" rel=\"noopener\">Gulp 入门指南</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><table>\n<thead>\n<tr>\n<th>Other</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/node-demo/issues/4\" target=\"_blank\" rel=\"noopener\">关于Pornographic website的一些前端分析</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/50\" target=\"_blank\" rel=\"noopener\">微信公众号开发</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/30\" target=\"_blank\" rel=\"noopener\">Atom技巧总结</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/46\" target=\"_blank\" rel=\"noopener\">Mac小技巧</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/9\" target=\"_blank\" rel=\"noopener\">CSDN页面内JS跳转脚本</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/8\" target=\"_blank\" rel=\"noopener\">CSDN博客隐藏配置</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/7\" target=\"_blank\" rel=\"noopener\">百度设置小度机器人出现</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/2\" target=\"_blank\" rel=\"noopener\">前端冷知识，妙用浏览器地址栏</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/27\" target=\"_blank\" rel=\"noopener\">Vim笔记</a></td>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/48\" target=\"_blank\" rel=\"noopener\">Cordova配置&amp;&amp;Ionic配置（WebApp混合开发环境）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/33\" target=\"_blank\" rel=\"noopener\">IE8及以下按钮超链接无法跳转的问题</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"分享功能\"><a href=\"#分享功能\" class=\"headerlink\" title=\"分享功能\"></a>分享功能</h2><table>\n<thead>\n<tr>\n<th>Share</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://share.baidu.com\" target=\"_blank\" rel=\"noopener\">百度分享(PC)</a></td>\n<td><a href=\"http://jiathis.com\" target=\"_blank\" rel=\"noopener\">JiaThis(PC)</a></td>\n</tr>\n<tr>\n<td><a href=\"http://developer.baidu.com/soc/share\" target=\"_blank\" rel=\"noopener\">社会化分享组件(Mobile)</a></td>\n<td><a href=\"http://www.mob.com\" target=\"_blank\" rel=\"noopener\">ShareSDK轻松实现社会化功能(Mobile)</a></td>\n</tr>\n<tr>\n<td><a href=\"http://dev.umeng.com/social/android/quick-integration\" target=\"_blank\" rel=\"noopener\">友盟分享(Mobile)</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"在线演示\"><a href=\"#在线演示\" class=\"headerlink\" title=\"在线演示\"></a>在线演示</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://runjs.cn\" target=\"_blank\" rel=\"noopener\">js 在线编辑 - runjs</a></td>\n<td><a href=\"http://jsbin.com\" target=\"_blank\" rel=\"noopener\">js 在线编辑 - jsbin</a></td>\n</tr>\n<tr>\n<td><a href=\"http://codepen.io\" target=\"_blank\" rel=\"noopener\">js 在线编辑 - codepen</a></td>\n<td><a href=\"http://jsfiddle.net\" target=\"_blank\" rel=\"noopener\">js 在线编辑 - jsfiddle</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ideone.com\" target=\"_blank\" rel=\"noopener\">java 在线编辑 - runjs</a></td>\n<td><a href=\"http://code.hcharts.cn\" target=\"_blank\" rel=\"noopener\">js 在线编辑 - hcharts</a></td>\n</tr>\n<tr>\n<td><a href=\"http://jsdm.com\" target=\"_blank\" rel=\"noopener\">js 在线编辑 - jsdm</a></td>\n<td><a href=\"http://sqlfiddle.com\" target=\"_blank\" rel=\"noopener\">sql 在线编辑 - sqlfiddle</a></td>\n</tr>\n<tr>\n<td><a href=\"https://thimble.mozilla.org\" target=\"_blank\" rel=\"noopener\">mozilla 在线编辑器</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"富文本编辑器\"><a href=\"#富文本编辑器\" class=\"headerlink\" title=\"富文本编辑器\"></a>富文本编辑器</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://ueditor.baidu.com/website\" target=\"_blank\" rel=\"noopener\">百度ueditor</a></td>\n<td><a href=\"http://ckeditor.com\" target=\"_blank\" rel=\"noopener\">ckeditor</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.tinymce.com\" target=\"_blank\" rel=\"noopener\">tinymce</a></td>\n<td><a href=\"http://kindeditor.net\" target=\"_blank\" rel=\"noopener\">kindeditor</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.bootcss.com/p/bootstrap-wysiwyg\" target=\"_blank\" rel=\"noopener\">wysiwyg</a></td>\n<td><a href=\"http://integ.github.io/BachEditor\" target=\"_blank\" rel=\"noopener\">BachEditor</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/mycolorway/simditor\" target=\"_blank\" rel=\"noopener\">simditor</a></td>\n<td><a href=\"https://github.com/summernote/summernote\" target=\"_blank\" rel=\"noopener\">summernote</a></td>\n</tr>\n<tr>\n<td><a href=\"http://neilj.github.io/Squire\" target=\"_blank\" rel=\"noopener\">Squire</a></td>\n<td><a href=\"https://github.com/wangfupeng1988/wangEditor\" target=\"_blank\" rel=\"noopener\">wangEditor</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4565261.html\" target=\"_blank\" rel=\"noopener\">Chrome - 基础</a></td>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4579121.html\" target=\"_blank\" rel=\"noopener\">Chrome - 进阶</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4585983.html\" target=\"_blank\" rel=\"noopener\">Chrome - 性能</a></td>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4607497.html\" target=\"_blank\" rel=\"noopener\">Chrome - 性能进阶</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/constantince/p/4624241.html\" target=\"_blank\" rel=\"noopener\">Chrome - 移动</a></td>\n<td><a href=\"http://www.cnblogs.com/liyunhua/p/4544738.html\" target=\"_blank\" rel=\"noopener\">Chrome - 使用技巧</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html\" target=\"_blank\" rel=\"noopener\">Chrome - Console控制台不完全指南</a></td>\n<td><a href=\"http://anti-code.com/devtools-cheatsheet\" target=\"_blank\" rel=\"noopener\">chrome开发工具快捷键</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace\" target=\"_blank\" rel=\"noopener\">Chrome 开发工具 Workspace 使用</a></td>\n<td><a href=\"http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html\" target=\"_blank\" rel=\"noopener\">Chrome神器Vimium快捷键学习记录</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.w3cplus.com/sassguide/debug.html\" target=\"_blank\" rel=\"noopener\">Sass调试-w3cplus</a></td>\n<td><a href=\"http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html\" target=\"_blank\" rel=\"noopener\">如何更专业的使用Chrome开发者工具-w3cplus</a></td>\n</tr>\n<tr>\n<td><a href=\"http://sentsin.com/web/253.html\" target=\"_blank\" rel=\"noopener\">Chrome调试canvas</a></td>\n<td><a href=\"https://segmentfault.com/a/1190000000683599\" target=\"_blank\" rel=\"noopener\">神器——Chrome开发者工具(一)</a></td>\n</tr>\n<tr>\n<td><a href=\"https://xinranliu.me/2015-05-22-qiqu-performance\" target=\"_blank\" rel=\"noopener\">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍</a></td>\n<td><a href=\"http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html\" target=\"_blank\" rel=\"noopener\">Chrome 开发者工具的 15 个小技巧</a></td>\n</tr>\n<tr>\n<td><a href=\"http://1ke.co/course/361\" target=\"_blank\" rel=\"noopener\">Chrome开发者工具不完全指南</a></td>\n<td><a href=\"http://segmentfault.com/a/1190000003882567\" target=\"_blank\" rel=\"noopener\">Chrome 开发者工具使用技巧</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering\" target=\"_blank\" rel=\"noopener\">Javascript高性能动画与页面渲染</a></td>\n<td><a href=\"http://isux.tencent.com/h5-performance.html\" target=\"_blank\" rel=\"noopener\">移动H5前端性能优化指南</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers\" target=\"_blank\" rel=\"noopener\">给网页设计师和前端开发者看的前端性能优化</a></td>\n<td><a href=\"http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/\" target=\"_blank\" rel=\"noopener\">张鑫旭——前端性能</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html\" target=\"_blank\" rel=\"noopener\">web前端性能优化进阶路</a></td>\n<td><a href=\"http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD\" target=\"_blank\" rel=\"noopener\">Hey——前端性能</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/yslow\" target=\"_blank\" rel=\"noopener\">YSLOW中文介绍</a></td>\n<td><a href=\"http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml\" target=\"_blank\" rel=\"noopener\">Yahoo!团队实践分享：网站性能</a></td>\n</tr>\n<tr>\n<td><a href=\"http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml\" target=\"_blank\" rel=\"noopener\">加载，不只是少一点点</a></td>\n<td><a href=\"http://coolshell.cn/articles/6470.html\" target=\"_blank\" rel=\"noopener\">由12306谈谈网站前端性能和后端性能优化</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.alloyteam.com/2012/10/high-performance-html\" target=\"_blank\" rel=\"noopener\">【高性能前端1】高性能HTML</a></td>\n<td><a href=\"http://www.alloyteam.com/2012/10/high-performance-css\" target=\"_blank\" rel=\"noopener\">【高性能前端2】高性能CSS</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1\" target=\"_blank\" rel=\"noopener\">前端工程与性能优化（上）：静态资源版本更新与缓存</a></td>\n<td><a href=\"http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2\" target=\"_blank\" rel=\"noopener\">前端工程与性能优化（下）：静态资源管理与模板框架</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/48369\" target=\"_blank\" rel=\"noopener\">HTTPS连接的前几毫秒发生了什么</a></td>\n<td><a href=\"http://uicss.cn/yslow/#more-12319\" target=\"_blank\" rel=\"noopener\">Yslow</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/amfe/article/issues/1\" target=\"_blank\" rel=\"noopener\">阿里无线前端性能优化指南(Pt.1 加载期优化)</a></td>\n<td><a href=\"http://www.cnblogs.com/developersupport/p/3248695.html\" target=\"_blank\" rel=\"noopener\">毫秒必争，前端网页性能最佳实践</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.bootcdn.cn/jquery\" target=\"_blank\" rel=\"noopener\">Jquery&amp;Bootstrap中文网开源项目免费 CDN 服务</a></td>\n<td><a href=\"http://www.bootcdn.cn\" target=\"_blank\" rel=\"noopener\">Bootstrap中文网开源项目免费 CDN 服务</a></td>\n</tr>\n<tr>\n<td><a href=\"http://lib.sinaapp.com\" target=\"_blank\" rel=\"noopener\">新浪CDN</a></td>\n<td><a href=\"http://cdn.code.baidu.com\" target=\"_blank\" rel=\"noopener\">百度静态资源公共库</a></td>\n</tr>\n<tr>\n<td><a href=\"http://staticfile.org\" target=\"_blank\" rel=\"noopener\">开放静态文件 CDN - 七牛</a></td>\n<td><a href=\"http://www.jq22.com/cdn\" target=\"_blank\" rel=\"noopener\">CDN加速 - jq22</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.asp.net/ajax/cdn\" target=\"_blank\" rel=\"noopener\">微软CDN</a></td>\n<td><a href=\"https://code.angularjs.org/1.5.8/\" target=\"_blank\" rel=\"noopener\">Angular CDN</a></td>\n</tr>\n<tr>\n<td><a href=\"http://libs.useso.com\" target=\"_blank\" rel=\"noopener\">360网站卫士常用前端公共库CDN服务</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/Good-text-Share/issues/20\" target=\"_blank\" rel=\"noopener\">Git操作</a></td>\n<td><a href=\"http://blog.csdn.net/qq_27080247/article/details/49942991\" target=\"_blank\" rel=\"noopener\">Git CSDN Blog</a></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://git-scm.com\" target=\"_blank\" rel=\"noopener\">Git-scm</a></td>\n<td><a href=\"https://git-for-windows.github.io\" target=\"_blank\" rel=\"noopener\">Git-for-windows</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰-Git教程</a></td>\n<td><a href=\"http://www.worldhello.net/gotgithub/index.html\" target=\"_blank\" rel=\"noopener\">Gogithub</a></td>\n</tr>\n<tr>\n<td><a href=\"http://pcottle.github.io/learnGitBranching\" target=\"_blank\" rel=\"noopener\">Git常规命令练习</a></td>\n<td><a href=\"https://github.com/xirong/my-git\" target=\"_blank\" rel=\"noopener\">Git的资料整理</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/fanfan259/p/4810517.html\" target=\"_blank\" rel=\"noopener\">我所记录的git命令（非常实用）</a></td>\n<td><a href=\"https://github.com/phodal/github-roam\" target=\"_blank\" rel=\"noopener\">GitHub 漫游指南</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md\" target=\"_blank\" rel=\"noopener\">GitHub秘籍</a></td>\n<td><a href=\"http://onlywei.github.io/explain-git-with-d3\" target=\"_blank\" rel=\"noopener\">动画方式练习git</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Sass-amp-Less\"><a href=\"#Sass-amp-Less\" class=\"headerlink\" title=\"Sass&amp;Less\"></a>Sass&amp;Less</h2><table>\n<thead>\n<tr>\n<th>Article</th>\n<th>Article</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Wscats/less-demo/issues/1\" target=\"_blank\" rel=\"noopener\">Less教程</a></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>Reference</strong></td>\n<td><strong>Reference</strong></td>\n</tr>\n<tr>\n<td><a href=\"http://www.w3cplus.com/sassguide\" target=\"_blank\" rel=\"noopener\">Sass</a></td>\n<td><a href=\"http://sass.bootcss.com\" target=\"_blank\" rel=\"noopener\">Sass中文文档</a></td>\n</tr>\n<tr>\n<td><a href=\"http://less.bootcss.com\" target=\"_blank\" rel=\"noopener\">Less</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://wowubuntu.com/markdown\" target=\"_blank\" rel=\"noopener\">Markdown 语法说明 (简体中文版)</a></td>\n<td><a href=\"https://github.com/LearnShare/Learning-Markdown/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">Markdown入门参考</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">Mdeditor(一款国内的在线markdown编辑器)</a></td>\n<td><a href=\"https://stackedit.io\" target=\"_blank\" rel=\"noopener\">Stackedit(国外的在线markdown编辑器，功能强大，同步云盘)</a></td>\n</tr>\n<tr>\n<td><a href=\"http://bh-lay.github.io/mditor\" target=\"_blank\" rel=\"noopener\">Mditor一款轻量级的markdown编辑器</a></td>\n<td><a href=\"https://github.com/lepture/editor\" target=\"_blank\" rel=\"noopener\">lepture-editor</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/jbt/markdown-editor\" target=\"_blank\" rel=\"noopener\">Markdown-editor</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端文档\"><a href=\"#前端文档\" class=\"headerlink\" title=\"前端文档\"></a>前端文档</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/JacksonTian/fks\" target=\"_blank\" rel=\"noopener\">前端知识结构</a></td>\n<td><a href=\"https://github.com/unruledboy/WebFrontEndStack\" target=\"_blank\" rel=\"noopener\">Web前端开发大系概览</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/justjavac/free-programming-books-zh_CN\" target=\"_blank\" rel=\"noopener\">免费的编程中文书籍索</a></td>\n<td><a href=\"https://github.com/dypsilon/frontend-dev-bookmarks\" target=\"_blank\" rel=\"noopener\">前端书籍</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/vhf/free-programming-books\" target=\"_blank\" rel=\"noopener\">前端免费书籍大全</a></td>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"noopener\">重新介绍JavaScript（JS教程）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.gitbook.com 国外的在线markdown可编辑成书\" target=\"_blank\" rel=\"noopener\">Gitbook</a></td>\n<td><a href=\"https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide\" target=\"_blank\" rel=\"noopener\">Front-End-Develop-Guide 前端开发指南</a></td>\n</tr>\n<tr>\n<td><a href=\"https://li-xinyang.gitbooks.io/frontend-notebook/content\" target=\"_blank\" rel=\"noopener\">前端开发笔记本</a></td>\n<td><a href=\"https://github.com/nieweidong/fetool\" target=\"_blank\" rel=\"noopener\">大前端工具集</a></td>\n</tr>\n<tr>\n<td><a href=\"https://dwqs.gitbooks.io/frontenddevhandbook/content\" target=\"_blank\" rel=\"noopener\">前端开发者手册</a></td>\n<td><a href=\"https://github.com/qiu-deqing/FE-learning\" target=\"_blank\" rel=\"noopener\">结合个人经历总结的前端入门方法</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.csdn.net/qq_25827845/article/details/53079094\" target=\"_blank\" rel=\"noopener\">2016最新前端学习计划</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端规范\"><a href=\"#前端规范\" class=\"headerlink\" title=\"前端规范\"></a>前端规范</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://alloyteam.github.io/CodeGuide/\" target=\"_blank\" rel=\"noopener\">通过分析github代码库总结出来的工程师代码书写习惯</a></td>\n<td><a href=\"http://codeguide.bootcss.com\" target=\"_blank\" rel=\"noopener\">HTML&amp;CSS编码规范 by @mdo</a></td>\n</tr>\n<tr>\n<td><a href=\"http://yuwenhui.github.io\" target=\"_blank\" rel=\"noopener\">前端编码规范之js - by yuwenhui</a></td>\n<td><a href=\"http://www.cnblogs.com/hustskyking/p/javascript-spec.html\" target=\"_blank\" rel=\"noopener\">前端编码规范之js - by 李靖</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/yuche/javascript#table-of-contents\" target=\"_blank\" rel=\"noopener\">Airbnb JavaScript 编码规范（简体中文版）</a></td>\n<td><a href=\"http://www.zhihu.com/question/20351507\" target=\"_blank\" rel=\"noopener\">AMD与CMD规范的区别</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.cnblogs.com/tugenhua0707/p/3507957.html\" target=\"_blank\" rel=\"noopener\">AMD与CMD规范的区别</a></td>\n<td><a href=\"http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html\" target=\"_blank\" rel=\"noopener\">KISSY 源码规范</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/79075\" target=\"_blank\" rel=\"noopener\">前端代码规范及最佳实践</a></td>\n<td><a href=\"http://coderlmn.github.io/code-standards\" target=\"_blank\" rel=\"noopener\">百度前端规范</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/79484\" target=\"_blank\" rel=\"noopener\">JavaScript风格指南/编码规范（Airbnb公司版）</a></td>\n<td><a href=\"http://nec.netease.com/standard\" target=\"_blank\" rel=\"noopener\">网易前端开发规范</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/ecomfe/spec\" target=\"_blank\" rel=\"noopener\">前端规范资源列表</a></td>\n<td><a href=\"http://codecloud.net/5622.html\" target=\"_blank\" rel=\"noopener\">Web 前端开发规范文档</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端面试\"><a href=\"#前端面试\" class=\"headerlink\" title=\"前端面试\"></a>前端面试</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://www.cnblogs.com/imwtr/p/4685546.html\" target=\"_blank\" rel=\"noopener\">2016校招内推 – 阿里巴巴前端 – 四面面试经历</a></td>\n<td><a href=\"https://www.nowcoder.com/discuss/3196\" target=\"_blank\" rel=\"noopener\">那几个月在找工作（百度，网易游戏，华为）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000000465431\" target=\"_blank\" rel=\"noopener\">前端开发面试题</a></td>\n<td><a href=\"https://github.com/hawx1993/Front-end-Interview-questions\" target=\"_blank\" rel=\"noopener\">Front-end-Interview-questions</a></td>\n</tr>\n<tr>\n<td><a href=\"http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E\" target=\"_blank\" rel=\"noopener\">5个经典的前端面试问题</a></td>\n<td><a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese\" target=\"_blank\" rel=\"noopener\">Front-end-Developer-Interview-Questions</a></td>\n</tr>\n<tr>\n<td><a href=\"http://blog.jobbole.com/78738/\" target=\"_blank\" rel=\"noopener\">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</a></td>\n<td><a href=\"https://github.com/paddingme/Front-end-Web-Development-Interview-Question\" target=\"_blank\" rel=\"noopener\">前端开发面试题大收集</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/qiu-deqing/FE-interview\" target=\"_blank\" rel=\"noopener\">收集的前端面试题和答案</a></td>\n<td><a href=\"https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md\" target=\"_blank\" rel=\"noopener\">前端开发面试题</a></td>\n</tr>\n<tr>\n<td><a href=\"https://segmentfault.com/a/1190000005947094\" target=\"_blank\" rel=\"noopener\">前端面试大全</a></td>\n<td><a href=\"https://mdluo.github.io/blog/about-front-end-interview/\" target=\"_blank\" rel=\"noopener\">关于前端面试</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前端网站\"><a href=\"#前端网站\" class=\"headerlink\" title=\"前端网站\"></a>前端网站</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://gold.xitu.io/\" target=\"_blank\" rel=\"noopener\">掘金</a></td>\n<td><a href=\"http://fex.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度FEX</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.aliued.com/\" target=\"_blank\" rel=\"noopener\">阿里UED</a></td>\n<td><a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.qdfuns.com/portal.php\" target=\"_blank\" rel=\"noopener\">QDFuns</a></td>\n<td><a href=\"http://www.imooc.com/\" target=\"_blank\" rel=\"noopener\">幕课网</a></td>\n</tr>\n<tr>\n<td><a href=\"http://codepen.io/\" target=\"_blank\" rel=\"noopener\">Codepen</a></td>\n<td><a href=\"http://sentsin.com/daohang/\" target=\"_blank\" rel=\"noopener\">Sentsin</a></td>\n</tr>\n<tr>\n<td><a href=\"http://www.ctolib.com/javascript/\" target=\"_blank\" rel=\"noopener\">CTOLib</a></td>\n<td><a href=\"http://www.ctolib.com/nodejs/\" target=\"_blank\" rel=\"noopener\">CTOLib/Node</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"JS练习\"><a href=\"#JS练习\" class=\"headerlink\" title=\"JS练习\"></a>JS练习</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://www.codewars.com/\" target=\"_blank\" rel=\"noopener\">Codewars</a></td>\n<td><a href=\"http://javascript-puzzlers.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">Javascript-puzzlers</a></td>\n</tr>\n<tr>\n<td><a href=\"https://freecodecamp.cn/\" target=\"_blank\" rel=\"noopener\">Freecodecamp中文版</a></td>\n<td><a href=\"http://es6katas.org/\" target=\"_blank\" rel=\"noopener\">ES6katas</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.nowcoder.com/ta/js-assessment\" target=\"_blank\" rel=\"noopener\">Now Coder牛客网</a></td>\n<td><a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"noopener\">Leetcode</a></td>\n</tr>\n<tr>\n<td><a href=\"https://nodeschool.io/\" target=\"_blank\" rel=\"noopener\">Nodeschool</a></td>\n<td><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener\">Hackerrank</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/Ralph-Wang/algorithm.in.js\" target=\"_blank\" rel=\"noopener\">数据结构与算法 JavaScript 描述. 章节练习</a></td>\n<td><a href=\"https://github.com/twobin/twobinSort\" target=\"_blank\" rel=\"noopener\">常见排序算法（JS版）</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/luofei2011/jsAgm/blob/master/js/sort.js\" target=\"_blank\" rel=\"noopener\">经典排序</a></td>\n<td><a href=\"https://github.com/hechangmin/jssort\" target=\"_blank\" rel=\"noopener\">常见排序算法-js版本</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"ES\"><a href=\"#ES\" class=\"headerlink\" title=\"ES\"></a>ES</h2><table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Reference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://es6-org.github.io/exploring-es6/\" target=\"_blank\" rel=\"noopener\">Exploring-ES6翻译</a></td>\n<td><a href=\"http://es6.ruanyifeng.com\" target=\"_blank\" rel=\"noopener\">阮一峰 ES6</a></td>\n</tr>\n<tr>\n<td><a href=\"http://yanhaijing.com/es5\" target=\"_blank\" rel=\"noopener\">ECMA-262，第 5 版</a></td>\n<td><a href=\"http://es5.github.io\" target=\"_blank\" rel=\"noopener\">ES5</a></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<blockquote>\n<p>本文引用自：<a href=\"https://github.com/GuoXingGitHub/Front-end-tutorial\" target=\"_blank\" rel=\"noopener\">https://github.com/GuoXingGitHub/Front-end-tutorial</a></p>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/技术/2015-03-01-c语言1-c程序的处理过程/c语言编译过程.PNG","post":"cjeo8cj4300085oq8t2olcp9z","slug":"c语言编译过程.PNG","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言10-字符串和命名空间/数组指针传递以及二级指针接收的流程概括.png","post":"cjeo8cj4d000c5oq837bxyirv","slug":"数组指针传递以及二级指针接收的流程概括.png","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言15-位操作/二进制文件加密解密.c","post":"cjeo8cj4l000i5oq8rfmazdgp","slug":"二进制文件加密解密.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言3-优先级/优先级.jpg","post":"cjeo8cj4s000s5oq8zm05jtlf","slug":"优先级.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言7-指针/指针偏移法.png","post":"cjeo8cj4x00115oq80sqo70ok","slug":"指针偏移法.png","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言8-函数/公式结构和书写结构.png","post":"cjeo8cj4y00145oq869ncpbv9","slug":"公式结构和书写结构.png","modified":1,"renderable":1},{"_id":"source/_posts/技术/2018-03-08-HEXO文档中带文件/avatar.jpg","post":"cjeo8cj59001u5oq89686b3m5","slug":"avatar.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-13-c语言提高6-数据结构-双向循环链表-动态库和静态库/双向链表所有代码.c","post":"cjeo8cj58001r5oq8pd5evrsb","slug":"双向链表所有代码.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2018-03-10-csharp代码的编译过程/csharp代码的编译过程.png","post":"cjeo8cj5n002o5oq87zlpoehi","slug":"csharp代码的编译过程.png","modified":1,"renderable":1},{"_id":"source/_posts/技术/2018-03-10-csharp学习笔记/csharp学习笔记.exe","slug":"csharp学习笔记.exe","post":"cjeo8cj5p002r5oq8jvbpbc73","modified":1,"renderable":0},{"_id":"source/_posts/技术/2018-03-10-csharp控件属性事件大全/csharp控件属性事件大全.doc","post":"cjeo8cj5q002v5oq841hdcdfo","slug":"csharp控件属性事件大全.doc","modified":1,"renderable":1},{"_id":"source/_posts/生活/2018-03-10-图片/1.png","post":"cjeo8cj5t002y5oq80pohx4wz","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言11-进程空间-结构/mystack.c","post":"cjeo8cj4700095oq8hr80o1g3","slug":"mystack.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言11-进程空间-结构/内存对齐.png","post":"cjeo8cj4700095oq8hr80o1g3","slug":"内存对齐.png","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言2-补码/cpu对内存的读写操作详解.png","post":"cjeo8cj4r000p5oq8uw0m2p03","slug":"cpu对内存的读写操作详解.png","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言2-补码/补码求原.png","post":"cjeo8cj4r000p5oq8uw0m2p03","slug":"补码求原.png","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-13-c语言提高5-字符串/内存操作函数代码.c","post":"cjeo8cj56001n5oq8lqz9fwrv","slug":"内存操作函数代码.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-13-c语言提高5-字符串/字符串操作函数代码.c","post":"cjeo8cj56001n5oq8lqz9fwrv","slug":"字符串操作函数代码.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2018-03-09-c语言提高1-进程空间,一维数组/1.c","post":"cjeo8cj5h002a5oq8yxi01h0t","slug":"1.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2018-03-09-c语言提高1-进程空间,一维数组/1.jpg","post":"cjeo8cj5h002a5oq8yxi01h0t","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数/利用二级指针的方式读取文件到堆内存.c","post":"cjeo8cj5k002h5oq8oc794q7u","slug":"利用二级指针的方式读取文件到堆内存.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数/堆上根据二级,三级指针做形参,做返回值来申请二维空间.c","post":"cjeo8cj5k002h5oq8oc794q7u","slug":"堆上根据二级,三级指针做形参,做返回值来申请二维空间.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数/序列加密的代码.c","post":"cjeo8cj5k002h5oq8oc794q7u","slug":"序列加密的代码.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png","post":"cjeo8cj5m002l5oq89f49ya2b","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png","post":"cjeo8cj5m002l5oq89f49ya2b","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png","slug":"3.png","post":"cjeo8cj5m002l5oq89f49ya2b","modified":1,"renderable":0},{"_id":"source/_posts/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/main.c","post":"cjeo8cj54001h5oq8np9vdu2o","slug":"main.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/二级指针.c","post":"cjeo8cj54001h5oq8np9vdu2o","slug":"二级指针.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/二维数组.c","post":"cjeo8cj54001h5oq8np9vdu2o","slug":"二维数组.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/指针数组.c","post":"cjeo8cj54001h5oq8np9vdu2o","slug":"指针数组.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/数组指针.c","post":"cjeo8cj54001h5oq8np9vdu2o","slug":"数组指针.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/qsort代码.c","post":"cjeo8cj55001k5oq8t3qqlau1","slug":"qsort代码.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/qsotr实现二级排序_对结构体.c","post":"cjeo8cj55001k5oq8t3qqlau1","slug":"qsotr实现二级排序_对结构体.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/数组排序优化版.c","post":"cjeo8cj55001k5oq8t3qqlau1","slug":"数组排序优化版.c","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/标准库函数qsort1.png","post":"cjeo8cj55001k5oq8t3qqlau1","slug":"标准库函数qsort1.png","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/标准库函数qsort2.jpg","post":"cjeo8cj55001k5oq8t3qqlau1","slug":"标准库函数qsort2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fclose.jpg","post":"cjeo8cj4i000e5oq8t3nhdrp5","slug":"fclose.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fgetc.jpg","post":"cjeo8cj4i000e5oq8t3nhdrp5","slug":"fgetc.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fgets.jpg","post":"cjeo8cj4i000e5oq8t3nhdrp5","slug":"fgets.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fopen.jpg","post":"cjeo8cj4i000e5oq8t3nhdrp5","slug":"fopen.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fputc.jpg","post":"cjeo8cj4i000e5oq8t3nhdrp5","slug":"fputc.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fputs.jpg","post":"cjeo8cj4i000e5oq8t3nhdrp5","slug":"fputs.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/freadAndfwrite.jpg","post":"cjeo8cj4i000e5oq8t3nhdrp5","slug":"freadAndfwrite.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/fseek.jpg","post":"cjeo8cj4i000e5oq8t3nhdrp5","slug":"fseek.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/ftell.jpg","post":"cjeo8cj4i000e5oq8t3nhdrp5","slug":"ftell.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/rewind.jpg","post":"cjeo8cj4i000e5oq8t3nhdrp5","slug":"rewind.jpg","modified":1,"renderable":1},{"_id":"source/_posts/技术/2015-03-09-c语言14-文件操作/文件读取代码例子.c","post":"cjeo8cj4i000e5oq8t3nhdrp5","slug":"文件读取代码例子.c","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjeo8cj4g000d5oq8bl5mdowu","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj4p000l5oq86md7blam"},{"post_id":"cjeo8cj4300085oq8t2olcp9z","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj4s000q5oq8a9rgyopq"},{"post_id":"cjeo8cj4i000e5oq8t3nhdrp5","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj4t000t5oq8n5msqxbj"},{"post_id":"cjeo8cj4l000i5oq8rfmazdgp","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj4v000w5oq8zq76r6lw"},{"post_id":"cjeo8cj4700095oq8hr80o1g3","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj4w000z5oq8pgiwkcsn"},{"post_id":"cjeo8cj4o000k5oq8mkzwva3t","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj4y00125oq8l3mtjhav"},{"post_id":"cjeo8cj4r000p5oq8uw0m2p03","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj4z00155oq8hb3i5lxn"},{"post_id":"cjeo8cj4d000c5oq837bxyirv","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5000185oq8b3dg5oux"},{"post_id":"cjeo8cj4s000s5oq8zm05jtlf","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj52001b5oq8e913v7b5"},{"post_id":"cjeo8cj4u000v5oq8tdb6qnu1","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj53001e5oq8hrwvftpe"},{"post_id":"cjeo8cj4v000y5oq8oj456xsz","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj54001i5oq8mzrhhy0w"},{"post_id":"cjeo8cj4x00115oq80sqo70ok","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj56001l5oq8i26nc25a"},{"post_id":"cjeo8cj4y00145oq869ncpbv9","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj57001p5oq8bs6lvvlu"},{"post_id":"cjeo8cj4z00175oq89afy1qo6","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj59001s5oq8qwi3xerj"},{"post_id":"cjeo8cj51001a5oq8wccbph6q","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5a001v5oq80n1cj6is"},{"post_id":"cjeo8cj52001d5oq8ms9r6lk4","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5c001y5oq8c7wv6u3n"},{"post_id":"cjeo8cj54001h5oq8np9vdu2o","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5d00215oq85quacaum"},{"post_id":"cjeo8cj55001k5oq8t3qqlau1","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5f00255oq81puuyl3p"},{"post_id":"cjeo8cj56001n5oq8lqz9fwrv","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5g00285oq8rkxe540y"},{"post_id":"cjeo8cj58001r5oq8pd5evrsb","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5i002c5oq86uvloatp"},{"post_id":"cjeo8cj59001u5oq89686b3m5","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5j002f5oq82ahubwub"},{"post_id":"cjeo8cj5a001x5oq8rb7bghgs","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5l002i5oq8goe3ujhw"},{"post_id":"cjeo8cj5c00205oq8txzutn55","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5n002m5oq89bny2vdo"},{"post_id":"cjeo8cj5e00245oq866ayfvzy","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5o002p5oq86yq2ja85"},{"post_id":"cjeo8cj5f00275oq8h7tygs37","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5q002t5oq8yes7caum"},{"post_id":"cjeo8cj5h002a5oq8yxi01h0t","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5r002w5oq8j3i8t8wb"},{"post_id":"cjeo8cj5i002e5oq8k4dliupt","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5u002z5oq8e1p0ilku"},{"post_id":"cjeo8cj5k002h5oq8oc794q7u","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5w00335oq8d667agt7"},{"post_id":"cjeo8cj5m002l5oq89f49ya2b","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5x00365oq8k9hjs7ps"},{"post_id":"cjeo8cj5n002o5oq87zlpoehi","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5x00395oq8rux8evej"},{"post_id":"cjeo8cj5p002r5oq8jvbpbc73","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5y003b5oq8cw8c80g9"},{"post_id":"cjeo8cj5q002v5oq841hdcdfo","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5y003d5oq8dii8hv0g"},{"post_id":"cjeo8cj5v00325oq8khkod7kw","category_id":"cjeo8cj4a000a5oq8kmfc5t9m","_id":"cjeo8cj5z003f5oq8h76w429g"},{"post_id":"cjeo8cj5t002y5oq80pohx4wz","category_id":"cjeo8cj5w00345oq8mzx1l7lp","_id":"cjeo8cj5z003i5oq8bplagxli"}],"PostTag":[{"post_id":"cjeo8cj4g000d5oq8bl5mdowu","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj4l000h5oq8k96mq0a7"},{"post_id":"cjeo8cj4300085oq8t2olcp9z","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj4n000j5oq8vkh07br0"},{"post_id":"cjeo8cj4i000e5oq8t3nhdrp5","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj4r000o5oq8et0d3onq"},{"post_id":"cjeo8cj4l000i5oq8rfmazdgp","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj4s000r5oq8vmx3ujxp"},{"post_id":"cjeo8cj4700095oq8hr80o1g3","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj4u000u5oq8tlp8d60k"},{"post_id":"cjeo8cj4o000k5oq8mkzwva3t","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj4v000x5oq86nrze2uq"},{"post_id":"cjeo8cj4r000p5oq8uw0m2p03","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj4x00105oq8n6p698xf"},{"post_id":"cjeo8cj4d000c5oq837bxyirv","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj4y00135oq82vluu8yy"},{"post_id":"cjeo8cj4s000s5oq8zm05jtlf","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj4z00165oq8rpgyeiba"},{"post_id":"cjeo8cj4u000v5oq8tdb6qnu1","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj5100195oq85f2vwr2h"},{"post_id":"cjeo8cj4v000y5oq8oj456xsz","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj52001c5oq8hk9w8tj4"},{"post_id":"cjeo8cj4x00115oq80sqo70ok","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj53001g5oq8ru3knutm"},{"post_id":"cjeo8cj4y00145oq869ncpbv9","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj55001j5oq8xqt1sca2"},{"post_id":"cjeo8cj4z00175oq89afy1qo6","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj56001m5oq8wxse3qlt"},{"post_id":"cjeo8cj54001h5oq8np9vdu2o","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj58001q5oq8l2rgvgje"},{"post_id":"cjeo8cj55001k5oq8t3qqlau1","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj59001t5oq8y79zw6ua"},{"post_id":"cjeo8cj51001a5oq8wccbph6q","tag_id":"cjeo8cj53001f5oq8gz5zijfi","_id":"cjeo8cj5a001w5oq8cscaom2o"},{"post_id":"cjeo8cj56001n5oq8lqz9fwrv","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj5c001z5oq8t7henmcw"},{"post_id":"cjeo8cj58001r5oq8pd5evrsb","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj5e00235oq87l5q5x4j"},{"post_id":"cjeo8cj52001d5oq8ms9r6lk4","tag_id":"cjeo8cj53001f5oq8gz5zijfi","_id":"cjeo8cj5f00265oq832f6tmna"},{"post_id":"cjeo8cj59001u5oq89686b3m5","tag_id":"cjeo8cj53001f5oq8gz5zijfi","_id":"cjeo8cj5g00295oq8ypamj5uy"},{"post_id":"cjeo8cj5c00205oq8txzutn55","tag_id":"cjeo8cj53001f5oq8gz5zijfi","_id":"cjeo8cj5i002d5oq8d5h45oii"},{"post_id":"cjeo8cj5f00275oq8h7tygs37","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj5j002g5oq867npdwiy"},{"post_id":"cjeo8cj5a001x5oq8rb7bghgs","tag_id":"cjeo8cj5d00225oq8aseb4988","_id":"cjeo8cj5m002k5oq8x5ua4rid"},{"post_id":"cjeo8cj5h002a5oq8yxi01h0t","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj5n002n5oq8qctu3yk1"},{"post_id":"cjeo8cj5e00245oq866ayfvzy","tag_id":"cjeo8cj5h002b5oq81s2u214t","_id":"cjeo8cj5p002q5oq8j7a4nhty"},{"post_id":"cjeo8cj5k002h5oq8oc794q7u","tag_id":"cjeo8cj4c000b5oq8gs06m8fr","_id":"cjeo8cj5q002u5oq8q983a0e1"},{"post_id":"cjeo8cj5n002o5oq87zlpoehi","tag_id":"cjeo8cj5h002b5oq81s2u214t","_id":"cjeo8cj5s002x5oq827whl93f"},{"post_id":"cjeo8cj5i002e5oq8k4dliupt","tag_id":"cjeo8cj5l002j5oq8cxnkaw7u","_id":"cjeo8cj5u00315oq8lvi8wprb"},{"post_id":"cjeo8cj5p002r5oq8jvbpbc73","tag_id":"cjeo8cj5h002b5oq81s2u214t","_id":"cjeo8cj5w00355oq82lbok5yr"},{"post_id":"cjeo8cj5p002r5oq8jvbpbc73","tag_id":"cjeo8cj53001f5oq8gz5zijfi","_id":"cjeo8cj5x00385oq8cyl48ayd"},{"post_id":"cjeo8cj5q002v5oq841hdcdfo","tag_id":"cjeo8cj5h002b5oq81s2u214t","_id":"cjeo8cj5x003a5oq854knl4id"},{"post_id":"cjeo8cj5m002l5oq89f49ya2b","tag_id":"cjeo8cj5p002s5oq8v6ebpwur","_id":"cjeo8cj5y003e5oq8llmgyb8j"},{"post_id":"cjeo8cj5m002l5oq89f49ya2b","tag_id":"cjeo8cj5u00305oq8y1mymrv7","_id":"cjeo8cj5z003g5oq8w3u5fx69"},{"post_id":"cjeo8cj5m002l5oq89f49ya2b","tag_id":"cjeo8cj5x00375oq840rbn282","_id":"cjeo8cj5z003j5oq83go2whfo"},{"post_id":"cjeo8cj5t002y5oq80pohx4wz","tag_id":"cjeo8cj5y003c5oq8n4umedpz","_id":"cjeo8cj60003k5oq84ius5f0t"},{"post_id":"cjeo8cj5v00325oq8khkod7kw","tag_id":"cjeo8cj5z003h5oq8pz1louqz","_id":"cjeo8cj60003m5oq8kths7nn5"},{"post_id":"cjeo8cj5v00325oq8khkod7kw","tag_id":"cjeo8cj60003l5oq8nm4q4dr4","_id":"cjeo8cj60003n5oq8pjtb1tz5"}],"Tag":[{"name":"c语言","_id":"cjeo8cj4c000b5oq8gs06m8fr"},{"name":"工具/插件","_id":"cjeo8cj53001f5oq8gz5zijfi"},{"name":"c++","_id":"cjeo8cj5d00225oq8aseb4988"},{"name":"csharp","_id":"cjeo8cj5h002b5oq81s2u214t"},{"name":"python","_id":"cjeo8cj5l002j5oq8cxnkaw7u"},{"name":"linux","_id":"cjeo8cj5p002s5oq8v6ebpwur"},{"name":"windows","_id":"cjeo8cj5u00305oq8y1mymrv7"},{"name":"虚拟机","_id":"cjeo8cj5x00375oq840rbn282"},{"name":"生活随笔","_id":"cjeo8cj5y003c5oq8n4umedpz"},{"name":"web前端","_id":"cjeo8cj5z003h5oq8pz1louqz"},{"name":"开发工具/插件","_id":"cjeo8cj60003l5oq8nm4q4dr4"}]}}