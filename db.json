{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/分类标签.txt","path":"分类标签.txt","modified":1,"renderable":0},{"_id":"source/about/about.txt","path":"about/about.txt","modified":1,"renderable":0},{"_id":"themes/hexo-theme-pure/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/favicon_bak.png","path":"favicon_bak.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/README.md","path":"fonts/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/application.js","path":"js/application.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/application.min.js","path":"js/application.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/alipay.jpg","path":"images/donate/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/weipay.jpg","path":"images/donate/weipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/donate/weipayimg.png","path":"images/donate/weipayimg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/github-logo.png","path":"images/favatar/github-logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-pure/source/images/favatar/itellyou.cn-logo.png","path":"images/favatar/itellyou.cn-logo.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/分类标签.txt","hash":"a90e901072b528e4a150a8c18c871b5c4a066255","modified":1520598604528},{"_id":"themes/hexo-theme-pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1514656224000},{"_id":"themes/hexo-theme-pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1514656224000},{"_id":"themes/hexo-theme-pure/README.cn.md","hash":"0506cfc397e98c2b027c710122b580dae09907a5","modified":1514656224000},{"_id":"themes/hexo-theme-pure/README.md","hash":"89dd898e3bd98f063d1b9a2d6449d2692f1278fa","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_config.yml","hash":"ca564ea6ecb28e472aac4818d067e5f8f4bd88d3","modified":1520579645821},{"_id":"themes/hexo-theme-pure/_config.yml.example","hash":"f76edf7878e3209d51dd4cf3d7972c231de8ce6a","modified":1514656224000},{"_id":"themes/hexo-theme-pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1514656224000},{"_id":"source/404/index.md","hash":"d18cc3c0de0f8333c78239bbeecba816f08e0692","modified":1514656224000},{"_id":"source/about/about.txt","hash":"448789daa786b6ed311dae2fa0c1834746ad59ea","modified":1520509156249},{"_id":"source/about/index.md","hash":"32d7a658f6cc4ad9cb2f0b9e83f96afcaab6f6ad","modified":1520509139650},{"_id":"source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1514656224000},{"_id":"source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1514656224000},{"_id":"source/_data/links.yml","hash":"adbfe09df877548fdb0ea25e176dafa415839ea2","modified":1520584755730},{"_id":"source/_data/movies.yml","hash":"d6fe6f29e1d85a52d91e081235a0c6586290348d","modified":1520567720359},{"_id":"source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1514656224000},{"_id":"source/_posts/2015-04-07-HEXO博客.md","hash":"bfde2a6c292584e33610ed67b805fc80cc4c40ef","modified":1520585954905},{"_id":"source/_posts/2015-04-07-HUGO博客.md","hash":"210cab352671ecbbbb0439b96577b3e7fd2a0315","modified":1520489183035},{"_id":"source/_posts/2018-03-08-HEXO文档中带文件.md","hash":"dca406e3e139bbcaedaa6437e7cfcb2d37e8f3f2","modified":1520585931111},{"_id":"source/_posts/2018-03-09-C++引用的理解.md","hash":"9c0e7880d44c61f367f0fd76097c3aa0897769c7","modified":1520600604221},{"_id":"source/_posts/2018-03-09-Hexo-theme-pure主题books默认选择想读.md","hash":"877cc18a2c8d3853878b7a4d6c8ea00d93d52d9c","modified":1520585939342},{"_id":"source/_posts/2018-03-09-SBC大数据导入(代码).md","hash":"6bd8b660ad3eb4c74bcde5a0afbb4551df3e3b82","modified":1520597341529},{"_id":"source/_posts/2018-03-09-c1-进程空间,一维数组.md","hash":"f647eb8d3da0ec4d4e2cb46ae25380c543f00dd6","modified":1520601217684},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置.md","hash":"6c8e4c252fe48efe051ba07032b08e023658a053","modified":1520598598752},{"_id":"source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1520478316366},{"_id":"source/categories/index.md","hash":"51a628b8f20ee93b8477c76703db00eaa5016aaa","modified":1520478155636},{"_id":"source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1520486856280},{"_id":"themes/hexo-theme-pure/languages/default.yml","hash":"8da88cdd2728105aa5a64830d3e306cef29f7151","modified":1520579693821},{"_id":"themes/hexo-theme-pure/languages/en.yml","hash":"d911ec1d372ca8007a3c8afa30261bce162eeb82","modified":1514656224000},{"_id":"themes/hexo-theme-pure/languages/zh-TW.yml","hash":"5a33882faaedbbd1a8e631bc77597f8c2cf272c7","modified":1514656224000},{"_id":"themes/hexo-theme-pure/languages/zh-CN.yml","hash":"95d6858036d58a4400f14c36e61ed6e5b1b65e40","modified":1520508378404},{"_id":"themes/hexo-theme-pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/categories.ejs","hash":"2084974ba68f799216a8b216752f7fc87c693cc0","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/category.ejs","hash":"68632e8ac45088a929ca82b6cca8ba60323d6aac","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/layout.ejs","hash":"1cde63939b8370addb37b4f1be96e6dad258ed0d","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/tag.ejs","hash":"6e4e6660cf58beb3e5e2e52b59c51393e4796c36","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/tags.ejs","hash":"4c0b797a45cf238be367932927edc88599aa3255","modified":1514656224000},{"_id":"themes/hexo-theme-pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/favicon.png","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520393645414},{"_id":"themes/hexo-theme-pure/source/favicon_bak.png","hash":"79a9b4f6161f153208b02246c326eecf3095e79d","modified":1514656224000},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1514656224000},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1514656224000},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1514656224000},{"_id":"themes/hexo-theme-pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1514656224000},{"_id":"themes/hexo-theme-pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1514656224000},{"_id":"source/_posts/2018-03-08-HEXO文档中带文件/avatar.jpg","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520393645414},{"_id":"source/_posts/2018-03-09-c1-进程空间,一维数组/1.c","hash":"2726b133cb2e002e7bc072cc0277fd1852d35140","modified":1519645426982},{"_id":"source/_posts/2018-03-09-c1-进程空间,一维数组/1.jpg","hash":"8aaf0bf15112435aced6baf63b28a79b0cca665e","modified":1519645426984},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png","hash":"e2eb9f4687fcf27e18e21fc66c8fba6cfffb0db5","modified":1519645495150},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png","hash":"10e7e1165feeb3b847962f92cd3f640d8c09dfa6","modified":1519645495149},{"_id":"themes/hexo-theme-pure/_source/404/index.md","hash":"d18cc3c0de0f8333c78239bbeecba816f08e0692","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/about/index.md","hash":"f3f510a1cba26c11ecd95e33180e1e35a6784132","modified":1520418598419},{"_id":"themes/hexo-theme-pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1514656224000},{"_id":"themes/hexo-theme-pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_common/head.ejs","hash":"edf1798f619f247d49e260da7d67492bf59bd2c2","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_common/header.ejs","hash":"595c60cce58ee0ac08c805ef2b822ba835926d2c","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_common/plugin.ejs","hash":"90b50b052daf24394e84f747c5ebc639752e9731","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_common/script.ejs","hash":"5963fdc39a925c6961c7c360776f09be7ba81c43","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-book.ejs","hash":"9a913922c4ad34edfd8fc75989970ffcb9761ead","modified":1520580964713},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/article.ejs","hash":"11b36cdc807ec20470828385b4a590ffbf7ae1d9","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/item-post.ejs","hash":"e2126d1cf62861b67c3a9946e2e3e47c84174a87","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/pagination.ejs","hash":"ce1492c39a9d73c6dbcc3993e705a2526bbab79b","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/sidebar-about.ejs","hash":"e10ea0176ba87e64888234bafedc01c92544352c","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/douban.ejs","hash":"792a1a9ac0eff0a5c4f22e394b37c8585027e1eb","modified":1520581116597},{"_id":"themes/hexo-theme-pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/pv.ejs","hash":"bd5dbd41017286379c6549405b450227ee4645bc","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/repository.ejs","hash":"234e6a9d8b129dc19e916cb9f927a27b04758180","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_widget/board.ejs","hash":"9d8ade7163bf6c7059e67b3320a33d64fcc5afde","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.eot","hash":"6c0c276a9ce023d569208e69e642583562745810","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.ttf","hash":"c27cba6f2d2710c677f79fbe59480ec0c3535875","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.woff","hash":"9e4123792f885b8e61c916b0a8f5e6176f916945","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/images/avatar.jpg","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520393645414},{"_id":"themes/hexo-theme-pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/js/application.js","hash":"cd1b8d06880ab1b80d45c8f53b53a23b6b8fb7ac","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/js/application.min.js","hash":"e5ae432339928ee0166ec444bcc5e12065944f3d","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/js/plugin.min.js","hash":"7970a38501066965aae8272299ccd0bcb1614d30","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/comment.ejs","hash":"a4f8b53225265b0370824eda6b44d4427c98006d","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/copyright.ejs","hash":"a9d3d05428e5844a07706c7fcfeb842e44a36a64","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/donate.ejs","hash":"78136b1fa31e2be32beddfc308f6b90f85cdacbf","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/nav.ejs","hash":"2146cc9fcb2e135815acf0d0b5ad2c183f8ad58f","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/pv.ejs","hash":"7d63de4625310f9f619ac31ddd492c79d6d02cff","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/script.ejs","hash":"c5aa37346d973437d0a693f8dd345a0b87edfe6f","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"dee9c2adc0df37c7e1edb617ba92983eee3f3c8e","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/disqus.ejs","hash":"b30ced7d02e63c64227139aa4b99286400d7bcea","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/gitment.ejs","hash":"09e66c8bfd1cc0507a0da619f56101423b9e653a","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/livere.ejs","hash":"c951b2fac4e143c0a2fb4fd3369307f23cfe2687","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/script.ejs","hash":"ee1cf9c35e51d21a170a7ac5f43e63c2bf777448","modified":1514656224000},{"_id":"themes/hexo-theme-pure/layout/_script/_comment/youyan.ejs","hash":"92d897be24e8c520c5a3f8903c542892e2b30a9a","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/css/style.css","hash":"0fc5160d0effd0d5edb36a25220e7ef8e631c3f9","modified":1520594327950},{"_id":"themes/hexo-theme-pure/source/fonts/iconfont.svg","hash":"cfb4b76ae705fcc3e279104bec956f9a398f8518","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/images/donate/alipay.jpg","hash":"8a5b2c72ddb7396adb709771a35ef50b8cf5485e","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/images/donate/alipayimg.png","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520393645414},{"_id":"themes/hexo-theme-pure/source/images/donate/weipay.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/images/donate/weipayimg.png","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520393645414},{"_id":"themes/hexo-theme-pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/images/favatar/github-logo.png","hash":"0f4b8ec7206eea1e2582e79ab3e236c89ad81c43","modified":1520584481282},{"_id":"themes/hexo-theme-pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1514656224000},{"_id":"themes/hexo-theme-pure/source/images/favatar/itellyou.cn-logo.png","hash":"ea4db346a8c9dbcdb378648534fc375ad48a234e","modified":1520583753502},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png","hash":"45182eb2bf9b4bb31d7391388ef5556be7d03f12","modified":1519645495153},{"_id":"themes/hexo-theme-pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1514656224000},{"_id":"public/baidusitemap.xml","hash":"e173a140bc9264d0fd27e12d13697ede2ffc6056","modified":1520601270215},{"_id":"public/atom.xml","hash":"d33e9100d51f6a581c2e15d0554faad8a96fede3","modified":1520601270356},{"_id":"public/content.json","hash":"1366c9e203b8401167874e779c31a8bba362dda9","modified":1520601270362},{"_id":"public/sitemap.xml","hash":"55f9e5a016a5958f4dd00a76adc3b7aab3b269d7","modified":1520601270362},{"_id":"public/404.html","hash":"ae703376b9655b17f2a45c72311ab4e4d80c173e","modified":1520601270373},{"_id":"public/books/index.html","hash":"ea9848ca1d019af8fcb34fbfeb5a2307eef1abfd","modified":1520601270377},{"_id":"public/about/index.html","hash":"c125b3f442bd511e47d48a77e4fc9a3cd1596684","modified":1520601270377},{"_id":"public/links/index.html","hash":"85a1493ec77a131a9819d626ded286c7912d1afc","modified":1520601270378},{"_id":"public/repository/index.html","hash":"e3983ba1fa96b1649f884620410ed9b0df2898aa","modified":1520601270378},{"_id":"public/categories/index.html","hash":"e7fcc72f8a7208c11e8384df5e62982c8754f370","modified":1520601270378},{"_id":"public/tags/index.html","hash":"7bf0fa76e04d4b4b32ee36061b278ae01a4630b5","modified":1520601270378},{"_id":"public/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/index.html","hash":"a0c70a132e733d778749f950dec9407c70a851d6","modified":1520601270378},{"_id":"public/2013/07/13/2015-04-07-HEXO博客/index.html","hash":"ce87330386cc398a9cd3a1dd222e543a46f3867f","modified":1520601270378},{"_id":"public/2013/07/13/2015-04-07-HUGO博客/index.html","hash":"7f3f7cc0e1ef8d453aca848642804664bf0daad6","modified":1520601270378},{"_id":"public/2013/07/13/2018-03-08-HEXO文档中带文件/index.html","hash":"4d1b46ef8043163402cac69652a2ef561f0b610c","modified":1520601270378},{"_id":"public/2013/07/13/2018-03-09-C++引用的理解/index.html","hash":"05baac32ac8b929bc77ffef0145394e442e380ba","modified":1520601270378},{"_id":"public/2013/07/13/2018-03-09-Hexo-theme-pure主题books默认选择想读/index.html","hash":"58d3a62bb7960627c679153b541cc8a01d4f40f0","modified":1520601270378},{"_id":"public/2013/07/13/2018-03-09-SBC大数据导入(代码)/index.html","hash":"a8ac6b63c51a68b3ed66707d66a7620160396ad8","modified":1520601270378},{"_id":"public/archives/index.html","hash":"c60fcb25eb52d1117fd096d565b314d32d5ac645","modified":1520601270378},{"_id":"public/archives/2013/index.html","hash":"16125f8e6ec98a21d100e5c3c0e1eabc604d74bc","modified":1520601270378},{"_id":"public/archives/2013/07/index.html","hash":"3585444f540d1b14f13943089864e186aef512cb","modified":1520601270378},{"_id":"public/archives/2018/index.html","hash":"abef6bc195e17238b85c6a97511d8a876c48e744","modified":1520601270379},{"_id":"public/archives/2018/03/index.html","hash":"5dbca2e0a93767369a421c612617cd84aaf73d92","modified":1520601270379},{"_id":"public/categories/技术/index.html","hash":"deb7c5847288908b757df9a1fc75b5b385d38f8d","modified":1520601270379},{"_id":"public/index.html","hash":"d10e66bbdf386f14f66d8cc65543ec6aecd3c8e9","modified":1520601270379},{"_id":"public/tags/工具-插件/index.html","hash":"ce0352517018c8152808afe3dbec7c8a6234d717","modified":1520601270379},{"_id":"public/tags/c-c/index.html","hash":"06e26377a6f1cdcb39967da97832c86b1bdafa11","modified":1520601270379},{"_id":"public/tags/csharp-net/index.html","hash":"25c5b3dab72e4b9dad6bf0780784d4adb6de0890","modified":1520601270379},{"_id":"public/tags/linux/index.html","hash":"8a0f9c860328a590eeebbaadc90696bcc5a59698","modified":1520601270379},{"_id":"public/tags/windows/index.html","hash":"b4c5863bfe5aacc7ad26de5d50707ff240796413","modified":1520601270379},{"_id":"public/tags/虚拟机/index.html","hash":"a5455abc8f21ce31a556b71b19a7e1f6714d1d07","modified":1520601270379},{"_id":"public/2018/03/09/2018-03-09-c1-进程空间,一维数组/index.html","hash":"89e8f2f4e432f19033ef2dfd3fb39ccfc7fbf62c","modified":1520601270412},{"_id":"public/分类标签.txt","hash":"a90e901072b528e4a150a8c18c871b5c4a066255","modified":1520601270416},{"_id":"public/about/about.txt","hash":"448789daa786b6ed311dae2fa0c1834746ad59ea","modified":1520601270416},{"_id":"public/favicon_bak.png","hash":"79a9b4f6161f153208b02246c326eecf3095e79d","modified":1520601270416},{"_id":"public/fonts/iconfont.eot","hash":"6c0c276a9ce023d569208e69e642583562745810","modified":1520601270416},{"_id":"public/fonts/iconfont.ttf","hash":"c27cba6f2d2710c677f79fbe59480ec0c3535875","modified":1520601270416},{"_id":"public/fonts/iconfont.woff","hash":"9e4123792f885b8e61c916b0a8f5e6176f916945","modified":1520601270416},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1520601270416},{"_id":"public/images/avatar.jpg","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520601270416},{"_id":"public/images/donate/alipay.jpg","hash":"8a5b2c72ddb7396adb709771a35ef50b8cf5485e","modified":1520601270416},{"_id":"public/favicon.png","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520601270416},{"_id":"public/images/donate/weipay.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1520601270416},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1520601270416},{"_id":"public/images/favatar/github-logo.png","hash":"0f4b8ec7206eea1e2582e79ab3e236c89ad81c43","modified":1520601270416},{"_id":"public/images/donate/weipayimg.png","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520601270416},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1520601270416},{"_id":"public/images/favatar/itellyou.cn-logo.png","hash":"ea4db346a8c9dbcdb378648534fc375ad48a234e","modified":1520601270417},{"_id":"public/2013/07/13/2018-03-08-HEXO文档中带文件/avatar.jpg","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520601270417},{"_id":"public/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png","hash":"e2eb9f4687fcf27e18e21fc66c8fba6cfffb0db5","modified":1520601270417},{"_id":"public/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png","hash":"10e7e1165feeb3b847962f92cd3f640d8c09dfa6","modified":1520601270417},{"_id":"public/images/donate/alipayimg.png","hash":"c4ec1c98732cacdad0480761c99265a421ae3466","modified":1520601270417},{"_id":"public/2018/03/09/2018-03-09-c1-进程空间,一维数组/1.c","hash":"2726b133cb2e002e7bc072cc0277fd1852d35140","modified":1520601270417},{"_id":"public/2018/03/09/2018-03-09-c1-进程空间,一维数组/1.jpg","hash":"8aaf0bf15112435aced6baf63b28a79b0cca665e","modified":1520601270417},{"_id":"public/fonts/README.html","hash":"43b6265aeccff3f9d495e2b44d07b249a2197bd7","modified":1520601270466},{"_id":"public/js/application.js","hash":"cd1b8d06880ab1b80d45c8f53b53a23b6b8fb7ac","modified":1520601270466},{"_id":"public/js/application.min.js","hash":"e5ae432339928ee0166ec444bcc5e12065944f3d","modified":1520601270466},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1520601270466},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1520601270466},{"_id":"public/js/plugin.min.js","hash":"7970a38501066965aae8272299ccd0bcb1614d30","modified":1520601270466},{"_id":"public/css/style.css","hash":"0fc5160d0effd0d5edb36a25220e7ef8e631c3f9","modified":1520601270466},{"_id":"public/fonts/iconfont.svg","hash":"cfb4b76ae705fcc3e279104bec956f9a398f8518","modified":1520601270466},{"_id":"public/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png","hash":"45182eb2bf9b4bb31d7391388ef5556be7d03f12","modified":1520601270479}],"Category":[{"name":"技术","_id":"cjejyqgrd0004d0q8zw5cm6xb"}],"Data":[{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}},{"_id":"movies","data":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}},{"_id":"links","data":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://blog.cofess.com\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://blog.cofess.com\" homePageName=\"回到我的主页\"></script>\n","date":"2018-03-07T06:29:22.191Z","updated":"2017-12-30T17:50:24.000Z","path":"/404.html","layout":"page","_id":"cjejyqgr20000d0q8p3w9pbug","content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://blog.cofess.com\" homepagename=\"回到我的主页\"></script>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://blog.cofess.com\" homepagename=\"回到我的主页\"></script>\n"},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---","date":"2018-03-07T06:30:17.354Z","updated":"2017-12-30T17:50:24.000Z","path":"books/index.html","_id":"cjejyqgr90002d0q84jyzf6ns","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"关于/留言","layout":"about","comments":1,"sidebar":"custom","_content":"\n```csharp\n{\n  name: '阿兴',\n  address: '广东省广州市',\n  QQ: 1069784176\n  github: 'https://github.com/1069784176',\n  blog: 'https://1069784176.github.io',\n  email: '15692413487@163.com',\n  description: 'hahaha...',\n\n  skills: [\n    ['C', 'C++', 'C#', '.Net', 'Sql', 'Js'],\n    ['Linux', 'Qt'],\n    ['网站开发', '游戏服务器'],\n    ['数据库'], \n  ]\n}\n```\n\n\n\n\n ","source":"about/index.md","raw":"---\ntitle: 关于/留言\nlayout: about\ncomments: true\nsidebar: custom\n---\n\n```csharp\n{\n  name: '阿兴',\n  address: '广东省广州市',\n  QQ: 1069784176\n  github: 'https://github.com/1069784176',\n  blog: 'https://1069784176.github.io',\n  email: '15692413487@163.com',\n  description: 'hahaha...',\n\n  skills: [\n    ['C', 'C++', 'C#', '.Net', 'Sql', 'Js'],\n    ['Linux', 'Qt'],\n    ['网站开发', '游戏服务器'],\n    ['数据库'], \n  ]\n}\n```\n\n\n\n\n ","date":"2018-03-08T11:38:59.651Z","updated":"2018-03-08T11:38:59.650Z","path":"about/index.html","_id":"cjejyqgrf0006d0q8uykqycdj","content":"<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'阿兴'</span>,</span><br><span class=\"line\">  address: <span class=\"string\">'广东省广州市'</span>,</span><br><span class=\"line\">  QQ: <span class=\"number\">1069784176</span></span><br><span class=\"line\">  github: <span class=\"string\">'https://github.com/1069784176'</span>,</span><br><span class=\"line\">  blog: <span class=\"string\">'https://1069784176.github.io'</span>,</span><br><span class=\"line\">  email: <span class=\"string\">'15692413487@163.com'</span>,</span><br><span class=\"line\">  description: <span class=\"string\">'hahaha...'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  skills: [</span><br><span class=\"line\">    [<span class=\"meta\">'C', 'C++', 'C#', '.Net', 'Sql', 'Js'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'Linux', 'Qt'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'网站开发', '游戏服务器'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'数据库'</span>], </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'阿兴'</span>,</span><br><span class=\"line\">  address: <span class=\"string\">'广东省广州市'</span>,</span><br><span class=\"line\">  QQ: <span class=\"number\">1069784176</span></span><br><span class=\"line\">  github: <span class=\"string\">'https://github.com/1069784176'</span>,</span><br><span class=\"line\">  blog: <span class=\"string\">'https://1069784176.github.io'</span>,</span><br><span class=\"line\">  email: <span class=\"string\">'15692413487@163.com'</span>,</span><br><span class=\"line\">  description: <span class=\"string\">'hahaha...'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  skills: [</span><br><span class=\"line\">    [<span class=\"meta\">'C', 'C++', 'C#', '.Net', 'Sql', 'Js'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'Linux', 'Qt'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'网站开发', '游戏服务器'</span>],</span><br><span class=\"line\">    [<span class=\"meta\">'数据库'</span>], </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2018-03-07T07:45:27.558Z","updated":"2017-12-30T17:50:24.000Z","path":"links/index.html","_id":"cjejyqgri0008d0q8yw9ovolj","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2018-03-08T03:05:16.367Z","updated":"2018-03-08T03:05:16.366Z","path":"repository/index.html","_id":"cjejyqgrk000ad0q8ghf6jhl5","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"分类","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\n#HUGO 随笔\n---\n","date":"2018-03-08T03:02:35.636Z","updated":"2018-03-08T03:02:35.636Z","path":"categories/index.html","_id":"cjejyqgrp000fd0q8kb6lypqb","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\n---\n","date":"2018-03-08T05:27:36.280Z","updated":"2018-03-08T05:27:36.280Z","path":"tags/index.html","_id":"cjejyqgrt000id0q8pmi8xmoo","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""}],"Post":[{"title":"HEXO博客","date":"2013-07-13T12:46:25.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n     \n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/2015-04-07-HEXO博客.md","raw":"---\ntitle: HEXO博客\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: 工具/插件\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n     \n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"2015-04-07-HEXO博客","published":1,"updated":"2018-03-09T08:59:14.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjejyqgr50001d0q8j89lvbpo","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"HUGO博客","date":"2013-07-13T12:46:25.000Z","_content":"\n## Step 1.配置Hugo：\n\n在github[下载](https://github.com/gohugoio/hugo/releases)hugo release版本  [<font color=red>(点击进入下载页)</font>](https://github.com/gohugoio/hugo/releases)\n将hugo.exe路径配置到环境变量\n有想法的朋友也可以下载源码编译\n\n\n## Step 2.生成站点：\n使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\n\n```\n$ hugo new site /path/to/site\n```\n$ cd /path/to/site\n站点目录结构：\n\n  * ▸ archetypes/\n  * ▸ content/\n  * ▸ layouts/\n  * ▸ static/\n    config.toml\n\n\n## Step 3.创建文章：\n创建一个 about 页面,使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\n\n```\n$ hugo new about.md\n```\nabout.md 自动生成到了 content/about.md ，打开 about.md 看下：\n\n```\n+++\ndate = \"2015-10-25T08:36:54-07:00\"\ndraft = true\ntitle = \"about\"\n+++\n```\n\n正文内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 --- 标记）或者 JSON 格式。\n\n创建第一篇文章，放到 post 目录，方便之后生成聚合页面。\n\n```\n$ hugo new post/first.md\n```\n\n打开编辑 post/first.md ：\n\n```\n---\ndate: \"2015-10-25T08:36:54-07:00\"\ntitle: \"first\"\n---\n```\n\n## Step 4.创建 themes 目录：\n```\n$ cd themes\n$ git clone https://github.com/aubm/hugo-code-editor-theme.git\n```\n运行Hugo\n在你的站点根目录执行 Hugo 命令进行调试：\n\n```\n$ hugo server --theme=hugo-code-editor-theme --buildDrafts\n```\n（注明：v0.15 版本之后，不再需要使用 --watchydeh 参数了）\n\n浏览器里打开： http://localhost:1313\n\n\n## Step 5.部署：\n假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：1069784176.github.io （1069784176替换为你的github用户名）。\n\n在站点根目录执行 Hugo 命令生成最终页面：\n```\n$ hugo --theme=hugo-code-editor-theme --baseUrl=\"https://1069784176.github.io\"\n```\n<font color=red>(注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成)</font>\n\n如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。\n\n最后就能通过https://1069784176.github.io/ 浏览了\n\n\n## Step 6.帮助：\n\n* hugo中文文档: [http://www.gohugo.org/](http://www.gohugo.org/)\n* hugo官网: [http://gohugo.io/](http://gohugo.io/)\n\n\n","source":"_posts/2015-04-07-HUGO博客.md","raw":"---\ntitle: HUGO博客\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: 工具/插件\n---\n\n## Step 1.配置Hugo：\n\n在github[下载](https://github.com/gohugoio/hugo/releases)hugo release版本  [<font color=red>(点击进入下载页)</font>](https://github.com/gohugoio/hugo/releases)\n将hugo.exe路径配置到环境变量\n有想法的朋友也可以下载源码编译\n\n\n## Step 2.生成站点：\n使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\n\n```\n$ hugo new site /path/to/site\n```\n$ cd /path/to/site\n站点目录结构：\n\n  * ▸ archetypes/\n  * ▸ content/\n  * ▸ layouts/\n  * ▸ static/\n    config.toml\n\n\n## Step 3.创建文章：\n创建一个 about 页面,使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：\n\n```\n$ hugo new about.md\n```\nabout.md 自动生成到了 content/about.md ，打开 about.md 看下：\n\n```\n+++\ndate = \"2015-10-25T08:36:54-07:00\"\ndraft = true\ntitle = \"about\"\n+++\n```\n\n正文内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 --- 标记）或者 JSON 格式。\n\n创建第一篇文章，放到 post 目录，方便之后生成聚合页面。\n\n```\n$ hugo new post/first.md\n```\n\n打开编辑 post/first.md ：\n\n```\n---\ndate: \"2015-10-25T08:36:54-07:00\"\ntitle: \"first\"\n---\n```\n\n## Step 4.创建 themes 目录：\n```\n$ cd themes\n$ git clone https://github.com/aubm/hugo-code-editor-theme.git\n```\n运行Hugo\n在你的站点根目录执行 Hugo 命令进行调试：\n\n```\n$ hugo server --theme=hugo-code-editor-theme --buildDrafts\n```\n（注明：v0.15 版本之后，不再需要使用 --watchydeh 参数了）\n\n浏览器里打开： http://localhost:1313\n\n\n## Step 5.部署：\n假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：1069784176.github.io （1069784176替换为你的github用户名）。\n\n在站点根目录执行 Hugo 命令生成最终页面：\n```\n$ hugo --theme=hugo-code-editor-theme --baseUrl=\"https://1069784176.github.io\"\n```\n<font color=red>(注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成)</font>\n\n如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。\n\n最后就能通过https://1069784176.github.io/ 浏览了\n\n\n## Step 6.帮助：\n\n* hugo中文文档: [http://www.gohugo.org/](http://www.gohugo.org/)\n* hugo官网: [http://gohugo.io/](http://gohugo.io/)\n\n\n","slug":"2015-04-07-HUGO博客","published":1,"updated":"2018-03-08T06:06:23.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjejyqgra0003d0q8jnaulu0q","content":"<h2 id=\"Step-1-配置Hugo：\"><a href=\"#Step-1-配置Hugo：\" class=\"headerlink\" title=\"Step 1.配置Hugo：\"></a>Step 1.配置Hugo：</h2><p>在github<a href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\" rel=\"noopener\">下载</a>hugo release版本  <a href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\" rel=\"noopener\"><font color=\"red\">(点击进入下载页)</font></a><br>将hugo.exe路径配置到环境变量<br>有想法的朋友也可以下载源码编译</p>\n<h2 id=\"Step-2-生成站点：\"><a href=\"#Step-2-生成站点：\" class=\"headerlink\" title=\"Step 2.生成站点：\"></a>Step 2.生成站点：</h2><p>使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new site /path/to/site</span><br></pre></td></tr></table></figure>\n<p>$ cd /path/to/site<br>站点目录结构：</p>\n<ul>\n<li>▸ archetypes/</li>\n<li>▸ content/</li>\n<li>▸ layouts/</li>\n<li>▸ static/<br>config.toml</li>\n</ul>\n<h2 id=\"Step-3-创建文章：\"><a href=\"#Step-3-创建文章：\" class=\"headerlink\" title=\"Step 3.创建文章：\"></a>Step 3.创建文章：</h2><p>创建一个 about 页面,使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new about.md</span><br></pre></td></tr></table></figure>\n<p>about.md 自动生成到了 content/about.md ，打开 about.md 看下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+++</span><br><span class=\"line\">date = &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class=\"line\">draft = true</span><br><span class=\"line\">title = &quot;about&quot;</span><br><span class=\"line\">+++</span><br></pre></td></tr></table></figure>\n<p>正文内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 — 标记）或者 JSON 格式。</p>\n<p>创建第一篇文章，放到 post 目录，方便之后生成聚合页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new post/first.md</span><br></pre></td></tr></table></figure>\n<p>打开编辑 post/first.md ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">date: &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class=\"line\">title: &quot;first&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-4-创建-themes-目录：\"><a href=\"#Step-4-创建-themes-目录：\" class=\"headerlink\" title=\"Step 4.创建 themes 目录：\"></a>Step 4.创建 themes 目录：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd themes</span><br><span class=\"line\">$ git clone https://github.com/aubm/hugo-code-editor-theme.git</span><br></pre></td></tr></table></figure>\n<p>运行Hugo<br>在你的站点根目录执行 Hugo 命令进行调试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo server --theme=hugo-code-editor-theme --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>（注明：v0.15 版本之后，不再需要使用 –watchydeh 参数了）</p>\n<p>浏览器里打开： <a href=\"http://localhost:1313\" target=\"_blank\" rel=\"noopener\">http://localhost:1313</a></p>\n<h2 id=\"Step-5-部署：\"><a href=\"#Step-5-部署：\" class=\"headerlink\" title=\"Step 5.部署：\"></a>Step 5.部署：</h2><p>假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：1069784176.github.io （1069784176替换为你的github用户名）。</p>\n<p>在站点根目录执行 Hugo 命令生成最终页面：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo --theme=hugo-code-editor-theme --baseUrl=&quot;https://1069784176.github.io&quot;</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">(注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成)</font>\n\n<p>如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。</p>\n<p>最后就能通过<a href=\"https://1069784176.github.io/\">https://1069784176.github.io/</a> 浏览了</p>\n<h2 id=\"Step-6-帮助：\"><a href=\"#Step-6-帮助：\" class=\"headerlink\" title=\"Step 6.帮助：\"></a>Step 6.帮助：</h2><ul>\n<li>hugo中文文档: <a href=\"http://www.gohugo.org/\" target=\"_blank\" rel=\"noopener\">http://www.gohugo.org/</a></li>\n<li>hugo官网: <a href=\"http://gohugo.io/\" target=\"_blank\" rel=\"noopener\">http://gohugo.io/</a></li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"Step-1-配置Hugo：\"><a href=\"#Step-1-配置Hugo：\" class=\"headerlink\" title=\"Step 1.配置Hugo：\"></a>Step 1.配置Hugo：</h2><p>在github<a href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\" rel=\"noopener\">下载</a>hugo release版本  <a href=\"https://github.com/gohugoio/hugo/releases\" target=\"_blank\" rel=\"noopener\"><font color=\"red\">(点击进入下载页)</font></a><br>将hugo.exe路径配置到环境变量<br>有想法的朋友也可以下载源码编译</p>\n<h2 id=\"Step-2-生成站点：\"><a href=\"#Step-2-生成站点：\" class=\"headerlink\" title=\"Step 2.生成站点：\"></a>Step 2.生成站点：</h2><p>使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new site /path/to/site</span><br></pre></td></tr></table></figure>\n<p>$ cd /path/to/site<br>站点目录结构：</p>\n<ul>\n<li>▸ archetypes/</li>\n<li>▸ content/</li>\n<li>▸ layouts/</li>\n<li>▸ static/<br>config.toml</li>\n</ul>\n<h2 id=\"Step-3-创建文章：\"><a href=\"#Step-3-创建文章：\" class=\"headerlink\" title=\"Step 3.创建文章：\"></a>Step 3.创建文章：</h2><p>创建一个 about 页面,使用Hugo快速生成站点，比如希望生成到 /path/to/site 路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new about.md</span><br></pre></td></tr></table></figure>\n<p>about.md 自动生成到了 content/about.md ，打开 about.md 看下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+++</span><br><span class=\"line\">date = &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class=\"line\">draft = true</span><br><span class=\"line\">title = &quot;about&quot;</span><br><span class=\"line\">+++</span><br></pre></td></tr></table></figure>\n<p>正文内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 — 标记）或者 JSON 格式。</p>\n<p>创建第一篇文章，放到 post 目录，方便之后生成聚合页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo new post/first.md</span><br></pre></td></tr></table></figure>\n<p>打开编辑 post/first.md ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">date: &quot;2015-10-25T08:36:54-07:00&quot;</span><br><span class=\"line\">title: &quot;first&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"Step-4-创建-themes-目录：\"><a href=\"#Step-4-创建-themes-目录：\" class=\"headerlink\" title=\"Step 4.创建 themes 目录：\"></a>Step 4.创建 themes 目录：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd themes</span><br><span class=\"line\">$ git clone https://github.com/aubm/hugo-code-editor-theme.git</span><br></pre></td></tr></table></figure>\n<p>运行Hugo<br>在你的站点根目录执行 Hugo 命令进行调试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo server --theme=hugo-code-editor-theme --buildDrafts</span><br></pre></td></tr></table></figure>\n<p>（注明：v0.15 版本之后，不再需要使用 –watchydeh 参数了）</p>\n<p>浏览器里打开： <a href=\"http://localhost:1313\" target=\"_blank\" rel=\"noopener\">http://localhost:1313</a></p>\n<h2 id=\"Step-5-部署：\"><a href=\"#Step-5-部署：\" class=\"headerlink\" title=\"Step 5.部署：\"></a>Step 5.部署：</h2><p>假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：1069784176.github.io （1069784176替换为你的github用户名）。</p>\n<p>在站点根目录执行 Hugo 命令生成最终页面：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hugo --theme=hugo-code-editor-theme --baseUrl=&quot;https://1069784176.github.io&quot;</span><br></pre></td></tr></table></figure></p>\n<font color=\"red\">(注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 draft=true 再重新生成)</font>\n\n<p>如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。</p>\n<p>最后就能通过<a href=\"https://1069784176.github.io/\">https://1069784176.github.io/</a> 浏览了</p>\n<h2 id=\"Step-6-帮助：\"><a href=\"#Step-6-帮助：\" class=\"headerlink\" title=\"Step 6.帮助：\"></a>Step 6.帮助：</h2><ul>\n<li>hugo中文文档: <a href=\"http://www.gohugo.org/\" target=\"_blank\" rel=\"noopener\">http://www.gohugo.org/</a></li>\n<li>hugo官网: <a href=\"http://gohugo.io/\" target=\"_blank\" rel=\"noopener\">http://gohugo.io/</a></li>\n</ul>\n"},{"title":"HEXO文档中带文件","date":"2013-07-13T12:46:25.000Z","_content":"\n### 图片：\n\n<img src=\"avatar.jpg\" heigh=100 width=100 center/>\n\n ![avatar](avatar.jpg)\n","source":"_posts/2018-03-08-HEXO文档中带文件.md","raw":"---\ntitle: HEXO文档中带文件\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: 工具/插件\n---\n\n### 图片：\n\n<img src=\"avatar.jpg\" heigh=100 width=100 center/>\n\n ![avatar](avatar.jpg)\n","slug":"2018-03-08-HEXO文档中带文件","published":1,"updated":"2018-03-09T08:58:51.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjejyqgrg0007d0q8tism60xp","content":"<h3 id=\"图片：\"><a href=\"#图片：\" class=\"headerlink\" title=\"图片：\"></a>图片：</h3><p><img src=\"/2013/07/13/2018-03-08-HEXO文档中带文件/avatar.jpg\" heigh=\"100\" width=\"100\" center=\"\"></p>\n<p> <img src=\"/2013/07/13/2018-03-08-HEXO文档中带文件/avatar.jpg\" alt=\"avatar\"></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"图片：\"><a href=\"#图片：\" class=\"headerlink\" title=\"图片：\"></a>图片：</h3><p><img src=\"/2013/07/13/2018-03-08-HEXO文档中带文件/avatar.jpg\" heigh=\"100\" width=\"100\" center=\"\"></p>\n<p> <img src=\"/2013/07/13/2018-03-08-HEXO文档中带文件/avatar.jpg\" alt=\"avatar\"></p>\n"},{"title":"C++引用的理解","date":"2013-07-13T12:46:25.000Z","_content":"\n### 1.定义:\n引用引入了对象的一个同义词.定义引用的表示方法与定义指针相似,只是用&代替了*.引用（reference）是c++对c语言的重要扩充.引用就是某\n一变量（目标）的一个别名,对引用的操作与对变量直接操作完全一样.其格式为:类型 &引用变量名 = 已定义过的变量名.\n\n***\n\n### 2.特点:\n1. 一个变量可取多个别名.\n\n2. 引用必须初始化.\n\n3. 引用只能在初始化的时候引用一次 ,不能更改为转而引用其他变量.\n\n***\n\n### 3.code:\n#### 3.1.基础引用:\n\n```c++\nvoid TestReference1 ()  \n{  \n     int a = 1;  \n     int& b = a;  \n  \n     cout<<\"a:address->\" <<&a<< endl;  \n     cout<<\"b:address->\" <<&b<< endl;  \n  \n     a = 2;  \n     b = 3;  \n     int& c = b;// 引用一个引用变量,别名的别名  \n     c = 4;  \n}\n```\n\n#### 3.2.const引用:\n\n```c++\nvoid TestReference2 ()  \n{  \n     int d1 = 4;  \n     const int & d2 = d1;  \n     d1 = 5;//d1改变,d2的值也会改变.  \n     //d2 = 6;//不能给常量（不能被修改的量）赋值.  \n  \n     const int d3 = 1;  \n     const int & d4 = d3;  \n     //int&d5 = d3;  \n     const int & d6 = 5;//常量具有常性,只有常引用可以引用常量  \n  \n     double d7 = 1.1;  \n     //int& d8 = d7;//d7是double类型,d8是int,d7赋值给 d8时要生成一个临时变量  \n                   //也就是说d8引用的是这个带有常性的临时变量,所以不能赋值.  \n     const int& d9 = d7;  \n}  \n```\n\n***\n\n### 4.引用作参数:\n```c++\n1.【值传递】如果形参为非引用的传值方式,则生成局部临时变量接收实参的值  \nvoid Swap (int left, int right) //值传递的方式无法实现交换,因为传参时对于参数left和right拷贝一临时副本,交换的是副本值,因为其是临时变量函数退出,变量销 {                                //毁,并不会影响外部left和right的值.  \n     int temp = left;  \n     left = right ;  \n     right = temp ;  \n}  \n  \n2.【引用传递】如果形参为引用类型,则形参是实参的别名.  \nvoid Swap (int& left, int& right)//使用引用的话,不做临时拷贝,&的使用说明此处只是原参数的另一个名字而已,所以修改时直接在原参数的基础上修改变量值.  \n{  \n     int temp = left;  \n     right = left ;  \n     left = temp ;  \n}  \n  \n3.【指针传递】  \nvoid Swap (int* pLeft, int* pRight)//传入的是地址,因为地址是唯一的,所以指针通过地址的访问进而可修改其内容.  \n{  \n     int temp = *pLeft;  \n     *pLeft = *pRight;  \n     *pRight = temp;  \n}  \n```\n\n***\n\n### 5.注意:\n#### 5.1.不要返回一个临时变量的引用.\n\n#### 5.2. 如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.\n\n#### 5.3.引用和指针的区别和联系（笔试热点）\n\n1. 引用必须指向有效的变量,指针可以为空.\n2. sizeof指针对象和引用对象的意义不一样.sizeof引用得到的是所指向的变量的大小,而sizeof指针是对象地址的大小.\n3. 指针和引用自增(++)自减(--)意义不一样.\n4. 相对而言,引用比指针更安全.\n\n***\n\n### 6.引用和指针的区别和联系:\n#### 6.1.不同点:\n1. 指针是一个实体,而引用仅是个别名;\n2. 引用使用时无需解引用(*),指针需要解引用;\n3. 引用只能在定义时被初始化一次,之后不可变;指针可变;\n4. 引用没有 const,指针有 const;const修饰的指针不可变;\n5. 引用不能为空,指针可以为空;\n6. \"sizeof 引用\"得到的是所指向的变量(对象)的大小,而\"sizeof 指针\"得到的是指针本身(所指向的变量或对象的地址)的大小;\n7. 指针和引用的自增(++)运算意义不一样;\n8. 从内存分配上看:程序为指针变量分配内存区域,而引用不需要分配内存区域.\n\n#### 6.2.相同点:\n1. 两者都是地址的概念,指针指向一块儿内存,其内容为所指内存的地址;引用是某块儿内存的别名\n\n***\n\n### 7.const在C和C++中的含义(笔试热点):\n#### 7.1.C中的const,功能比较单一,较容易理解:\n##### 7.1.1.作用:被修饰的内容不可更改.\n\n##### 7.1.2.使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）\n\n##### 7.1.3.特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.\n\n#### 7.2.c++中的const\n##### 7.2.1.非类成员const:\n1. const变量默认是内部连接的,因此在不同的编译单元中可以有同名的const 变量定义.\n2. 编译时常量,因此可以像#define一样使用,而且因为上面一点,可以在头文件中定义const变量,包含的不同的cpp文件（编译\n单元）中使用而不引起命名冲突.\n3. 编译器默认不为const变量分配内存,除非:1. 使用 extern 申明, 2:程序中有引用const 变量的地址.\n4. c++中临时对象/内置变量默认具有const属性.\n\n##### 7.2.2.类中的const:\n1. 与c语言中的const一样,只是运行时常量,不能作为数组维数使用,即不能取代#define.在类中使用下面两种方式取代#define: 1:static const... \n2. enum{....}//enum 不占存储空间.\n3. 类中的const 变量占用存储空间.\n4. 类中的const成员变量需要在构造函数初始化列表中初始化.\n5. const 对象:在该对象生命周期内,必须保证没有任何成员变量被改变.const对象只能调用const成员函数.\n6. const成员函数: void fun() const ... 不仅能被const对象调用,也能被非const对象调用,因此,如果确认一个任何成员函数不改\n变任何成员变量,应该习惯性将该函数定义成const类型.\n7. 如果一个对象被定义成const,那么该const对象\"可能\"会被放入到ROM当中,这在嵌入式开发当中有时非常重要.\n\n\n***\n> 本文引用自：http://blog.csdn.net/Xiao__Tian__/article/details/51814617\n","source":"_posts/2018-03-09-C++引用的理解.md","raw":"---\ntitle: C++引用的理解\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: c/c++\n---\n\n### 1.定义:\n引用引入了对象的一个同义词.定义引用的表示方法与定义指针相似,只是用&代替了*.引用（reference）是c++对c语言的重要扩充.引用就是某\n一变量（目标）的一个别名,对引用的操作与对变量直接操作完全一样.其格式为:类型 &引用变量名 = 已定义过的变量名.\n\n***\n\n### 2.特点:\n1. 一个变量可取多个别名.\n\n2. 引用必须初始化.\n\n3. 引用只能在初始化的时候引用一次 ,不能更改为转而引用其他变量.\n\n***\n\n### 3.code:\n#### 3.1.基础引用:\n\n```c++\nvoid TestReference1 ()  \n{  \n     int a = 1;  \n     int& b = a;  \n  \n     cout<<\"a:address->\" <<&a<< endl;  \n     cout<<\"b:address->\" <<&b<< endl;  \n  \n     a = 2;  \n     b = 3;  \n     int& c = b;// 引用一个引用变量,别名的别名  \n     c = 4;  \n}\n```\n\n#### 3.2.const引用:\n\n```c++\nvoid TestReference2 ()  \n{  \n     int d1 = 4;  \n     const int & d2 = d1;  \n     d1 = 5;//d1改变,d2的值也会改变.  \n     //d2 = 6;//不能给常量（不能被修改的量）赋值.  \n  \n     const int d3 = 1;  \n     const int & d4 = d3;  \n     //int&d5 = d3;  \n     const int & d6 = 5;//常量具有常性,只有常引用可以引用常量  \n  \n     double d7 = 1.1;  \n     //int& d8 = d7;//d7是double类型,d8是int,d7赋值给 d8时要生成一个临时变量  \n                   //也就是说d8引用的是这个带有常性的临时变量,所以不能赋值.  \n     const int& d9 = d7;  \n}  \n```\n\n***\n\n### 4.引用作参数:\n```c++\n1.【值传递】如果形参为非引用的传值方式,则生成局部临时变量接收实参的值  \nvoid Swap (int left, int right) //值传递的方式无法实现交换,因为传参时对于参数left和right拷贝一临时副本,交换的是副本值,因为其是临时变量函数退出,变量销 {                                //毁,并不会影响外部left和right的值.  \n     int temp = left;  \n     left = right ;  \n     right = temp ;  \n}  \n  \n2.【引用传递】如果形参为引用类型,则形参是实参的别名.  \nvoid Swap (int& left, int& right)//使用引用的话,不做临时拷贝,&的使用说明此处只是原参数的另一个名字而已,所以修改时直接在原参数的基础上修改变量值.  \n{  \n     int temp = left;  \n     right = left ;  \n     left = temp ;  \n}  \n  \n3.【指针传递】  \nvoid Swap (int* pLeft, int* pRight)//传入的是地址,因为地址是唯一的,所以指针通过地址的访问进而可修改其内容.  \n{  \n     int temp = *pLeft;  \n     *pLeft = *pRight;  \n     *pRight = temp;  \n}  \n```\n\n***\n\n### 5.注意:\n#### 5.1.不要返回一个临时变量的引用.\n\n#### 5.2. 如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.\n\n#### 5.3.引用和指针的区别和联系（笔试热点）\n\n1. 引用必须指向有效的变量,指针可以为空.\n2. sizeof指针对象和引用对象的意义不一样.sizeof引用得到的是所指向的变量的大小,而sizeof指针是对象地址的大小.\n3. 指针和引用自增(++)自减(--)意义不一样.\n4. 相对而言,引用比指针更安全.\n\n***\n\n### 6.引用和指针的区别和联系:\n#### 6.1.不同点:\n1. 指针是一个实体,而引用仅是个别名;\n2. 引用使用时无需解引用(*),指针需要解引用;\n3. 引用只能在定义时被初始化一次,之后不可变;指针可变;\n4. 引用没有 const,指针有 const;const修饰的指针不可变;\n5. 引用不能为空,指针可以为空;\n6. \"sizeof 引用\"得到的是所指向的变量(对象)的大小,而\"sizeof 指针\"得到的是指针本身(所指向的变量或对象的地址)的大小;\n7. 指针和引用的自增(++)运算意义不一样;\n8. 从内存分配上看:程序为指针变量分配内存区域,而引用不需要分配内存区域.\n\n#### 6.2.相同点:\n1. 两者都是地址的概念,指针指向一块儿内存,其内容为所指内存的地址;引用是某块儿内存的别名\n\n***\n\n### 7.const在C和C++中的含义(笔试热点):\n#### 7.1.C中的const,功能比较单一,较容易理解:\n##### 7.1.1.作用:被修饰的内容不可更改.\n\n##### 7.1.2.使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）\n\n##### 7.1.3.特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.\n\n#### 7.2.c++中的const\n##### 7.2.1.非类成员const:\n1. const变量默认是内部连接的,因此在不同的编译单元中可以有同名的const 变量定义.\n2. 编译时常量,因此可以像#define一样使用,而且因为上面一点,可以在头文件中定义const变量,包含的不同的cpp文件（编译\n单元）中使用而不引起命名冲突.\n3. 编译器默认不为const变量分配内存,除非:1. 使用 extern 申明, 2:程序中有引用const 变量的地址.\n4. c++中临时对象/内置变量默认具有const属性.\n\n##### 7.2.2.类中的const:\n1. 与c语言中的const一样,只是运行时常量,不能作为数组维数使用,即不能取代#define.在类中使用下面两种方式取代#define: 1:static const... \n2. enum{....}//enum 不占存储空间.\n3. 类中的const 变量占用存储空间.\n4. 类中的const成员变量需要在构造函数初始化列表中初始化.\n5. const 对象:在该对象生命周期内,必须保证没有任何成员变量被改变.const对象只能调用const成员函数.\n6. const成员函数: void fun() const ... 不仅能被const对象调用,也能被非const对象调用,因此,如果确认一个任何成员函数不改\n变任何成员变量,应该习惯性将该函数定义成const类型.\n7. 如果一个对象被定义成const,那么该const对象\"可能\"会被放入到ROM当中,这在嵌入式开发当中有时非常重要.\n\n\n***\n> 本文引用自：http://blog.csdn.net/Xiao__Tian__/article/details/51814617\n","slug":"2018-03-09-C++引用的理解","published":1,"updated":"2018-03-09T13:03:24.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjejyqgrj0009d0q8xjine6im","content":"<h3 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义:\"></a>1.定义:</h3><p>引用引入了对象的一个同义词.定义引用的表示方法与定义指针相似,只是用&amp;代替了*.引用（reference）是c++对c语言的重要扩充.引用就是某<br>一变量（目标）的一个别名,对引用的操作与对变量直接操作完全一样.其格式为:类型 &amp;引用变量名 = 已定义过的变量名.</p>\n<hr>\n<h3 id=\"2-特点\"><a href=\"#2-特点\" class=\"headerlink\" title=\"2.特点:\"></a>2.特点:</h3><ol>\n<li><p>一个变量可取多个别名.</p>\n</li>\n<li><p>引用必须初始化.</p>\n</li>\n<li><p>引用只能在初始化的时候引用一次 ,不能更改为转而引用其他变量.</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"3-code\"><a href=\"#3-code\" class=\"headerlink\" title=\"3.code:\"></a>3.code:</h3><h4 id=\"3-1-基础引用\"><a href=\"#3-1-基础引用\" class=\"headerlink\" title=\"3.1.基础引用:\"></a>3.1.基础引用:</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestReference1</span> <span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span>&amp; b = a;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:address-&gt;\"</span> &lt;&lt;&amp;a&lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:address-&gt;\"</span> &lt;&lt;&amp;b&lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     a = <span class=\"number\">2</span>;  </span><br><span class=\"line\">     b = <span class=\"number\">3</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span>&amp; c = b;<span class=\"comment\">// 引用一个引用变量,别名的别名  </span></span><br><span class=\"line\">     c = <span class=\"number\">4</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-const引用\"><a href=\"#3-2-const引用\" class=\"headerlink\" title=\"3.2.const引用:\"></a>3.2.const引用:</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestReference2</span> <span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> d1 = <span class=\"number\">4</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d2 = d1;  </span><br><span class=\"line\">     d1 = <span class=\"number\">5</span>;<span class=\"comment\">//d1改变,d2的值也会改变.  </span></span><br><span class=\"line\">     <span class=\"comment\">//d2 = 6;//不能给常量（不能被修改的量）赋值.  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> d3 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d4 = d3;  </span><br><span class=\"line\">     <span class=\"comment\">//int&amp;d5 = d3;  </span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d6 = <span class=\"number\">5</span>;<span class=\"comment\">//常量具有常性,只有常引用可以引用常量  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"keyword\">double</span> d7 = <span class=\"number\">1.1</span>;  </span><br><span class=\"line\">     <span class=\"comment\">//int&amp; d8 = d7;//d7是double类型,d8是int,d7赋值给 d8时要生成一个临时变量  </span></span><br><span class=\"line\">                   <span class=\"comment\">//也就是说d8引用的是这个带有常性的临时变量,所以不能赋值.  </span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; d9 = d7;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4-引用作参数\"><a href=\"#4-引用作参数\" class=\"headerlink\" title=\"4.引用作参数:\"></a>4.引用作参数:</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>【值传递】如果形参为非引用的传值方式,则生成局部临时变量接收实参的值  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> <span class=\"comment\">//值传递的方式无法实现交换,因为传参时对于参数left和right拷贝一临时副本,交换的是副本值,因为其是临时变量函数退出,变量销 &#123;                                //毁,并不会影响外部left和right的值.  </span></span></span><br><span class=\"line\"><span class=\"function\">     <span class=\"keyword\">int</span> temp </span>= left;  </span><br><span class=\"line\">     left = right ;  </span><br><span class=\"line\">     right = temp ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">2.</span>【引用传递】如果形参为引用类型,则形参是实参的别名.  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span>&amp; left, <span class=\"keyword\">int</span>&amp; right)</span><span class=\"comment\">//使用引用的话,不做临时拷贝,&amp;的使用说明此处只是原参数的另一个名字而已,所以修改时直接在原参数的基础上修改变量值.  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = left;  </span><br><span class=\"line\">     right = left ;  </span><br><span class=\"line\">     left = temp ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">3.</span>【指针传递】  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span>* pLeft, <span class=\"keyword\">int</span>* pRight)</span><span class=\"comment\">//传入的是地址,因为地址是唯一的,所以指针通过地址的访问进而可修改其内容.  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = *pLeft;  </span><br><span class=\"line\">     *pLeft = *pRight;  </span><br><span class=\"line\">     *pRight = temp;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"5-注意\"><a href=\"#5-注意\" class=\"headerlink\" title=\"5.注意:\"></a>5.注意:</h3><h4 id=\"5-1-不要返回一个临时变量的引用\"><a href=\"#5-1-不要返回一个临时变量的引用\" class=\"headerlink\" title=\"5.1.不要返回一个临时变量的引用.\"></a>5.1.不要返回一个临时变量的引用.</h4><h4 id=\"5-2-如果返回对象出了当前函数的作用域依旧存在-则最好使用引用返回-因为这样更高效\"><a href=\"#5-2-如果返回对象出了当前函数的作用域依旧存在-则最好使用引用返回-因为这样更高效\" class=\"headerlink\" title=\"5.2. 如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.\"></a>5.2. 如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.</h4><h4 id=\"5-3-引用和指针的区别和联系（笔试热点）\"><a href=\"#5-3-引用和指针的区别和联系（笔试热点）\" class=\"headerlink\" title=\"5.3.引用和指针的区别和联系（笔试热点）\"></a>5.3.引用和指针的区别和联系（笔试热点）</h4><ol>\n<li>引用必须指向有效的变量,指针可以为空.</li>\n<li>sizeof指针对象和引用对象的意义不一样.sizeof引用得到的是所指向的变量的大小,而sizeof指针是对象地址的大小.</li>\n<li>指针和引用自增(++)自减(–)意义不一样.</li>\n<li>相对而言,引用比指针更安全.</li>\n</ol>\n<hr>\n<h3 id=\"6-引用和指针的区别和联系\"><a href=\"#6-引用和指针的区别和联系\" class=\"headerlink\" title=\"6.引用和指针的区别和联系:\"></a>6.引用和指针的区别和联系:</h3><h4 id=\"6-1-不同点\"><a href=\"#6-1-不同点\" class=\"headerlink\" title=\"6.1.不同点:\"></a>6.1.不同点:</h4><ol>\n<li>指针是一个实体,而引用仅是个别名;</li>\n<li>引用使用时无需解引用(*),指针需要解引用;</li>\n<li>引用只能在定义时被初始化一次,之后不可变;指针可变;</li>\n<li>引用没有 const,指针有 const;const修饰的指针不可变;</li>\n<li>引用不能为空,指针可以为空;</li>\n<li>“sizeof 引用”得到的是所指向的变量(对象)的大小,而”sizeof 指针”得到的是指针本身(所指向的变量或对象的地址)的大小;</li>\n<li>指针和引用的自增(++)运算意义不一样;</li>\n<li>从内存分配上看:程序为指针变量分配内存区域,而引用不需要分配内存区域.</li>\n</ol>\n<h4 id=\"6-2-相同点\"><a href=\"#6-2-相同点\" class=\"headerlink\" title=\"6.2.相同点:\"></a>6.2.相同点:</h4><ol>\n<li>两者都是地址的概念,指针指向一块儿内存,其内容为所指内存的地址;引用是某块儿内存的别名</li>\n</ol>\n<hr>\n<h3 id=\"7-const在C和C-中的含义-笔试热点\"><a href=\"#7-const在C和C-中的含义-笔试热点\" class=\"headerlink\" title=\"7.const在C和C++中的含义(笔试热点):\"></a>7.const在C和C++中的含义(笔试热点):</h3><h4 id=\"7-1-C中的const-功能比较单一-较容易理解\"><a href=\"#7-1-C中的const-功能比较单一-较容易理解\" class=\"headerlink\" title=\"7.1.C中的const,功能比较单一,较容易理解:\"></a>7.1.C中的const,功能比较单一,较容易理解:</h4><h5 id=\"7-1-1-作用-被修饰的内容不可更改\"><a href=\"#7-1-1-作用-被修饰的内容不可更改\" class=\"headerlink\" title=\"7.1.1.作用:被修饰的内容不可更改.\"></a>7.1.1.作用:被修饰的内容不可更改.</h5><h5 id=\"7-1-2-使用场合-修饰变量-函数参数-返回值等-（c-中应用场合要丰富的多）\"><a href=\"#7-1-2-使用场合-修饰变量-函数参数-返回值等-（c-中应用场合要丰富的多）\" class=\"headerlink\" title=\"7.1.2.使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）\"></a>7.1.2.使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）</h5><h5 id=\"7-1-3-特点-是运行时const-因此不能取代-define用于成为数组长度等需要编译时常量的情况-同时因为是运行时const-可以只定义而不初始化-而在运行时初始化-如-const-int-iConst-另外-在c中-const变量默认是外部链接-因此在不同的编译单元中如果有同名const变量-会引发命名冲突-编译时报错\"><a href=\"#7-1-3-特点-是运行时const-因此不能取代-define用于成为数组长度等需要编译时常量的情况-同时因为是运行时const-可以只定义而不初始化-而在运行时初始化-如-const-int-iConst-另外-在c中-const变量默认是外部链接-因此在不同的编译单元中如果有同名const变量-会引发命名冲突-编译时报错\" class=\"headerlink\" title=\"7.1.3.特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.\"></a>7.1.3.特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.</h5><h4 id=\"7-2-c-中的const\"><a href=\"#7-2-c-中的const\" class=\"headerlink\" title=\"7.2.c++中的const\"></a>7.2.c++中的const</h4><h5 id=\"7-2-1-非类成员const\"><a href=\"#7-2-1-非类成员const\" class=\"headerlink\" title=\"7.2.1.非类成员const:\"></a>7.2.1.非类成员const:</h5><ol>\n<li>const变量默认是内部连接的,因此在不同的编译单元中可以有同名的const 变量定义.</li>\n<li>编译时常量,因此可以像#define一样使用,而且因为上面一点,可以在头文件中定义const变量,包含的不同的cpp文件（编译<br>单元）中使用而不引起命名冲突.</li>\n<li>编译器默认不为const变量分配内存,除非:1. 使用 extern 申明, 2:程序中有引用const 变量的地址.</li>\n<li>c++中临时对象/内置变量默认具有const属性.</li>\n</ol>\n<h5 id=\"7-2-2-类中的const\"><a href=\"#7-2-2-类中的const\" class=\"headerlink\" title=\"7.2.2.类中的const:\"></a>7.2.2.类中的const:</h5><ol>\n<li>与c语言中的const一样,只是运行时常量,不能作为数组维数使用,即不能取代#define.在类中使用下面两种方式取代#define: 1:static const… </li>\n<li>enum{….}//enum 不占存储空间.</li>\n<li>类中的const 变量占用存储空间.</li>\n<li>类中的const成员变量需要在构造函数初始化列表中初始化.</li>\n<li>const 对象:在该对象生命周期内,必须保证没有任何成员变量被改变.const对象只能调用const成员函数.</li>\n<li>const成员函数: void fun() const … 不仅能被const对象调用,也能被非const对象调用,因此,如果确认一个任何成员函数不改<br>变任何成员变量,应该习惯性将该函数定义成const类型.</li>\n<li>如果一个对象被定义成const,那么该const对象”可能”会被放入到ROM当中,这在嵌入式开发当中有时非常重要.</li>\n</ol>\n<hr>\n<blockquote>\n<p>本文引用自：<a href=\"http://blog.csdn.net/Xiao__Tian__/article/details/51814617\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/Xiao__Tian__/article/details/51814617</a></p>\n</blockquote>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义:\"></a>1.定义:</h3><p>引用引入了对象的一个同义词.定义引用的表示方法与定义指针相似,只是用&amp;代替了*.引用（reference）是c++对c语言的重要扩充.引用就是某<br>一变量（目标）的一个别名,对引用的操作与对变量直接操作完全一样.其格式为:类型 &amp;引用变量名 = 已定义过的变量名.</p>\n<hr>\n<h3 id=\"2-特点\"><a href=\"#2-特点\" class=\"headerlink\" title=\"2.特点:\"></a>2.特点:</h3><ol>\n<li><p>一个变量可取多个别名.</p>\n</li>\n<li><p>引用必须初始化.</p>\n</li>\n<li><p>引用只能在初始化的时候引用一次 ,不能更改为转而引用其他变量.</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"3-code\"><a href=\"#3-code\" class=\"headerlink\" title=\"3.code:\"></a>3.code:</h3><h4 id=\"3-1-基础引用\"><a href=\"#3-1-基础引用\" class=\"headerlink\" title=\"3.1.基础引用:\"></a>3.1.基础引用:</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestReference1</span> <span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span>&amp; b = a;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"a:address-&gt;\"</span> &lt;&lt;&amp;a&lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b:address-&gt;\"</span> &lt;&lt;&amp;b&lt;&lt; <span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     a = <span class=\"number\">2</span>;  </span><br><span class=\"line\">     b = <span class=\"number\">3</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span>&amp; c = b;<span class=\"comment\">// 引用一个引用变量,别名的别名  </span></span><br><span class=\"line\">     c = <span class=\"number\">4</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-const引用\"><a href=\"#3-2-const引用\" class=\"headerlink\" title=\"3.2.const引用:\"></a>3.2.const引用:</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestReference2</span> <span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> d1 = <span class=\"number\">4</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d2 = d1;  </span><br><span class=\"line\">     d1 = <span class=\"number\">5</span>;<span class=\"comment\">//d1改变,d2的值也会改变.  </span></span><br><span class=\"line\">     <span class=\"comment\">//d2 = 6;//不能给常量（不能被修改的量）赋值.  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> d3 = <span class=\"number\">1</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d4 = d3;  </span><br><span class=\"line\">     <span class=\"comment\">//int&amp;d5 = d3;  </span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp; d6 = <span class=\"number\">5</span>;<span class=\"comment\">//常量具有常性,只有常引用可以引用常量  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"keyword\">double</span> d7 = <span class=\"number\">1.1</span>;  </span><br><span class=\"line\">     <span class=\"comment\">//int&amp; d8 = d7;//d7是double类型,d8是int,d7赋值给 d8时要生成一个临时变量  </span></span><br><span class=\"line\">                   <span class=\"comment\">//也就是说d8引用的是这个带有常性的临时变量,所以不能赋值.  </span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; d9 = d7;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4-引用作参数\"><a href=\"#4-引用作参数\" class=\"headerlink\" title=\"4.引用作参数:\"></a>4.引用作参数:</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>【值传递】如果形参为非引用的传值方式,则生成局部临时变量接收实参的值  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> <span class=\"comment\">//值传递的方式无法实现交换,因为传参时对于参数left和right拷贝一临时副本,交换的是副本值,因为其是临时变量函数退出,变量销 &#123;                                //毁,并不会影响外部left和right的值.  </span></span></span><br><span class=\"line\"><span class=\"function\">     <span class=\"keyword\">int</span> temp </span>= left;  </span><br><span class=\"line\">     left = right ;  </span><br><span class=\"line\">     right = temp ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">2.</span>【引用传递】如果形参为引用类型,则形参是实参的别名.  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span>&amp; left, <span class=\"keyword\">int</span>&amp; right)</span><span class=\"comment\">//使用引用的话,不做临时拷贝,&amp;的使用说明此处只是原参数的另一个名字而已,所以修改时直接在原参数的基础上修改变量值.  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = left;  </span><br><span class=\"line\">     right = left ;  </span><br><span class=\"line\">     left = temp ;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"number\">3.</span>【指针传递】  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span> <span class=\"params\">(<span class=\"keyword\">int</span>* pLeft, <span class=\"keyword\">int</span>* pRight)</span><span class=\"comment\">//传入的是地址,因为地址是唯一的,所以指针通过地址的访问进而可修改其内容.  </span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"keyword\">int</span> temp = *pLeft;  </span><br><span class=\"line\">     *pLeft = *pRight;  </span><br><span class=\"line\">     *pRight = temp;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"5-注意\"><a href=\"#5-注意\" class=\"headerlink\" title=\"5.注意:\"></a>5.注意:</h3><h4 id=\"5-1-不要返回一个临时变量的引用\"><a href=\"#5-1-不要返回一个临时变量的引用\" class=\"headerlink\" title=\"5.1.不要返回一个临时变量的引用.\"></a>5.1.不要返回一个临时变量的引用.</h4><h4 id=\"5-2-如果返回对象出了当前函数的作用域依旧存在-则最好使用引用返回-因为这样更高效\"><a href=\"#5-2-如果返回对象出了当前函数的作用域依旧存在-则最好使用引用返回-因为这样更高效\" class=\"headerlink\" title=\"5.2. 如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.\"></a>5.2. 如果返回对象出了当前函数的作用域依旧存在,则最好使用引用返回,因为这样更高效.</h4><h4 id=\"5-3-引用和指针的区别和联系（笔试热点）\"><a href=\"#5-3-引用和指针的区别和联系（笔试热点）\" class=\"headerlink\" title=\"5.3.引用和指针的区别和联系（笔试热点）\"></a>5.3.引用和指针的区别和联系（笔试热点）</h4><ol>\n<li>引用必须指向有效的变量,指针可以为空.</li>\n<li>sizeof指针对象和引用对象的意义不一样.sizeof引用得到的是所指向的变量的大小,而sizeof指针是对象地址的大小.</li>\n<li>指针和引用自增(++)自减(–)意义不一样.</li>\n<li>相对而言,引用比指针更安全.</li>\n</ol>\n<hr>\n<h3 id=\"6-引用和指针的区别和联系\"><a href=\"#6-引用和指针的区别和联系\" class=\"headerlink\" title=\"6.引用和指针的区别和联系:\"></a>6.引用和指针的区别和联系:</h3><h4 id=\"6-1-不同点\"><a href=\"#6-1-不同点\" class=\"headerlink\" title=\"6.1.不同点:\"></a>6.1.不同点:</h4><ol>\n<li>指针是一个实体,而引用仅是个别名;</li>\n<li>引用使用时无需解引用(*),指针需要解引用;</li>\n<li>引用只能在定义时被初始化一次,之后不可变;指针可变;</li>\n<li>引用没有 const,指针有 const;const修饰的指针不可变;</li>\n<li>引用不能为空,指针可以为空;</li>\n<li>“sizeof 引用”得到的是所指向的变量(对象)的大小,而”sizeof 指针”得到的是指针本身(所指向的变量或对象的地址)的大小;</li>\n<li>指针和引用的自增(++)运算意义不一样;</li>\n<li>从内存分配上看:程序为指针变量分配内存区域,而引用不需要分配内存区域.</li>\n</ol>\n<h4 id=\"6-2-相同点\"><a href=\"#6-2-相同点\" class=\"headerlink\" title=\"6.2.相同点:\"></a>6.2.相同点:</h4><ol>\n<li>两者都是地址的概念,指针指向一块儿内存,其内容为所指内存的地址;引用是某块儿内存的别名</li>\n</ol>\n<hr>\n<h3 id=\"7-const在C和C-中的含义-笔试热点\"><a href=\"#7-const在C和C-中的含义-笔试热点\" class=\"headerlink\" title=\"7.const在C和C++中的含义(笔试热点):\"></a>7.const在C和C++中的含义(笔试热点):</h3><h4 id=\"7-1-C中的const-功能比较单一-较容易理解\"><a href=\"#7-1-C中的const-功能比较单一-较容易理解\" class=\"headerlink\" title=\"7.1.C中的const,功能比较单一,较容易理解:\"></a>7.1.C中的const,功能比较单一,较容易理解:</h4><h5 id=\"7-1-1-作用-被修饰的内容不可更改\"><a href=\"#7-1-1-作用-被修饰的内容不可更改\" class=\"headerlink\" title=\"7.1.1.作用:被修饰的内容不可更改.\"></a>7.1.1.作用:被修饰的内容不可更改.</h5><h5 id=\"7-1-2-使用场合-修饰变量-函数参数-返回值等-（c-中应用场合要丰富的多）\"><a href=\"#7-1-2-使用场合-修饰变量-函数参数-返回值等-（c-中应用场合要丰富的多）\" class=\"headerlink\" title=\"7.1.2.使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）\"></a>7.1.2.使用场合:修饰变量,函数参数,返回值等.（c++中应用场合要丰富的多）</h5><h5 id=\"7-1-3-特点-是运行时const-因此不能取代-define用于成为数组长度等需要编译时常量的情况-同时因为是运行时const-可以只定义而不初始化-而在运行时初始化-如-const-int-iConst-另外-在c中-const变量默认是外部链接-因此在不同的编译单元中如果有同名const变量-会引发命名冲突-编译时报错\"><a href=\"#7-1-3-特点-是运行时const-因此不能取代-define用于成为数组长度等需要编译时常量的情况-同时因为是运行时const-可以只定义而不初始化-而在运行时初始化-如-const-int-iConst-另外-在c中-const变量默认是外部链接-因此在不同的编译单元中如果有同名const变量-会引发命名冲突-编译时报错\" class=\"headerlink\" title=\"7.1.3.特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.\"></a>7.1.3.特点: 是运行时const,因此不能取代#define用于成为数组长度等需要编译时常量的情况.同时因为是运行时const,可以只定义而不初始化,而在运行时初始化.如 const int iConst;. 另外,在c中,const变量默认是外部链接,因此在不同的编译单元中如果有同名const变量,会引发命名冲突,编译时报错.</h5><h4 id=\"7-2-c-中的const\"><a href=\"#7-2-c-中的const\" class=\"headerlink\" title=\"7.2.c++中的const\"></a>7.2.c++中的const</h4><h5 id=\"7-2-1-非类成员const\"><a href=\"#7-2-1-非类成员const\" class=\"headerlink\" title=\"7.2.1.非类成员const:\"></a>7.2.1.非类成员const:</h5><ol>\n<li>const变量默认是内部连接的,因此在不同的编译单元中可以有同名的const 变量定义.</li>\n<li>编译时常量,因此可以像#define一样使用,而且因为上面一点,可以在头文件中定义const变量,包含的不同的cpp文件（编译<br>单元）中使用而不引起命名冲突.</li>\n<li>编译器默认不为const变量分配内存,除非:1. 使用 extern 申明, 2:程序中有引用const 变量的地址.</li>\n<li>c++中临时对象/内置变量默认具有const属性.</li>\n</ol>\n<h5 id=\"7-2-2-类中的const\"><a href=\"#7-2-2-类中的const\" class=\"headerlink\" title=\"7.2.2.类中的const:\"></a>7.2.2.类中的const:</h5><ol>\n<li>与c语言中的const一样,只是运行时常量,不能作为数组维数使用,即不能取代#define.在类中使用下面两种方式取代#define: 1:static const… </li>\n<li>enum{….}//enum 不占存储空间.</li>\n<li>类中的const 变量占用存储空间.</li>\n<li>类中的const成员变量需要在构造函数初始化列表中初始化.</li>\n<li>const 对象:在该对象生命周期内,必须保证没有任何成员变量被改变.const对象只能调用const成员函数.</li>\n<li>const成员函数: void fun() const … 不仅能被const对象调用,也能被非const对象调用,因此,如果确认一个任何成员函数不改<br>变任何成员变量,应该习惯性将该函数定义成const类型.</li>\n<li>如果一个对象被定义成const,那么该const对象”可能”会被放入到ROM当中,这在嵌入式开发当中有时非常重要.</li>\n</ol>\n<hr>\n<blockquote>\n<p>本文引用自：<a href=\"http://blog.csdn.net/Xiao__Tian__/article/details/51814617\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/Xiao__Tian__/article/details/51814617</a></p>\n</blockquote>\n"},{"title":"Hexo-theme-pure主题books默认选择想读","date":"2013-07-13T12:46:25.000Z","_content":"\nHexo-theme-pure主题books默认是选择在读的，现在我们需要将想读移动到前面\n## Step 1.修改样式：\n   在主题的layout->_partial的 archive-book.ejs调换想读和在读的顺序\n\n## Step 2.修改js：\n   在主题的layout->_script的 douban.ejs 将show(reading)改成show('wish')，然后刷新就有效果了\n\n\n","source":"_posts/2018-03-09-Hexo-theme-pure主题books默认选择想读.md","raw":"---\ntitle: Hexo-theme-pure主题books默认选择想读\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: 工具/插件\n---\n\nHexo-theme-pure主题books默认是选择在读的，现在我们需要将想读移动到前面\n## Step 1.修改样式：\n   在主题的layout->_partial的 archive-book.ejs调换想读和在读的顺序\n\n## Step 2.修改js：\n   在主题的layout->_script的 douban.ejs 将show(reading)改成show('wish')，然后刷新就有效果了\n\n\n","slug":"2018-03-09-Hexo-theme-pure主题books默认选择想读","published":1,"updated":"2018-03-09T08:58:59.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjejyqgrm000bd0q84s0obbdm","content":"<p>Hexo-theme-pure主题books默认是选择在读的，现在我们需要将想读移动到前面</p>\n<h2 id=\"Step-1-修改样式：\"><a href=\"#Step-1-修改样式：\" class=\"headerlink\" title=\"Step 1.修改样式：\"></a>Step 1.修改样式：</h2><p>   在主题的layout-&gt;_partial的 archive-book.ejs调换想读和在读的顺序</p>\n<h2 id=\"Step-2-修改js：\"><a href=\"#Step-2-修改js：\" class=\"headerlink\" title=\"Step 2.修改js：\"></a>Step 2.修改js：</h2><p>   在主题的layout-&gt;_script的 douban.ejs 将show(reading)改成show(‘wish’)，然后刷新就有效果了</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>Hexo-theme-pure主题books默认是选择在读的，现在我们需要将想读移动到前面</p>\n<h2 id=\"Step-1-修改样式：\"><a href=\"#Step-1-修改样式：\" class=\"headerlink\" title=\"Step 1.修改样式：\"></a>Step 1.修改样式：</h2><p>   在主题的layout-&gt;_partial的 archive-book.ejs调换想读和在读的顺序</p>\n<h2 id=\"Step-2-修改js：\"><a href=\"#Step-2-修改js：\" class=\"headerlink\" title=\"Step 2.修改js：\"></a>Step 2.修改js：</h2><p>   在主题的layout-&gt;_script的 douban.ejs 将show(reading)改成show(‘wish’)，然后刷新就有效果了</p>\n"},{"title":"SBC大数据导入(代码)","date":"2013-07-13T12:46:25.000Z","_content":"\n```c#\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Data;\nusing System.IO;\nusing System.Threading;\nusing System.Web;\nusing System.Xml;\nusing System.Configuration;\nusing System.Data.SqlClient;\nusing WXMP.WinService.Data;\n\nnamespace Utility.DataImport\n{\n    public class TxtImport\n    {\n        /// <summary>\n        /// 导入数据\n        /// </summary>\n        /// <param name=\"fileName\">文件名</param>\n        /// <param name=\"columnCount\"></param>\n        /// <param name=\"xmlTableName\">xml配置名</param>\n        /// <param name=\"RealTableName\">数据库表名称</param>\n        /// <param name=\"defaultValue\"></param>\n        /// <param name=\"ConnectionKeyName\">数据库连接配置</param>\n        /// <param name=\"heardRowCount\">文件头定义行数</param>\n        /// <param name=\"footRowCount\">文件尾定义行数</param>\n        /// <returns></returns>\n        public static int ImportData(string fileName, string xmlTableName, Dictionary<string, object> defaultValue, string ConnectionKeyName = \"default\", int heardRowCount = 0, int footRowCount = 0)\n        {\n            if (fileName == \"\")\n                return 0;\n            return Insert(fileName, xmlTableName, defaultValue, ConnectionKeyName, heardRowCount, footRowCount);\n        }\n\n        /// <summary>\n        /// 导入文本文件\n        /// </summary>\n        /// <param name=\"fileFullName\">文本全路径</param>\n        /// <param name=\"columnCount\">文本里需要导入的列的数目</param>\n        public static int Insert(string fileFullName, string xmlTableName, Dictionary<string, object> defaultValue, string ConnectionKeyName, int heardRowCount = 0, int footRowCount = 0)\n        {\n            string exesql = string.Empty;\n            string tablename = string.Empty;\n            DataTable dt = XmlToDataTable(xmlTableName, out tablename, out exesql);\n            if (dt != null)\n            {\n                LoadAdpaterDataAndImport(fileFullName, dt.Columns.Count, dt, defaultValue, ConnectionKeyName, tablename, heardRowCount, footRowCount);\n\n                DbHelper.ExecuteNonQuery(exesql, ConnectionKeyName);\n                return dt.Rows.Count;\n            }\n\n            return 0;\n        }\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"fileFullName\"></param>\n        /// <param name=\"columnCount\"></param>\n        /// <param name=\"pDTScheme\"></param>\n        /// <param name=\"defaultValue\"></param>\n        /// <param name=\"connectionName\"></param>\n        /// <param name=\"realTableName\"></param>\n        /// <param name=\"heardRowCount\"></param>\n        /// <param name=\"footRowCount\"></param>\n        public static void LoadAdpaterDataAndImport(string fileFullName, int columnCount, DataTable pDTScheme, Dictionary<string, object> defaultValue, string connectionName, string realTableName, int heardRowCount = 0, int footRowCount = 0)\n        {\n            try\n            {\n                using (StreamReader sr = new StreamReader(fileFullName, Encoding.Default, true))\n                {\n                    string strTmp;\n                    DataRow dr;\n                    int i = 0;\n                    while (!sr.EndOfStream)\n                    {\n                        strTmp = sr.ReadLine();\n                        if (string.IsNullOrEmpty(strTmp))\n                            continue;\n                        i++;\n                        if (i <= heardRowCount) continue;\n                        heardRowCount = 0;\n                        dr = GetDataRow(strTmp, columnCount, pDTScheme, defaultValue);\n                        if (dr != null)\n                            pDTScheme.Rows.Add(dr);\n                        if (i % 100000 == 0)\n                        {\n                            UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);\n                            pDTScheme.Rows.Clear();\n                            i = 0;\n                            Thread.Sleep(1000);\n                        }\n                    }\n                    if (pDTScheme.Rows.Count > 0)\n                        UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);\n                    DbHelper.ExecuteNonQuery(@\"INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES('\" + fileFullName.Substring(fileFullName.LastIndexOf(\"\\\\\") + 1) + \"','\" + DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \"','\" + (i - heardRowCount - footRowCount).ToString() + \"','0');\", connectionName);\n                }\n            }\n            catch (Exception ex)\n            {\n                DbHelper.ExecuteNonQuery(@\"INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES('\" + fileFullName.Substring(fileFullName.LastIndexOf(\"\\\\\") + 1) + \"','\" + DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \"','','3');\", connectionName);\n                Utility.Logging.Log.Instance.Write(\"读取文件发生异常\" + ex.Message, Logging.MessageType.Error);\n            }\n        }\n\n        protected static DataRow GetDataRow(string strTmp, int columnCount, DataTable pDTScheme, Dictionary<string, object> defaultValue)\n        {\n            string[] result = strTmp.Split(new string[] { \"&&\" }, StringSplitOptions.None);\n            DataRow dr = null;\n            if (result.Length >= columnCount)\n            {\n                dr = pDTScheme.NewRow();\n                for (int n = 0; n < columnCount; n++)\n                {\n                    try\n                    {\n                        if (pDTScheme.Columns[n].DataType == typeof(System.Decimal) && result[n] == \"\")\n                        {\n                            dr[n] = 0;\n                        }\n                        else if (pDTScheme.Columns[n].DataType == typeof(System.Int32) && result[n] == \"\")\n                        {\n                            dr[n] = 0;\n                        }\n                        else if (pDTScheme.Columns[n].DataType != typeof(System.String) && result[n] == \"\")\n                        {\n                            dr[n] = DBNull.Value;\n                        }\n                        else if (pDTScheme.Columns[n].DataType != typeof(System.DateTime) && result[n] == \"\")\n                        {\n                            dr[n] = DBNull.Value;\n                        }\n                        else\n                            dr[n] = result[n];\n                    }\n                    catch\n                    {\n                        dr[n] = DBNull.Value;\n                    }\n                }\n                Type t = null;\n                DataColumn dc = null;\n                object obj = null;\n                for (int n = columnCount; n < pDTScheme.Columns.Count; n++)\n                {\n                    dc = pDTScheme.Columns[n];\n                    if (defaultValue != null)\n                    {\n                        if (defaultValue.TryGetValue(dc.ColumnName, out obj))\n                        {\n                            dr[n] = obj;\n                        }\n                        else\n                        {\n                            if (dc.DefaultValue == DBNull.Value)\n                            {\n                                t = pDTScheme.Columns[n].DataType;\n                                if (t == typeof(String))\n                                    dr[n] = \"\";\n                                else if (t == typeof(Guid))\n                                    dr[n] = Guid.NewGuid();\n                                else if (t == typeof(DateTime))\n                                    dr[n] = DateTime.Now;\n                                else if (t == typeof(int))\n                                    dr[n] = 0;\n                                else if (t == typeof(decimal))\n                                    dr[n] = 0.00;\n                            }\n                            else\n                            {\n                                dr[n] = pDTScheme.Columns[n].DefaultValue;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (dc.DefaultValue == DBNull.Value)\n                        {\n                            t = pDTScheme.Columns[n].DataType;\n                            if (t == typeof(String))\n                                dr[n] = \"\";\n                            else if (t == typeof(Guid))\n                                dr[n] = Guid.NewGuid();\n                            else if (t == typeof(DateTime))\n                                dr[n] = DateTime.Now;\n                            else if (t == typeof(int))\n                                dr[n] = 0;\n                            else if (t == typeof(decimal))\n                                dr[n] = 0.00;\n                        }\n                        else\n                        {\n                            dr[n] = pDTScheme.Columns[n].DefaultValue;\n                        }\n\n                    }\n                }\n\n            }\n            return dr;\n        }\n\n\n        #region【封装的业务逻辑方法，配合InsertBossDetail进行使用】\n        public static DataTable XmlToDataTable(string dataName, out string tablename, out string exesql)\n        {\n            tablename = string.Empty;\n            exesql = string.Empty;\n            string path = System.AppDomain.CurrentDomain.BaseDirectory + \"/Config/Imps.config\";\n            XmlDocument doc = new XmlDocument();\n            doc.Load(path);\n            XmlNode tableRoot = doc.SelectSingleNode(\"/imps/imp[@name='\" + dataName + \"']\");\n            if (tableRoot != null)\n            {\n\n                DataTable dt = new DataTable();\n                DataColumn dc = null;\n                string defualtValue;\n                tablename = tableRoot.SelectSingleNode(\"table\").Attributes[\"name\"].Value;\n                exesql = tableRoot.SelectSingleNode(\"sql\").InnerText;\n                foreach (XmlNode node in tableRoot.SelectSingleNode(\"table\").ChildNodes)\n                {\n                    dc = new DataColumn(node.Attributes[\"name\"].Value.Trim(), Type.GetType(node.Attributes[\"type\"].Value.Trim()));\n                    if (!string.IsNullOrEmpty(defualtValue = node.Attributes[\"default\"] != null ? node.Attributes[\"default\"].Value.Trim() : null))\n                        dc.DefaultValue = defualtValue;\n                    dt.Columns.Add(dc);\n\n                }\n                return dt;\n            }\n            return null;\n        }\n\n        /// <summary>\n        /// 用SBC方法插入数据库\n        /// </summary>\n        /// <param name=\"ConnectionStringKey\">要插入的数据库</param>\n        /// <param name=\"pDataTable\">要插入的DATATABLE</param>\n        /// <param name=\"pTableName\">对应的数据库表名</param>\n        /// <param name=\"pBulkCopyTimeout\">数据库连接过期时间,单位：秒</param>\n        public static void UseSBCInsertDB(string ConnectionStringKey, DataTable pDataTable, string pTableName, int pBulkCopyTimeout = -1, bool appingFlag = false)\n        {\n            string connectionString = ConfigurationManager.ConnectionStrings[ConnectionStringKey].ConnectionString;\n            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(connectionString))\n            {\n                sqlBulkCopy.DestinationTableName = pTableName;\n                sqlBulkCopy.BatchSize = pDataTable.Rows.Count;\n                if (pBulkCopyTimeout > 0)\n                    sqlBulkCopy.BulkCopyTimeout = pBulkCopyTimeout;\n                if (appingFlag)\n                {\n                    foreach (DataColumn dc in pDataTable.Columns)\n                        sqlBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName);\n                }\n                using (SqlConnection sqlConnection = new SqlConnection(connectionString))\n                {\n                    sqlConnection.Open();\n                    if (pDataTable != null && pDataTable.Rows.Count != 0)\n                    {\n                        sqlBulkCopy.WriteToServer(pDataTable);\n                    }\n                }\n\n            }\n        }\n        #endregion\n\n        #region【转换文件】\n        public static string TransferFile(string fileFullName, bool isDelOriFile = true)\n        {\n            string path = Path.GetDirectoryName(fileFullName);\n            //fileFullName.Substring(0, fileFullName.LastIndexOf('\\\\'));\n            string newFileName = string.Format(\"{0}{1}.txt\", path, DateTime.Now.ToString(\"yyyyMMddHHmmss\"));\n            Encoding en = GetEncoding(fileFullName, Encoding.Default);\n            using (StreamReader sr = new StreamReader(fileFullName, en, true))\n            {\n                using (StreamWriter sw = new StreamWriter(newFileName, true, Encoding.UTF8))\n                {\n                    string strTmp;\n                    while (!sr.EndOfStream)\n                    {\n                        strTmp = sr.ReadLine();\n                        if (!string.IsNullOrEmpty(strTmp))\n                        {\n                            sw.WriteLine(strTmp);\n                        }\n                    }\n                    sw.Flush();\n                    sw.Close();\n                }\n            }\n            if (isDelOriFile && File.Exists(fileFullName))\n                File.Delete(fileFullName);\n            return newFileName;\n        }\n\n\n        /// <summary>\n        /// 取得一个文本文件的编码方式。\n        /// </summary>\n        /// <param name=\"fileName\">文件名。</param>\n        /// <param name=\"defaultEncoding\">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>\n        /// <returns></returns>\n        public static Encoding GetEncoding(string fileName, Encoding defaultEncoding)\n        {\n            using (FileStream fs = new FileStream(fileName, FileMode.Open))\n            {\n                Encoding targetEncoding = GetEncoding(fs, defaultEncoding);\n                fs.Close();\n                return targetEncoding;\n            }\n        }\n\n\n        /// <summary>\n        /// 取得一个文本文件流的编码方式。\n        /// </summary>\n        /// <param name=\"stream\">文本文件流。</param>\n        /// <param name=\"defaultEncoding\">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>\n        /// <returns></returns>\n        public static Encoding GetEncoding(FileStream stream, Encoding defaultEncoding)\n        {\n\n            Encoding targetEncoding = defaultEncoding;\n            if (stream != null && stream.Length >= 2)\n            {\n\n                //保存文件流的前4个字节\n                byte byte1 = 0;\n                byte byte2 = 0;\n                byte byte3 = 0;\n                byte byte4 = 0;\n                //保存当前Seek位置\n                long origPos = stream.Seek(0, SeekOrigin.Begin);\n                stream.Seek(0, SeekOrigin.Begin);\n                int nByte = stream.ReadByte();\n                byte1 = Convert.ToByte(nByte);\n                byte2 = Convert.ToByte(stream.ReadByte());\n                if (stream.Length >= 3)\n                {\n                    byte3 = Convert.ToByte(stream.ReadByte());\n                }\n\n                if (stream.Length >= 4)\n                {\n                    byte4 = Convert.ToByte(stream.ReadByte());\n                }\n                //根据文件流的前4个字节判断Encoding\n                //Unicode {0xFF, 0xFE};\n                //BE-Unicode {0xFE, 0xFF};\n                //UTF8 = {0xEF, 0xBB, 0xBF};\n                if (byte1 == 0xFE && byte2 == 0xFF)//UnicodeBe\n                {\n                    targetEncoding = Encoding.BigEndianUnicode;\n                }\n\n                if (byte1 == 0xFF && byte2 == 0xFE && byte3 != 0xFF)//Unicode\n                {\n                    targetEncoding = Encoding.Unicode;\n                }\n\n                if (byte1 == 0xEF && byte2 == 0xBB && byte3 == 0xBF)//UTF8\n                {\n\n                    targetEncoding = Encoding.UTF8;\n\n                }\n\n                //恢复Seek位置       \n                stream.Seek(origPos, SeekOrigin.Begin);\n            }\n\n            return targetEncoding;\n        }\n        #endregion\n\n\n    }\n}\n\n```\n","source":"_posts/2018-03-09-SBC大数据导入(代码).md","raw":"---\ntitle: SBC大数据导入(代码)\ndate: 2013/7/13 20:46:25\ncategories: 技术\ntags: csharp/.net\n---\n\n```c#\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Data;\nusing System.IO;\nusing System.Threading;\nusing System.Web;\nusing System.Xml;\nusing System.Configuration;\nusing System.Data.SqlClient;\nusing WXMP.WinService.Data;\n\nnamespace Utility.DataImport\n{\n    public class TxtImport\n    {\n        /// <summary>\n        /// 导入数据\n        /// </summary>\n        /// <param name=\"fileName\">文件名</param>\n        /// <param name=\"columnCount\"></param>\n        /// <param name=\"xmlTableName\">xml配置名</param>\n        /// <param name=\"RealTableName\">数据库表名称</param>\n        /// <param name=\"defaultValue\"></param>\n        /// <param name=\"ConnectionKeyName\">数据库连接配置</param>\n        /// <param name=\"heardRowCount\">文件头定义行数</param>\n        /// <param name=\"footRowCount\">文件尾定义行数</param>\n        /// <returns></returns>\n        public static int ImportData(string fileName, string xmlTableName, Dictionary<string, object> defaultValue, string ConnectionKeyName = \"default\", int heardRowCount = 0, int footRowCount = 0)\n        {\n            if (fileName == \"\")\n                return 0;\n            return Insert(fileName, xmlTableName, defaultValue, ConnectionKeyName, heardRowCount, footRowCount);\n        }\n\n        /// <summary>\n        /// 导入文本文件\n        /// </summary>\n        /// <param name=\"fileFullName\">文本全路径</param>\n        /// <param name=\"columnCount\">文本里需要导入的列的数目</param>\n        public static int Insert(string fileFullName, string xmlTableName, Dictionary<string, object> defaultValue, string ConnectionKeyName, int heardRowCount = 0, int footRowCount = 0)\n        {\n            string exesql = string.Empty;\n            string tablename = string.Empty;\n            DataTable dt = XmlToDataTable(xmlTableName, out tablename, out exesql);\n            if (dt != null)\n            {\n                LoadAdpaterDataAndImport(fileFullName, dt.Columns.Count, dt, defaultValue, ConnectionKeyName, tablename, heardRowCount, footRowCount);\n\n                DbHelper.ExecuteNonQuery(exesql, ConnectionKeyName);\n                return dt.Rows.Count;\n            }\n\n            return 0;\n        }\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"fileFullName\"></param>\n        /// <param name=\"columnCount\"></param>\n        /// <param name=\"pDTScheme\"></param>\n        /// <param name=\"defaultValue\"></param>\n        /// <param name=\"connectionName\"></param>\n        /// <param name=\"realTableName\"></param>\n        /// <param name=\"heardRowCount\"></param>\n        /// <param name=\"footRowCount\"></param>\n        public static void LoadAdpaterDataAndImport(string fileFullName, int columnCount, DataTable pDTScheme, Dictionary<string, object> defaultValue, string connectionName, string realTableName, int heardRowCount = 0, int footRowCount = 0)\n        {\n            try\n            {\n                using (StreamReader sr = new StreamReader(fileFullName, Encoding.Default, true))\n                {\n                    string strTmp;\n                    DataRow dr;\n                    int i = 0;\n                    while (!sr.EndOfStream)\n                    {\n                        strTmp = sr.ReadLine();\n                        if (string.IsNullOrEmpty(strTmp))\n                            continue;\n                        i++;\n                        if (i <= heardRowCount) continue;\n                        heardRowCount = 0;\n                        dr = GetDataRow(strTmp, columnCount, pDTScheme, defaultValue);\n                        if (dr != null)\n                            pDTScheme.Rows.Add(dr);\n                        if (i % 100000 == 0)\n                        {\n                            UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);\n                            pDTScheme.Rows.Clear();\n                            i = 0;\n                            Thread.Sleep(1000);\n                        }\n                    }\n                    if (pDTScheme.Rows.Count > 0)\n                        UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);\n                    DbHelper.ExecuteNonQuery(@\"INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES('\" + fileFullName.Substring(fileFullName.LastIndexOf(\"\\\\\") + 1) + \"','\" + DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \"','\" + (i - heardRowCount - footRowCount).ToString() + \"','0');\", connectionName);\n                }\n            }\n            catch (Exception ex)\n            {\n                DbHelper.ExecuteNonQuery(@\"INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES('\" + fileFullName.Substring(fileFullName.LastIndexOf(\"\\\\\") + 1) + \"','\" + DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \"','','3');\", connectionName);\n                Utility.Logging.Log.Instance.Write(\"读取文件发生异常\" + ex.Message, Logging.MessageType.Error);\n            }\n        }\n\n        protected static DataRow GetDataRow(string strTmp, int columnCount, DataTable pDTScheme, Dictionary<string, object> defaultValue)\n        {\n            string[] result = strTmp.Split(new string[] { \"&&\" }, StringSplitOptions.None);\n            DataRow dr = null;\n            if (result.Length >= columnCount)\n            {\n                dr = pDTScheme.NewRow();\n                for (int n = 0; n < columnCount; n++)\n                {\n                    try\n                    {\n                        if (pDTScheme.Columns[n].DataType == typeof(System.Decimal) && result[n] == \"\")\n                        {\n                            dr[n] = 0;\n                        }\n                        else if (pDTScheme.Columns[n].DataType == typeof(System.Int32) && result[n] == \"\")\n                        {\n                            dr[n] = 0;\n                        }\n                        else if (pDTScheme.Columns[n].DataType != typeof(System.String) && result[n] == \"\")\n                        {\n                            dr[n] = DBNull.Value;\n                        }\n                        else if (pDTScheme.Columns[n].DataType != typeof(System.DateTime) && result[n] == \"\")\n                        {\n                            dr[n] = DBNull.Value;\n                        }\n                        else\n                            dr[n] = result[n];\n                    }\n                    catch\n                    {\n                        dr[n] = DBNull.Value;\n                    }\n                }\n                Type t = null;\n                DataColumn dc = null;\n                object obj = null;\n                for (int n = columnCount; n < pDTScheme.Columns.Count; n++)\n                {\n                    dc = pDTScheme.Columns[n];\n                    if (defaultValue != null)\n                    {\n                        if (defaultValue.TryGetValue(dc.ColumnName, out obj))\n                        {\n                            dr[n] = obj;\n                        }\n                        else\n                        {\n                            if (dc.DefaultValue == DBNull.Value)\n                            {\n                                t = pDTScheme.Columns[n].DataType;\n                                if (t == typeof(String))\n                                    dr[n] = \"\";\n                                else if (t == typeof(Guid))\n                                    dr[n] = Guid.NewGuid();\n                                else if (t == typeof(DateTime))\n                                    dr[n] = DateTime.Now;\n                                else if (t == typeof(int))\n                                    dr[n] = 0;\n                                else if (t == typeof(decimal))\n                                    dr[n] = 0.00;\n                            }\n                            else\n                            {\n                                dr[n] = pDTScheme.Columns[n].DefaultValue;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (dc.DefaultValue == DBNull.Value)\n                        {\n                            t = pDTScheme.Columns[n].DataType;\n                            if (t == typeof(String))\n                                dr[n] = \"\";\n                            else if (t == typeof(Guid))\n                                dr[n] = Guid.NewGuid();\n                            else if (t == typeof(DateTime))\n                                dr[n] = DateTime.Now;\n                            else if (t == typeof(int))\n                                dr[n] = 0;\n                            else if (t == typeof(decimal))\n                                dr[n] = 0.00;\n                        }\n                        else\n                        {\n                            dr[n] = pDTScheme.Columns[n].DefaultValue;\n                        }\n\n                    }\n                }\n\n            }\n            return dr;\n        }\n\n\n        #region【封装的业务逻辑方法，配合InsertBossDetail进行使用】\n        public static DataTable XmlToDataTable(string dataName, out string tablename, out string exesql)\n        {\n            tablename = string.Empty;\n            exesql = string.Empty;\n            string path = System.AppDomain.CurrentDomain.BaseDirectory + \"/Config/Imps.config\";\n            XmlDocument doc = new XmlDocument();\n            doc.Load(path);\n            XmlNode tableRoot = doc.SelectSingleNode(\"/imps/imp[@name='\" + dataName + \"']\");\n            if (tableRoot != null)\n            {\n\n                DataTable dt = new DataTable();\n                DataColumn dc = null;\n                string defualtValue;\n                tablename = tableRoot.SelectSingleNode(\"table\").Attributes[\"name\"].Value;\n                exesql = tableRoot.SelectSingleNode(\"sql\").InnerText;\n                foreach (XmlNode node in tableRoot.SelectSingleNode(\"table\").ChildNodes)\n                {\n                    dc = new DataColumn(node.Attributes[\"name\"].Value.Trim(), Type.GetType(node.Attributes[\"type\"].Value.Trim()));\n                    if (!string.IsNullOrEmpty(defualtValue = node.Attributes[\"default\"] != null ? node.Attributes[\"default\"].Value.Trim() : null))\n                        dc.DefaultValue = defualtValue;\n                    dt.Columns.Add(dc);\n\n                }\n                return dt;\n            }\n            return null;\n        }\n\n        /// <summary>\n        /// 用SBC方法插入数据库\n        /// </summary>\n        /// <param name=\"ConnectionStringKey\">要插入的数据库</param>\n        /// <param name=\"pDataTable\">要插入的DATATABLE</param>\n        /// <param name=\"pTableName\">对应的数据库表名</param>\n        /// <param name=\"pBulkCopyTimeout\">数据库连接过期时间,单位：秒</param>\n        public static void UseSBCInsertDB(string ConnectionStringKey, DataTable pDataTable, string pTableName, int pBulkCopyTimeout = -1, bool appingFlag = false)\n        {\n            string connectionString = ConfigurationManager.ConnectionStrings[ConnectionStringKey].ConnectionString;\n            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(connectionString))\n            {\n                sqlBulkCopy.DestinationTableName = pTableName;\n                sqlBulkCopy.BatchSize = pDataTable.Rows.Count;\n                if (pBulkCopyTimeout > 0)\n                    sqlBulkCopy.BulkCopyTimeout = pBulkCopyTimeout;\n                if (appingFlag)\n                {\n                    foreach (DataColumn dc in pDataTable.Columns)\n                        sqlBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName);\n                }\n                using (SqlConnection sqlConnection = new SqlConnection(connectionString))\n                {\n                    sqlConnection.Open();\n                    if (pDataTable != null && pDataTable.Rows.Count != 0)\n                    {\n                        sqlBulkCopy.WriteToServer(pDataTable);\n                    }\n                }\n\n            }\n        }\n        #endregion\n\n        #region【转换文件】\n        public static string TransferFile(string fileFullName, bool isDelOriFile = true)\n        {\n            string path = Path.GetDirectoryName(fileFullName);\n            //fileFullName.Substring(0, fileFullName.LastIndexOf('\\\\'));\n            string newFileName = string.Format(\"{0}{1}.txt\", path, DateTime.Now.ToString(\"yyyyMMddHHmmss\"));\n            Encoding en = GetEncoding(fileFullName, Encoding.Default);\n            using (StreamReader sr = new StreamReader(fileFullName, en, true))\n            {\n                using (StreamWriter sw = new StreamWriter(newFileName, true, Encoding.UTF8))\n                {\n                    string strTmp;\n                    while (!sr.EndOfStream)\n                    {\n                        strTmp = sr.ReadLine();\n                        if (!string.IsNullOrEmpty(strTmp))\n                        {\n                            sw.WriteLine(strTmp);\n                        }\n                    }\n                    sw.Flush();\n                    sw.Close();\n                }\n            }\n            if (isDelOriFile && File.Exists(fileFullName))\n                File.Delete(fileFullName);\n            return newFileName;\n        }\n\n\n        /// <summary>\n        /// 取得一个文本文件的编码方式。\n        /// </summary>\n        /// <param name=\"fileName\">文件名。</param>\n        /// <param name=\"defaultEncoding\">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>\n        /// <returns></returns>\n        public static Encoding GetEncoding(string fileName, Encoding defaultEncoding)\n        {\n            using (FileStream fs = new FileStream(fileName, FileMode.Open))\n            {\n                Encoding targetEncoding = GetEncoding(fs, defaultEncoding);\n                fs.Close();\n                return targetEncoding;\n            }\n        }\n\n\n        /// <summary>\n        /// 取得一个文本文件流的编码方式。\n        /// </summary>\n        /// <param name=\"stream\">文本文件流。</param>\n        /// <param name=\"defaultEncoding\">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>\n        /// <returns></returns>\n        public static Encoding GetEncoding(FileStream stream, Encoding defaultEncoding)\n        {\n\n            Encoding targetEncoding = defaultEncoding;\n            if (stream != null && stream.Length >= 2)\n            {\n\n                //保存文件流的前4个字节\n                byte byte1 = 0;\n                byte byte2 = 0;\n                byte byte3 = 0;\n                byte byte4 = 0;\n                //保存当前Seek位置\n                long origPos = stream.Seek(0, SeekOrigin.Begin);\n                stream.Seek(0, SeekOrigin.Begin);\n                int nByte = stream.ReadByte();\n                byte1 = Convert.ToByte(nByte);\n                byte2 = Convert.ToByte(stream.ReadByte());\n                if (stream.Length >= 3)\n                {\n                    byte3 = Convert.ToByte(stream.ReadByte());\n                }\n\n                if (stream.Length >= 4)\n                {\n                    byte4 = Convert.ToByte(stream.ReadByte());\n                }\n                //根据文件流的前4个字节判断Encoding\n                //Unicode {0xFF, 0xFE};\n                //BE-Unicode {0xFE, 0xFF};\n                //UTF8 = {0xEF, 0xBB, 0xBF};\n                if (byte1 == 0xFE && byte2 == 0xFF)//UnicodeBe\n                {\n                    targetEncoding = Encoding.BigEndianUnicode;\n                }\n\n                if (byte1 == 0xFF && byte2 == 0xFE && byte3 != 0xFF)//Unicode\n                {\n                    targetEncoding = Encoding.Unicode;\n                }\n\n                if (byte1 == 0xEF && byte2 == 0xBB && byte3 == 0xBF)//UTF8\n                {\n\n                    targetEncoding = Encoding.UTF8;\n\n                }\n\n                //恢复Seek位置       \n                stream.Seek(origPos, SeekOrigin.Begin);\n            }\n\n            return targetEncoding;\n        }\n        #endregion\n\n\n    }\n}\n\n```\n","slug":"2018-03-09-SBC大数据导入(代码)","published":1,"updated":"2018-03-09T12:09:01.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjejyqgrq000gd0q86rvgubog","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Text;</span><br><span class=\"line\">using System.Data;</span><br><span class=\"line\">using System.IO;</span><br><span class=\"line\">using System.Threading;</span><br><span class=\"line\">using System.Web;</span><br><span class=\"line\">using System.Xml;</span><br><span class=\"line\">using System.Configuration;</span><br><span class=\"line\">using System.Data.SqlClient;</span><br><span class=\"line\">using WXMP.WinService.Data;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace Utility.DataImport</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class TxtImport</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 导入数据</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileName&quot;&gt;文件名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;xmlTableName&quot;&gt;xml配置名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;RealTableName&quot;&gt;数据库表名称&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultValue&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;ConnectionKeyName&quot;&gt;数据库连接配置&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;heardRowCount&quot;&gt;文件头定义行数&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;footRowCount&quot;&gt;文件尾定义行数&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static int ImportData(string fileName, string xmlTableName, Dictionary&lt;string, object&gt; defaultValue, string ConnectionKeyName = &quot;default&quot;, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (fileName == &quot;&quot;)</span><br><span class=\"line\">                return 0;</span><br><span class=\"line\">            return Insert(fileName, xmlTableName, defaultValue, ConnectionKeyName, heardRowCount, footRowCount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 导入文本文件</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileFullName&quot;&gt;文本全路径&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;文本里需要导入的列的数目&lt;/param&gt;</span><br><span class=\"line\">        public static int Insert(string fileFullName, string xmlTableName, Dictionary&lt;string, object&gt; defaultValue, string ConnectionKeyName, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string exesql = string.Empty;</span><br><span class=\"line\">            string tablename = string.Empty;</span><br><span class=\"line\">            DataTable dt = XmlToDataTable(xmlTableName, out tablename, out exesql);</span><br><span class=\"line\">            if (dt != null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                LoadAdpaterDataAndImport(fileFullName, dt.Columns.Count, dt, defaultValue, ConnectionKeyName, tablename, heardRowCount, footRowCount);</span><br><span class=\"line\"></span><br><span class=\"line\">                DbHelper.ExecuteNonQuery(exesql, ConnectionKeyName);</span><br><span class=\"line\">                return dt.Rows.Count;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// </span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileFullName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pDTScheme&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultValue&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;connectionName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;realTableName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;heardRowCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;footRowCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        public static void LoadAdpaterDataAndImport(string fileFullName, int columnCount, DataTable pDTScheme, Dictionary&lt;string, object&gt; defaultValue, string connectionName, string realTableName, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            try</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                using (StreamReader sr = new StreamReader(fileFullName, Encoding.Default, true))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    string strTmp;</span><br><span class=\"line\">                    DataRow dr;</span><br><span class=\"line\">                    int i = 0;</span><br><span class=\"line\">                    while (!sr.EndOfStream)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        strTmp = sr.ReadLine();</span><br><span class=\"line\">                        if (string.IsNullOrEmpty(strTmp))</span><br><span class=\"line\">                            continue;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                        if (i &lt;= heardRowCount) continue;</span><br><span class=\"line\">                        heardRowCount = 0;</span><br><span class=\"line\">                        dr = GetDataRow(strTmp, columnCount, pDTScheme, defaultValue);</span><br><span class=\"line\">                        if (dr != null)</span><br><span class=\"line\">                            pDTScheme.Rows.Add(dr);</span><br><span class=\"line\">                        if (i % 100000 == 0)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);</span><br><span class=\"line\">                            pDTScheme.Rows.Clear();</span><br><span class=\"line\">                            i = 0;</span><br><span class=\"line\">                            Thread.Sleep(1000);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (pDTScheme.Rows.Count &gt; 0)</span><br><span class=\"line\">                        UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);</span><br><span class=\"line\">                    DbHelper.ExecuteNonQuery(@&quot;INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES(&apos;&quot; + fileFullName.Substring(fileFullName.LastIndexOf(&quot;\\\\&quot;) + 1) + &quot;&apos;,&apos;&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;&apos;,&apos;&quot; + (i - heardRowCount - footRowCount).ToString() + &quot;&apos;,&apos;0&apos;);&quot;, connectionName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (Exception ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DbHelper.ExecuteNonQuery(@&quot;INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES(&apos;&quot; + fileFullName.Substring(fileFullName.LastIndexOf(&quot;\\\\&quot;) + 1) + &quot;&apos;,&apos;&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;&apos;,&apos;&apos;,&apos;3&apos;);&quot;, connectionName);</span><br><span class=\"line\">                Utility.Logging.Log.Instance.Write(&quot;读取文件发生异常&quot; + ex.Message, Logging.MessageType.Error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        protected static DataRow GetDataRow(string strTmp, int columnCount, DataTable pDTScheme, Dictionary&lt;string, object&gt; defaultValue)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string[] result = strTmp.Split(new string[] &#123; &quot;&amp;&amp;&quot; &#125;, StringSplitOptions.None);</span><br><span class=\"line\">            DataRow dr = null;</span><br><span class=\"line\">            if (result.Length &gt;= columnCount)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dr = pDTScheme.NewRow();</span><br><span class=\"line\">                for (int n = 0; n &lt; columnCount; n++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    try</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (pDTScheme.Columns[n].DataType == typeof(System.Decimal) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType == typeof(System.Int32) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType != typeof(System.String) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = DBNull.Value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType != typeof(System.DateTime) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = DBNull.Value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                            dr[n] = result[n];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    catch</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        dr[n] = DBNull.Value;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Type t = null;</span><br><span class=\"line\">                DataColumn dc = null;</span><br><span class=\"line\">                object obj = null;</span><br><span class=\"line\">                for (int n = columnCount; n &lt; pDTScheme.Columns.Count; n++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dc = pDTScheme.Columns[n];</span><br><span class=\"line\">                    if (defaultValue != null)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (defaultValue.TryGetValue(dc.ColumnName, out obj))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = obj;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            if (dc.DefaultValue == DBNull.Value)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                t = pDTScheme.Columns[n].DataType;</span><br><span class=\"line\">                                if (t == typeof(String))</span><br><span class=\"line\">                                    dr[n] = &quot;&quot;;</span><br><span class=\"line\">                                else if (t == typeof(Guid))</span><br><span class=\"line\">                                    dr[n] = Guid.NewGuid();</span><br><span class=\"line\">                                else if (t == typeof(DateTime))</span><br><span class=\"line\">                                    dr[n] = DateTime.Now;</span><br><span class=\"line\">                                else if (t == typeof(int))</span><br><span class=\"line\">                                    dr[n] = 0;</span><br><span class=\"line\">                                else if (t == typeof(decimal))</span><br><span class=\"line\">                                    dr[n] = 0.00;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            else</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                dr[n] = pDTScheme.Columns[n].DefaultValue;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (dc.DefaultValue == DBNull.Value)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            t = pDTScheme.Columns[n].DataType;</span><br><span class=\"line\">                            if (t == typeof(String))</span><br><span class=\"line\">                                dr[n] = &quot;&quot;;</span><br><span class=\"line\">                            else if (t == typeof(Guid))</span><br><span class=\"line\">                                dr[n] = Guid.NewGuid();</span><br><span class=\"line\">                            else if (t == typeof(DateTime))</span><br><span class=\"line\">                                dr[n] = DateTime.Now;</span><br><span class=\"line\">                            else if (t == typeof(int))</span><br><span class=\"line\">                                dr[n] = 0;</span><br><span class=\"line\">                            else if (t == typeof(decimal))</span><br><span class=\"line\">                                dr[n] = 0.00;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = pDTScheme.Columns[n].DefaultValue;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return dr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        #region【封装的业务逻辑方法，配合InsertBossDetail进行使用】</span><br><span class=\"line\">        public static DataTable XmlToDataTable(string dataName, out string tablename, out string exesql)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tablename = string.Empty;</span><br><span class=\"line\">            exesql = string.Empty;</span><br><span class=\"line\">            string path = System.AppDomain.CurrentDomain.BaseDirectory + &quot;/Config/Imps.config&quot;;</span><br><span class=\"line\">            XmlDocument doc = new XmlDocument();</span><br><span class=\"line\">            doc.Load(path);</span><br><span class=\"line\">            XmlNode tableRoot = doc.SelectSingleNode(&quot;/imps/imp[@name=&apos;&quot; + dataName + &quot;&apos;]&quot;);</span><br><span class=\"line\">            if (tableRoot != null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                DataTable dt = new DataTable();</span><br><span class=\"line\">                DataColumn dc = null;</span><br><span class=\"line\">                string defualtValue;</span><br><span class=\"line\">                tablename = tableRoot.SelectSingleNode(&quot;table&quot;).Attributes[&quot;name&quot;].Value;</span><br><span class=\"line\">                exesql = tableRoot.SelectSingleNode(&quot;sql&quot;).InnerText;</span><br><span class=\"line\">                foreach (XmlNode node in tableRoot.SelectSingleNode(&quot;table&quot;).ChildNodes)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dc = new DataColumn(node.Attributes[&quot;name&quot;].Value.Trim(), Type.GetType(node.Attributes[&quot;type&quot;].Value.Trim()));</span><br><span class=\"line\">                    if (!string.IsNullOrEmpty(defualtValue = node.Attributes[&quot;default&quot;] != null ? node.Attributes[&quot;default&quot;].Value.Trim() : null))</span><br><span class=\"line\">                        dc.DefaultValue = defualtValue;</span><br><span class=\"line\">                    dt.Columns.Add(dc);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return dt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 用SBC方法插入数据库</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;ConnectionStringKey&quot;&gt;要插入的数据库&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pDataTable&quot;&gt;要插入的DATATABLE&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pTableName&quot;&gt;对应的数据库表名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pBulkCopyTimeout&quot;&gt;数据库连接过期时间,单位：秒&lt;/param&gt;</span><br><span class=\"line\">        public static void UseSBCInsertDB(string ConnectionStringKey, DataTable pDataTable, string pTableName, int pBulkCopyTimeout = -1, bool appingFlag = false)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string connectionString = ConfigurationManager.ConnectionStrings[ConnectionStringKey].ConnectionString;</span><br><span class=\"line\">            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sqlBulkCopy.DestinationTableName = pTableName;</span><br><span class=\"line\">                sqlBulkCopy.BatchSize = pDataTable.Rows.Count;</span><br><span class=\"line\">                if (pBulkCopyTimeout &gt; 0)</span><br><span class=\"line\">                    sqlBulkCopy.BulkCopyTimeout = pBulkCopyTimeout;</span><br><span class=\"line\">                if (appingFlag)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    foreach (DataColumn dc in pDataTable.Columns)</span><br><span class=\"line\">                        sqlBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                using (SqlConnection sqlConnection = new SqlConnection(connectionString))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    sqlConnection.Open();</span><br><span class=\"line\">                    if (pDataTable != null &amp;&amp; pDataTable.Rows.Count != 0)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        sqlBulkCopy.WriteToServer(pDataTable);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">        #region【转换文件】</span><br><span class=\"line\">        public static string TransferFile(string fileFullName, bool isDelOriFile = true)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string path = Path.GetDirectoryName(fileFullName);</span><br><span class=\"line\">            //fileFullName.Substring(0, fileFullName.LastIndexOf(&apos;\\\\&apos;));</span><br><span class=\"line\">            string newFileName = string.Format(&quot;&#123;0&#125;&#123;1&#125;.txt&quot;, path, DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;));</span><br><span class=\"line\">            Encoding en = GetEncoding(fileFullName, Encoding.Default);</span><br><span class=\"line\">            using (StreamReader sr = new StreamReader(fileFullName, en, true))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                using (StreamWriter sw = new StreamWriter(newFileName, true, Encoding.UTF8))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    string strTmp;</span><br><span class=\"line\">                    while (!sr.EndOfStream)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        strTmp = sr.ReadLine();</span><br><span class=\"line\">                        if (!string.IsNullOrEmpty(strTmp))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            sw.WriteLine(strTmp);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    sw.Flush();</span><br><span class=\"line\">                    sw.Close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (isDelOriFile &amp;&amp; File.Exists(fileFullName))</span><br><span class=\"line\">                File.Delete(fileFullName);</span><br><span class=\"line\">            return newFileName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 取得一个文本文件的编码方式。</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileName&quot;&gt;文件名。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultEncoding&quot;&gt;默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static Encoding GetEncoding(string fileName, Encoding defaultEncoding)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            using (FileStream fs = new FileStream(fileName, FileMode.Open))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Encoding targetEncoding = GetEncoding(fs, defaultEncoding);</span><br><span class=\"line\">                fs.Close();</span><br><span class=\"line\">                return targetEncoding;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 取得一个文本文件流的编码方式。</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;stream&quot;&gt;文本文件流。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultEncoding&quot;&gt;默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static Encoding GetEncoding(FileStream stream, Encoding defaultEncoding)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Encoding targetEncoding = defaultEncoding;</span><br><span class=\"line\">            if (stream != null &amp;&amp; stream.Length &gt;= 2)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                //保存文件流的前4个字节</span><br><span class=\"line\">                byte byte1 = 0;</span><br><span class=\"line\">                byte byte2 = 0;</span><br><span class=\"line\">                byte byte3 = 0;</span><br><span class=\"line\">                byte byte4 = 0;</span><br><span class=\"line\">                //保存当前Seek位置</span><br><span class=\"line\">                long origPos = stream.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">                stream.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">                int nByte = stream.ReadByte();</span><br><span class=\"line\">                byte1 = Convert.ToByte(nByte);</span><br><span class=\"line\">                byte2 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                if (stream.Length &gt;= 3)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    byte3 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (stream.Length &gt;= 4)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    byte4 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //根据文件流的前4个字节判断Encoding</span><br><span class=\"line\">                //Unicode &#123;0xFF, 0xFE&#125;;</span><br><span class=\"line\">                //BE-Unicode &#123;0xFE, 0xFF&#125;;</span><br><span class=\"line\">                //UTF8 = &#123;0xEF, 0xBB, 0xBF&#125;;</span><br><span class=\"line\">                if (byte1 == 0xFE &amp;&amp; byte2 == 0xFF)//UnicodeBe</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    targetEncoding = Encoding.BigEndianUnicode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (byte1 == 0xFF &amp;&amp; byte2 == 0xFE &amp;&amp; byte3 != 0xFF)//Unicode</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    targetEncoding = Encoding.Unicode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (byte1 == 0xEF &amp;&amp; byte2 == 0xBB &amp;&amp; byte3 == 0xBF)//UTF8</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    targetEncoding = Encoding.UTF8;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //恢复Seek位置       </span><br><span class=\"line\">                stream.Seek(origPos, SeekOrigin.Begin);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return targetEncoding;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #endregion</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using System;</span><br><span class=\"line\">using System.Collections.Generic;</span><br><span class=\"line\">using System.Text;</span><br><span class=\"line\">using System.Data;</span><br><span class=\"line\">using System.IO;</span><br><span class=\"line\">using System.Threading;</span><br><span class=\"line\">using System.Web;</span><br><span class=\"line\">using System.Xml;</span><br><span class=\"line\">using System.Configuration;</span><br><span class=\"line\">using System.Data.SqlClient;</span><br><span class=\"line\">using WXMP.WinService.Data;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace Utility.DataImport</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class TxtImport</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 导入数据</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileName&quot;&gt;文件名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;xmlTableName&quot;&gt;xml配置名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;RealTableName&quot;&gt;数据库表名称&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultValue&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;ConnectionKeyName&quot;&gt;数据库连接配置&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;heardRowCount&quot;&gt;文件头定义行数&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;footRowCount&quot;&gt;文件尾定义行数&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static int ImportData(string fileName, string xmlTableName, Dictionary&lt;string, object&gt; defaultValue, string ConnectionKeyName = &quot;default&quot;, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (fileName == &quot;&quot;)</span><br><span class=\"line\">                return 0;</span><br><span class=\"line\">            return Insert(fileName, xmlTableName, defaultValue, ConnectionKeyName, heardRowCount, footRowCount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 导入文本文件</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileFullName&quot;&gt;文本全路径&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;文本里需要导入的列的数目&lt;/param&gt;</span><br><span class=\"line\">        public static int Insert(string fileFullName, string xmlTableName, Dictionary&lt;string, object&gt; defaultValue, string ConnectionKeyName, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string exesql = string.Empty;</span><br><span class=\"line\">            string tablename = string.Empty;</span><br><span class=\"line\">            DataTable dt = XmlToDataTable(xmlTableName, out tablename, out exesql);</span><br><span class=\"line\">            if (dt != null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                LoadAdpaterDataAndImport(fileFullName, dt.Columns.Count, dt, defaultValue, ConnectionKeyName, tablename, heardRowCount, footRowCount);</span><br><span class=\"line\"></span><br><span class=\"line\">                DbHelper.ExecuteNonQuery(exesql, ConnectionKeyName);</span><br><span class=\"line\">                return dt.Rows.Count;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// </span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileFullName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;columnCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pDTScheme&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultValue&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;connectionName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;realTableName&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;heardRowCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;footRowCount&quot;&gt;&lt;/param&gt;</span><br><span class=\"line\">        public static void LoadAdpaterDataAndImport(string fileFullName, int columnCount, DataTable pDTScheme, Dictionary&lt;string, object&gt; defaultValue, string connectionName, string realTableName, int heardRowCount = 0, int footRowCount = 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            try</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                using (StreamReader sr = new StreamReader(fileFullName, Encoding.Default, true))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    string strTmp;</span><br><span class=\"line\">                    DataRow dr;</span><br><span class=\"line\">                    int i = 0;</span><br><span class=\"line\">                    while (!sr.EndOfStream)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        strTmp = sr.ReadLine();</span><br><span class=\"line\">                        if (string.IsNullOrEmpty(strTmp))</span><br><span class=\"line\">                            continue;</span><br><span class=\"line\">                        i++;</span><br><span class=\"line\">                        if (i &lt;= heardRowCount) continue;</span><br><span class=\"line\">                        heardRowCount = 0;</span><br><span class=\"line\">                        dr = GetDataRow(strTmp, columnCount, pDTScheme, defaultValue);</span><br><span class=\"line\">                        if (dr != null)</span><br><span class=\"line\">                            pDTScheme.Rows.Add(dr);</span><br><span class=\"line\">                        if (i % 100000 == 0)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);</span><br><span class=\"line\">                            pDTScheme.Rows.Clear();</span><br><span class=\"line\">                            i = 0;</span><br><span class=\"line\">                            Thread.Sleep(1000);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    if (pDTScheme.Rows.Count &gt; 0)</span><br><span class=\"line\">                        UseSBCInsertDB(connectionName, pDTScheme, realTableName, 9000, true);</span><br><span class=\"line\">                    DbHelper.ExecuteNonQuery(@&quot;INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES(&apos;&quot; + fileFullName.Substring(fileFullName.LastIndexOf(&quot;\\\\&quot;) + 1) + &quot;&apos;,&apos;&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;&apos;,&apos;&quot; + (i - heardRowCount - footRowCount).ToString() + &quot;&apos;,&apos;0&apos;);&quot;, connectionName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch (Exception ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DbHelper.ExecuteNonQuery(@&quot;INSERT INTO dbo.T_R01_FileLoadInfo(ImpName,LoadTime,RecordCount,LoadStatus)VALUES(&apos;&quot; + fileFullName.Substring(fileFullName.LastIndexOf(&quot;\\\\&quot;) + 1) + &quot;&apos;,&apos;&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + &quot;&apos;,&apos;&apos;,&apos;3&apos;);&quot;, connectionName);</span><br><span class=\"line\">                Utility.Logging.Log.Instance.Write(&quot;读取文件发生异常&quot; + ex.Message, Logging.MessageType.Error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        protected static DataRow GetDataRow(string strTmp, int columnCount, DataTable pDTScheme, Dictionary&lt;string, object&gt; defaultValue)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string[] result = strTmp.Split(new string[] &#123; &quot;&amp;&amp;&quot; &#125;, StringSplitOptions.None);</span><br><span class=\"line\">            DataRow dr = null;</span><br><span class=\"line\">            if (result.Length &gt;= columnCount)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dr = pDTScheme.NewRow();</span><br><span class=\"line\">                for (int n = 0; n &lt; columnCount; n++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    try</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (pDTScheme.Columns[n].DataType == typeof(System.Decimal) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType == typeof(System.Int32) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = 0;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType != typeof(System.String) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = DBNull.Value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else if (pDTScheme.Columns[n].DataType != typeof(System.DateTime) &amp;&amp; result[n] == &quot;&quot;)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = DBNull.Value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                            dr[n] = result[n];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    catch</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        dr[n] = DBNull.Value;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Type t = null;</span><br><span class=\"line\">                DataColumn dc = null;</span><br><span class=\"line\">                object obj = null;</span><br><span class=\"line\">                for (int n = columnCount; n &lt; pDTScheme.Columns.Count; n++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dc = pDTScheme.Columns[n];</span><br><span class=\"line\">                    if (defaultValue != null)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (defaultValue.TryGetValue(dc.ColumnName, out obj))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = obj;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            if (dc.DefaultValue == DBNull.Value)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                t = pDTScheme.Columns[n].DataType;</span><br><span class=\"line\">                                if (t == typeof(String))</span><br><span class=\"line\">                                    dr[n] = &quot;&quot;;</span><br><span class=\"line\">                                else if (t == typeof(Guid))</span><br><span class=\"line\">                                    dr[n] = Guid.NewGuid();</span><br><span class=\"line\">                                else if (t == typeof(DateTime))</span><br><span class=\"line\">                                    dr[n] = DateTime.Now;</span><br><span class=\"line\">                                else if (t == typeof(int))</span><br><span class=\"line\">                                    dr[n] = 0;</span><br><span class=\"line\">                                else if (t == typeof(decimal))</span><br><span class=\"line\">                                    dr[n] = 0.00;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            else</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                dr[n] = pDTScheme.Columns[n].DefaultValue;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (dc.DefaultValue == DBNull.Value)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            t = pDTScheme.Columns[n].DataType;</span><br><span class=\"line\">                            if (t == typeof(String))</span><br><span class=\"line\">                                dr[n] = &quot;&quot;;</span><br><span class=\"line\">                            else if (t == typeof(Guid))</span><br><span class=\"line\">                                dr[n] = Guid.NewGuid();</span><br><span class=\"line\">                            else if (t == typeof(DateTime))</span><br><span class=\"line\">                                dr[n] = DateTime.Now;</span><br><span class=\"line\">                            else if (t == typeof(int))</span><br><span class=\"line\">                                dr[n] = 0;</span><br><span class=\"line\">                            else if (t == typeof(decimal))</span><br><span class=\"line\">                                dr[n] = 0.00;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            dr[n] = pDTScheme.Columns[n].DefaultValue;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return dr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        #region【封装的业务逻辑方法，配合InsertBossDetail进行使用】</span><br><span class=\"line\">        public static DataTable XmlToDataTable(string dataName, out string tablename, out string exesql)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tablename = string.Empty;</span><br><span class=\"line\">            exesql = string.Empty;</span><br><span class=\"line\">            string path = System.AppDomain.CurrentDomain.BaseDirectory + &quot;/Config/Imps.config&quot;;</span><br><span class=\"line\">            XmlDocument doc = new XmlDocument();</span><br><span class=\"line\">            doc.Load(path);</span><br><span class=\"line\">            XmlNode tableRoot = doc.SelectSingleNode(&quot;/imps/imp[@name=&apos;&quot; + dataName + &quot;&apos;]&quot;);</span><br><span class=\"line\">            if (tableRoot != null)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                DataTable dt = new DataTable();</span><br><span class=\"line\">                DataColumn dc = null;</span><br><span class=\"line\">                string defualtValue;</span><br><span class=\"line\">                tablename = tableRoot.SelectSingleNode(&quot;table&quot;).Attributes[&quot;name&quot;].Value;</span><br><span class=\"line\">                exesql = tableRoot.SelectSingleNode(&quot;sql&quot;).InnerText;</span><br><span class=\"line\">                foreach (XmlNode node in tableRoot.SelectSingleNode(&quot;table&quot;).ChildNodes)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dc = new DataColumn(node.Attributes[&quot;name&quot;].Value.Trim(), Type.GetType(node.Attributes[&quot;type&quot;].Value.Trim()));</span><br><span class=\"line\">                    if (!string.IsNullOrEmpty(defualtValue = node.Attributes[&quot;default&quot;] != null ? node.Attributes[&quot;default&quot;].Value.Trim() : null))</span><br><span class=\"line\">                        dc.DefaultValue = defualtValue;</span><br><span class=\"line\">                    dt.Columns.Add(dc);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return dt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 用SBC方法插入数据库</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;ConnectionStringKey&quot;&gt;要插入的数据库&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pDataTable&quot;&gt;要插入的DATATABLE&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pTableName&quot;&gt;对应的数据库表名&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;pBulkCopyTimeout&quot;&gt;数据库连接过期时间,单位：秒&lt;/param&gt;</span><br><span class=\"line\">        public static void UseSBCInsertDB(string ConnectionStringKey, DataTable pDataTable, string pTableName, int pBulkCopyTimeout = -1, bool appingFlag = false)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string connectionString = ConfigurationManager.ConnectionStrings[ConnectionStringKey].ConnectionString;</span><br><span class=\"line\">            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(connectionString))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sqlBulkCopy.DestinationTableName = pTableName;</span><br><span class=\"line\">                sqlBulkCopy.BatchSize = pDataTable.Rows.Count;</span><br><span class=\"line\">                if (pBulkCopyTimeout &gt; 0)</span><br><span class=\"line\">                    sqlBulkCopy.BulkCopyTimeout = pBulkCopyTimeout;</span><br><span class=\"line\">                if (appingFlag)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    foreach (DataColumn dc in pDataTable.Columns)</span><br><span class=\"line\">                        sqlBulkCopy.ColumnMappings.Add(dc.ColumnName, dc.ColumnName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                using (SqlConnection sqlConnection = new SqlConnection(connectionString))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    sqlConnection.Open();</span><br><span class=\"line\">                    if (pDataTable != null &amp;&amp; pDataTable.Rows.Count != 0)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        sqlBulkCopy.WriteToServer(pDataTable);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #endregion</span><br><span class=\"line\"></span><br><span class=\"line\">        #region【转换文件】</span><br><span class=\"line\">        public static string TransferFile(string fileFullName, bool isDelOriFile = true)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            string path = Path.GetDirectoryName(fileFullName);</span><br><span class=\"line\">            //fileFullName.Substring(0, fileFullName.LastIndexOf(&apos;\\\\&apos;));</span><br><span class=\"line\">            string newFileName = string.Format(&quot;&#123;0&#125;&#123;1&#125;.txt&quot;, path, DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;));</span><br><span class=\"line\">            Encoding en = GetEncoding(fileFullName, Encoding.Default);</span><br><span class=\"line\">            using (StreamReader sr = new StreamReader(fileFullName, en, true))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                using (StreamWriter sw = new StreamWriter(newFileName, true, Encoding.UTF8))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    string strTmp;</span><br><span class=\"line\">                    while (!sr.EndOfStream)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        strTmp = sr.ReadLine();</span><br><span class=\"line\">                        if (!string.IsNullOrEmpty(strTmp))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            sw.WriteLine(strTmp);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    sw.Flush();</span><br><span class=\"line\">                    sw.Close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (isDelOriFile &amp;&amp; File.Exists(fileFullName))</span><br><span class=\"line\">                File.Delete(fileFullName);</span><br><span class=\"line\">            return newFileName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 取得一个文本文件的编码方式。</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;fileName&quot;&gt;文件名。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultEncoding&quot;&gt;默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static Encoding GetEncoding(string fileName, Encoding defaultEncoding)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            using (FileStream fs = new FileStream(fileName, FileMode.Open))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Encoding targetEncoding = GetEncoding(fs, defaultEncoding);</span><br><span class=\"line\">                fs.Close();</span><br><span class=\"line\">                return targetEncoding;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        /// &lt;summary&gt;</span><br><span class=\"line\">        /// 取得一个文本文件流的编码方式。</span><br><span class=\"line\">        /// &lt;/summary&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;stream&quot;&gt;文本文件流。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;param name=&quot;defaultEncoding&quot;&gt;默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。&lt;/param&gt;</span><br><span class=\"line\">        /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class=\"line\">        public static Encoding GetEncoding(FileStream stream, Encoding defaultEncoding)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Encoding targetEncoding = defaultEncoding;</span><br><span class=\"line\">            if (stream != null &amp;&amp; stream.Length &gt;= 2)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                //保存文件流的前4个字节</span><br><span class=\"line\">                byte byte1 = 0;</span><br><span class=\"line\">                byte byte2 = 0;</span><br><span class=\"line\">                byte byte3 = 0;</span><br><span class=\"line\">                byte byte4 = 0;</span><br><span class=\"line\">                //保存当前Seek位置</span><br><span class=\"line\">                long origPos = stream.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">                stream.Seek(0, SeekOrigin.Begin);</span><br><span class=\"line\">                int nByte = stream.ReadByte();</span><br><span class=\"line\">                byte1 = Convert.ToByte(nByte);</span><br><span class=\"line\">                byte2 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                if (stream.Length &gt;= 3)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    byte3 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (stream.Length &gt;= 4)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    byte4 = Convert.ToByte(stream.ReadByte());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //根据文件流的前4个字节判断Encoding</span><br><span class=\"line\">                //Unicode &#123;0xFF, 0xFE&#125;;</span><br><span class=\"line\">                //BE-Unicode &#123;0xFE, 0xFF&#125;;</span><br><span class=\"line\">                //UTF8 = &#123;0xEF, 0xBB, 0xBF&#125;;</span><br><span class=\"line\">                if (byte1 == 0xFE &amp;&amp; byte2 == 0xFF)//UnicodeBe</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    targetEncoding = Encoding.BigEndianUnicode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (byte1 == 0xFF &amp;&amp; byte2 == 0xFE &amp;&amp; byte3 != 0xFF)//Unicode</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    targetEncoding = Encoding.Unicode;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                if (byte1 == 0xEF &amp;&amp; byte2 == 0xBB &amp;&amp; byte3 == 0xBF)//UTF8</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    targetEncoding = Encoding.UTF8;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                //恢复Seek位置       </span><br><span class=\"line\">                stream.Seek(origPos, SeekOrigin.Begin);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return targetEncoding;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #endregion</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"c1-进程空间,一维数组","date":"2018-03-09T12:49:16.000Z","_content":"\n### 1.数据类型:\n#### 1.1.\n1. 数据类型的作用：在线性的内存中添加一种逻辑操作\n\n#### 1.2.补码的特点：\n1. 正数的补码是他本身\n2. 负数的补码：该负数对应的正数的补码取反加一\n3. 一个8位的有符号的数据范围为什么是-128到127：因为补码编码的格式不同导致\n\n#### 1.3.数据在内存中的意义:\n1. 数据本身是没有意义的，只是要看我们怎样来解释他\n\n#### 1.4.类型转化:\n1. 小类型遇到大类型需要转化为大类型，位数不够的话会根据原类型的符号位来补位（是0补0，是1补1）\n2. 整形遇到浮点型需要转化为浮点型\n3. 有符号和无符号的运算结果是有符号的\n4. 转化都是低位对低位进行取值（低位对齐）\n\n\n### 2.进程空间:\n#### 2.1.虚拟空间:\n1. 虚拟内存不是我们生活上指的内存条，而是我们通过他来映射到物理内存的一套机制；\n2. 虚拟内存的好处：早先的电脑是直接将我们运行的程序加载到物理内存中，所以会造成不同的程序直接可以相互调用的后果（很不安全），但是有了这套机制之后，就没有这个缺点了\n\n#### 2.2.变量的存放区域总结:\n1. 只要是未初始化的全局或者是静态变量全部储存在data段的未初始化数据段(bss)，默认初始化为0\n2. auto的局部变量名无论初始化或者未初始化都储存在栈空间\n3. 所有的常量都是存储在data区域的只读区域\n4. text是储存二进制文件（运行程序）(.exe/.out)的地方\n\n#### 2.3.图示:\n![进程空间](1.jpg)\n\n\n### 3.数组以及练习:\n[点击查看代码](1.c)\n<font color=red>注意:</font>地址的加减其实是加减地址所指向空间的数量，只有&+数组名才是操作数组的整体","source":"_posts/2018-03-09-c1-进程空间,一维数组.md","raw":"---\ntitle: c1-进程空间,一维数组\ndate: 2018-03-09 20:49:16\ncategories: 技术\ntags: c/c++\n---\n\n### 1.数据类型:\n#### 1.1.\n1. 数据类型的作用：在线性的内存中添加一种逻辑操作\n\n#### 1.2.补码的特点：\n1. 正数的补码是他本身\n2. 负数的补码：该负数对应的正数的补码取反加一\n3. 一个8位的有符号的数据范围为什么是-128到127：因为补码编码的格式不同导致\n\n#### 1.3.数据在内存中的意义:\n1. 数据本身是没有意义的，只是要看我们怎样来解释他\n\n#### 1.4.类型转化:\n1. 小类型遇到大类型需要转化为大类型，位数不够的话会根据原类型的符号位来补位（是0补0，是1补1）\n2. 整形遇到浮点型需要转化为浮点型\n3. 有符号和无符号的运算结果是有符号的\n4. 转化都是低位对低位进行取值（低位对齐）\n\n\n### 2.进程空间:\n#### 2.1.虚拟空间:\n1. 虚拟内存不是我们生活上指的内存条，而是我们通过他来映射到物理内存的一套机制；\n2. 虚拟内存的好处：早先的电脑是直接将我们运行的程序加载到物理内存中，所以会造成不同的程序直接可以相互调用的后果（很不安全），但是有了这套机制之后，就没有这个缺点了\n\n#### 2.2.变量的存放区域总结:\n1. 只要是未初始化的全局或者是静态变量全部储存在data段的未初始化数据段(bss)，默认初始化为0\n2. auto的局部变量名无论初始化或者未初始化都储存在栈空间\n3. 所有的常量都是存储在data区域的只读区域\n4. text是储存二进制文件（运行程序）(.exe/.out)的地方\n\n#### 2.3.图示:\n![进程空间](1.jpg)\n\n\n### 3.数组以及练习:\n[点击查看代码](1.c)\n<font color=red>注意:</font>地址的加减其实是加减地址所指向空间的数量，只有&+数组名才是操作数组的整体","slug":"2018-03-09-c1-进程空间,一维数组","published":1,"updated":"2018-03-09T13:13:37.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjejyqgru000jd0q8iswejlos","content":"<h3 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1.数据类型:\"></a>1.数据类型:</h3><h4 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.1.\"></a>1.1.</h4><ol>\n<li>数据类型的作用：在线性的内存中添加一种逻辑操作</li>\n</ol>\n<h4 id=\"1-2-补码的特点：\"><a href=\"#1-2-补码的特点：\" class=\"headerlink\" title=\"1.2.补码的特点：\"></a>1.2.补码的特点：</h4><ol>\n<li>正数的补码是他本身</li>\n<li>负数的补码：该负数对应的正数的补码取反加一</li>\n<li>一个8位的有符号的数据范围为什么是-128到127：因为补码编码的格式不同导致</li>\n</ol>\n<h4 id=\"1-3-数据在内存中的意义\"><a href=\"#1-3-数据在内存中的意义\" class=\"headerlink\" title=\"1.3.数据在内存中的意义:\"></a>1.3.数据在内存中的意义:</h4><ol>\n<li>数据本身是没有意义的，只是要看我们怎样来解释他</li>\n</ol>\n<h4 id=\"1-4-类型转化\"><a href=\"#1-4-类型转化\" class=\"headerlink\" title=\"1.4.类型转化:\"></a>1.4.类型转化:</h4><ol>\n<li>小类型遇到大类型需要转化为大类型，位数不够的话会根据原类型的符号位来补位（是0补0，是1补1）</li>\n<li>整形遇到浮点型需要转化为浮点型</li>\n<li>有符号和无符号的运算结果是有符号的</li>\n<li>转化都是低位对低位进行取值（低位对齐）</li>\n</ol>\n<h3 id=\"2-进程空间\"><a href=\"#2-进程空间\" class=\"headerlink\" title=\"2.进程空间:\"></a>2.进程空间:</h3><h4 id=\"2-1-虚拟空间\"><a href=\"#2-1-虚拟空间\" class=\"headerlink\" title=\"2.1.虚拟空间:\"></a>2.1.虚拟空间:</h4><ol>\n<li>虚拟内存不是我们生活上指的内存条，而是我们通过他来映射到物理内存的一套机制；</li>\n<li>虚拟内存的好处：早先的电脑是直接将我们运行的程序加载到物理内存中，所以会造成不同的程序直接可以相互调用的后果（很不安全），但是有了这套机制之后，就没有这个缺点了</li>\n</ol>\n<h4 id=\"2-2-变量的存放区域总结\"><a href=\"#2-2-变量的存放区域总结\" class=\"headerlink\" title=\"2.2.变量的存放区域总结:\"></a>2.2.变量的存放区域总结:</h4><ol>\n<li>只要是未初始化的全局或者是静态变量全部储存在data段的未初始化数据段(bss)，默认初始化为0</li>\n<li>auto的局部变量名无论初始化或者未初始化都储存在栈空间</li>\n<li>所有的常量都是存储在data区域的只读区域</li>\n<li>text是储存二进制文件（运行程序）(.exe/.out)的地方</li>\n</ol>\n<h4 id=\"2-3-图示\"><a href=\"#2-3-图示\" class=\"headerlink\" title=\"2.3.图示:\"></a>2.3.图示:</h4><p><img src=\"/2018/03/09/2018-03-09-c1-进程空间,一维数组/1.jpg\" alt=\"进程空间\"></p>\n<h3 id=\"3-数组以及练习\"><a href=\"#3-数组以及练习\" class=\"headerlink\" title=\"3.数组以及练习:\"></a>3.数组以及练习:</h3><p><a href=\"1.c\">点击查看代码</a></p>\n<p><font color=\"red\">注意:</font>地址的加减其实是加减地址所指向空间的数量，只有&amp;+数组名才是操作数组的整体</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1.数据类型:\"></a>1.数据类型:</h3><h4 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.1.\"></a>1.1.</h4><ol>\n<li>数据类型的作用：在线性的内存中添加一种逻辑操作</li>\n</ol>\n<h4 id=\"1-2-补码的特点：\"><a href=\"#1-2-补码的特点：\" class=\"headerlink\" title=\"1.2.补码的特点：\"></a>1.2.补码的特点：</h4><ol>\n<li>正数的补码是他本身</li>\n<li>负数的补码：该负数对应的正数的补码取反加一</li>\n<li>一个8位的有符号的数据范围为什么是-128到127：因为补码编码的格式不同导致</li>\n</ol>\n<h4 id=\"1-3-数据在内存中的意义\"><a href=\"#1-3-数据在内存中的意义\" class=\"headerlink\" title=\"1.3.数据在内存中的意义:\"></a>1.3.数据在内存中的意义:</h4><ol>\n<li>数据本身是没有意义的，只是要看我们怎样来解释他</li>\n</ol>\n<h4 id=\"1-4-类型转化\"><a href=\"#1-4-类型转化\" class=\"headerlink\" title=\"1.4.类型转化:\"></a>1.4.类型转化:</h4><ol>\n<li>小类型遇到大类型需要转化为大类型，位数不够的话会根据原类型的符号位来补位（是0补0，是1补1）</li>\n<li>整形遇到浮点型需要转化为浮点型</li>\n<li>有符号和无符号的运算结果是有符号的</li>\n<li>转化都是低位对低位进行取值（低位对齐）</li>\n</ol>\n<h3 id=\"2-进程空间\"><a href=\"#2-进程空间\" class=\"headerlink\" title=\"2.进程空间:\"></a>2.进程空间:</h3><h4 id=\"2-1-虚拟空间\"><a href=\"#2-1-虚拟空间\" class=\"headerlink\" title=\"2.1.虚拟空间:\"></a>2.1.虚拟空间:</h4><ol>\n<li>虚拟内存不是我们生活上指的内存条，而是我们通过他来映射到物理内存的一套机制；</li>\n<li>虚拟内存的好处：早先的电脑是直接将我们运行的程序加载到物理内存中，所以会造成不同的程序直接可以相互调用的后果（很不安全），但是有了这套机制之后，就没有这个缺点了</li>\n</ol>\n<h4 id=\"2-2-变量的存放区域总结\"><a href=\"#2-2-变量的存放区域总结\" class=\"headerlink\" title=\"2.2.变量的存放区域总结:\"></a>2.2.变量的存放区域总结:</h4><ol>\n<li>只要是未初始化的全局或者是静态变量全部储存在data段的未初始化数据段(bss)，默认初始化为0</li>\n<li>auto的局部变量名无论初始化或者未初始化都储存在栈空间</li>\n<li>所有的常量都是存储在data区域的只读区域</li>\n<li>text是储存二进制文件（运行程序）(.exe/.out)的地方</li>\n</ol>\n<h4 id=\"2-3-图示\"><a href=\"#2-3-图示\" class=\"headerlink\" title=\"2.3.图示:\"></a>2.3.图示:</h4><p><img src=\"/2018/03/09/2018-03-09-c1-进程空间,一维数组/1.jpg\" alt=\"进程空间\"></p>\n<h3 id=\"3-数组以及练习\"><a href=\"#3-数组以及练习\" class=\"headerlink\" title=\"3.数组以及练习:\"></a>3.数组以及练习:</h3><p><a href=\"1.c\">点击查看代码</a></p>\n<p><font color=\"red\">注意:</font>地址的加减其实是加减地址所指向空间的数量，只有&amp;+数组名才是操作数组的整体</p>\n"},{"title":"virtualbox中ubuntu和windows共享文件夹设置","date":"2018-03-09T12:14:29.000Z","_content":"\n\n### 1.系统平台:\n系统平台：win8.1、virtualbox4.3.8、ubuntu12.04\n\n#### 1.1:\n安装VBoxGuestAdditions_4.3.8.iso增强工具，安装完毕后根据提示重启Ubuntu，具体操作如下：\n\n##### 1.1.1:\n<img src=\"1.png\"/>\n\n##### 1.1.2.安装virtualbox增强包:\n```shell\nlinjiqin@ubuntu:~$ cd ~\nlinjiqin@ubuntu:~$ su -\n密码： \nroot@ubuntu:~# cd /media/\nroot@ubuntu:/media# ls\nsf_share  VBOXADDITIONS_4.3.8_92456\nroot@ubuntu:/media# cd VBOXADDITIONS_4.3.8_92456/\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# ls\n32Bit        cert                    VBoxSolarisAdditions.pkg\n64Bit        OS2                     VBoxWindowsAdditions-amd64.exe\nAUTORUN.INF  runasroot.sh            VBoxWindowsAdditions.exe\nautorun.sh   VBoxLinuxAdditions.run  VBoxWindowsAdditions-x86.exe\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# sudo ./VBoxLinuxAdditions.run #安装virtualbox增强包\n....\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# \n```\n\n#### 1.2:\n先关闭ubuntu，在virtualbox“设置”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加windows中要共享的目录，取一个名。比如我在D盘建一个名为share的文件夹，如下图：\n<img src=\"2.png\"/>\n\n#### 1.3:\n重启ubuntu，在ubuntu系统最上端“设备”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加第二步操作的共享目录，如下图：\n<img src=\"3.png\"/>\n\n#### 1.4:\n进入虚拟Ubuntu，在命令行终端下输入：\nsudo mkdir /mnt/shared\nsudo mount -t vboxsf share /mnt/shared\n其中\"share\"是之前创建的共享文件夹的名字。OK，现在Ubuntu和主机可以互传文件了。\n要想自动挂载的话，可以在/etc/fstab中添加一项\nshare /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0\n\n#### 1.5.卸载的话使用下面的命令:\nsudo umount -f /mnt/shared\n\n#### 1.6.<font color=red>注意</font>:\n共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的名字也是shared的话，在挂载的时候就会出现如下的错误信息：/sbin/mount.vboxsf: mounting failed with the error: Protocol error\n\n\n","source":"_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置.md","raw":"---\ntitle: virtualbox中ubuntu和windows共享文件夹设置\ndate: 2018-03-09 20:14:29\ncategories: 技术\ntags: [linux,windows,虚拟机]\n---\n\n\n### 1.系统平台:\n系统平台：win8.1、virtualbox4.3.8、ubuntu12.04\n\n#### 1.1:\n安装VBoxGuestAdditions_4.3.8.iso增强工具，安装完毕后根据提示重启Ubuntu，具体操作如下：\n\n##### 1.1.1:\n<img src=\"1.png\"/>\n\n##### 1.1.2.安装virtualbox增强包:\n```shell\nlinjiqin@ubuntu:~$ cd ~\nlinjiqin@ubuntu:~$ su -\n密码： \nroot@ubuntu:~# cd /media/\nroot@ubuntu:/media# ls\nsf_share  VBOXADDITIONS_4.3.8_92456\nroot@ubuntu:/media# cd VBOXADDITIONS_4.3.8_92456/\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# ls\n32Bit        cert                    VBoxSolarisAdditions.pkg\n64Bit        OS2                     VBoxWindowsAdditions-amd64.exe\nAUTORUN.INF  runasroot.sh            VBoxWindowsAdditions.exe\nautorun.sh   VBoxLinuxAdditions.run  VBoxWindowsAdditions-x86.exe\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# sudo ./VBoxLinuxAdditions.run #安装virtualbox增强包\n....\nroot@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# \n```\n\n#### 1.2:\n先关闭ubuntu，在virtualbox“设置”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加windows中要共享的目录，取一个名。比如我在D盘建一个名为share的文件夹，如下图：\n<img src=\"2.png\"/>\n\n#### 1.3:\n重启ubuntu，在ubuntu系统最上端“设备”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加第二步操作的共享目录，如下图：\n<img src=\"3.png\"/>\n\n#### 1.4:\n进入虚拟Ubuntu，在命令行终端下输入：\nsudo mkdir /mnt/shared\nsudo mount -t vboxsf share /mnt/shared\n其中\"share\"是之前创建的共享文件夹的名字。OK，现在Ubuntu和主机可以互传文件了。\n要想自动挂载的话，可以在/etc/fstab中添加一项\nshare /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0\n\n#### 1.5.卸载的话使用下面的命令:\nsudo umount -f /mnt/shared\n\n#### 1.6.<font color=red>注意</font>:\n共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的名字也是shared的话，在挂载的时候就会出现如下的错误信息：/sbin/mount.vboxsf: mounting failed with the error: Protocol error\n\n\n","slug":"2018-03-09-virtualbox中ubuntu和windows共享文件夹设置","published":1,"updated":"2018-03-09T12:29:58.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjejyqgrw000od0q8hzrq9g4h","content":"<h3 id=\"1-系统平台\"><a href=\"#1-系统平台\" class=\"headerlink\" title=\"1.系统平台:\"></a>1.系统平台:</h3><p>系统平台：win8.1、virtualbox4.3.8、ubuntu12.04</p>\n<h4 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.1:\"></a>1.1:</h4><p>安装VBoxGuestAdditions_4.3.8.iso增强工具，安装完毕后根据提示重启Ubuntu，具体操作如下：</p>\n<h5 id=\"1-1-1\"><a href=\"#1-1-1\" class=\"headerlink\" title=\"1.1.1:\"></a>1.1.1:</h5><p><img src=\"/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png\"></p>\n<h5 id=\"1-1-2-安装virtualbox增强包\"><a href=\"#1-1-2-安装virtualbox增强包\" class=\"headerlink\" title=\"1.1.2.安装virtualbox增强包:\"></a>1.1.2.安装virtualbox增强包:</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linjiqin@ubuntu:~$ cd ~</span><br><span class=\"line\">linjiqin@ubuntu:~$ su -</span><br><span class=\"line\">密码： </span><br><span class=\"line\">root@ubuntu:~# cd /media/</span><br><span class=\"line\">root@ubuntu:/media# ls</span><br><span class=\"line\">sf_share  VBOXADDITIONS_4.3.8_92456</span><br><span class=\"line\">root@ubuntu:/media# cd VBOXADDITIONS_4.3.8_92456/</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# ls</span><br><span class=\"line\">32Bit        cert                    VBoxSolarisAdditions.pkg</span><br><span class=\"line\">64Bit        OS2                     VBoxWindowsAdditions-amd64.exe</span><br><span class=\"line\">AUTORUN.INF  runasroot.sh            VBoxWindowsAdditions.exe</span><br><span class=\"line\">autorun.sh   VBoxLinuxAdditions.run  VBoxWindowsAdditions-x86.exe</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# sudo ./VBoxLinuxAdditions.run #安装virtualbox增强包</span><br><span class=\"line\">....</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456#</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2\"><a href=\"#1-2\" class=\"headerlink\" title=\"1.2:\"></a>1.2:</h4><p>先关闭ubuntu，在virtualbox“设置”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加windows中要共享的目录，取一个名。比如我在D盘建一个名为share的文件夹，如下图：<br><img src=\"/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png\"></p>\n<h4 id=\"1-3\"><a href=\"#1-3\" class=\"headerlink\" title=\"1.3:\"></a>1.3:</h4><p>重启ubuntu，在ubuntu系统最上端“设备”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加第二步操作的共享目录，如下图：<br><img src=\"/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png\"></p>\n<h4 id=\"1-4\"><a href=\"#1-4\" class=\"headerlink\" title=\"1.4:\"></a>1.4:</h4><p>进入虚拟Ubuntu，在命令行终端下输入：<br>sudo mkdir /mnt/shared<br>sudo mount -t vboxsf share /mnt/shared<br>其中”share”是之前创建的共享文件夹的名字。OK，现在Ubuntu和主机可以互传文件了。<br>要想自动挂载的话，可以在/etc/fstab中添加一项<br>share /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0</p>\n<h4 id=\"1-5-卸载的话使用下面的命令\"><a href=\"#1-5-卸载的话使用下面的命令\" class=\"headerlink\" title=\"1.5.卸载的话使用下面的命令:\"></a>1.5.卸载的话使用下面的命令:</h4><p>sudo umount -f /mnt/shared</p>\n<h4 id=\"1-6-注意\"><a href=\"#1-6-注意\" class=\"headerlink\" title=\"1.6.注意:\"></a>1.6.<font color=\"red\">注意</font>:</h4><p>共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的名字也是shared的话，在挂载的时候就会出现如下的错误信息：/sbin/mount.vboxsf: mounting failed with the error: Protocol error</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"movies":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}},"links":{"github":{"link":"https://github.com/","avatar":"/images/favatar/github-logo.png","desc":"面向开源及私有软件项目的托管平台"},"itellyon.cn":{"link":"https://msdn.itellyou.cn/","avatar":"/images/favatar/itellyou.cn-logo.png","desc":"windows系统和开发工具"},"json.cn":{"link":"https://www.json.cn/","avatar":"/images/favatar/github-logo.png","desc":"json字符串解析网站"},"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h3 id=\"1-系统平台\"><a href=\"#1-系统平台\" class=\"headerlink\" title=\"1.系统平台:\"></a>1.系统平台:</h3><p>系统平台：win8.1、virtualbox4.3.8、ubuntu12.04</p>\n<h4 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.1:\"></a>1.1:</h4><p>安装VBoxGuestAdditions_4.3.8.iso增强工具，安装完毕后根据提示重启Ubuntu，具体操作如下：</p>\n<h5 id=\"1-1-1\"><a href=\"#1-1-1\" class=\"headerlink\" title=\"1.1.1:\"></a>1.1.1:</h5><p><img src=\"/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png\"></p>\n<h5 id=\"1-1-2-安装virtualbox增强包\"><a href=\"#1-1-2-安装virtualbox增强包\" class=\"headerlink\" title=\"1.1.2.安装virtualbox增强包:\"></a>1.1.2.安装virtualbox增强包:</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linjiqin@ubuntu:~$ cd ~</span><br><span class=\"line\">linjiqin@ubuntu:~$ su -</span><br><span class=\"line\">密码： </span><br><span class=\"line\">root@ubuntu:~# cd /media/</span><br><span class=\"line\">root@ubuntu:/media# ls</span><br><span class=\"line\">sf_share  VBOXADDITIONS_4.3.8_92456</span><br><span class=\"line\">root@ubuntu:/media# cd VBOXADDITIONS_4.3.8_92456/</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# ls</span><br><span class=\"line\">32Bit        cert                    VBoxSolarisAdditions.pkg</span><br><span class=\"line\">64Bit        OS2                     VBoxWindowsAdditions-amd64.exe</span><br><span class=\"line\">AUTORUN.INF  runasroot.sh            VBoxWindowsAdditions.exe</span><br><span class=\"line\">autorun.sh   VBoxLinuxAdditions.run  VBoxWindowsAdditions-x86.exe</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# sudo ./VBoxLinuxAdditions.run #安装virtualbox增强包</span><br><span class=\"line\">....</span><br><span class=\"line\">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456#</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2\"><a href=\"#1-2\" class=\"headerlink\" title=\"1.2:\"></a>1.2:</h4><p>先关闭ubuntu，在virtualbox“设置”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加windows中要共享的目录，取一个名。比如我在D盘建一个名为share的文件夹，如下图：<br><img src=\"/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png\"></p>\n<h4 id=\"1-3\"><a href=\"#1-3\" class=\"headerlink\" title=\"1.3:\"></a>1.3:</h4><p>重启ubuntu，在ubuntu系统最上端“设备”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加第二步操作的共享目录，如下图：<br><img src=\"/2018/03/09/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png\"></p>\n<h4 id=\"1-4\"><a href=\"#1-4\" class=\"headerlink\" title=\"1.4:\"></a>1.4:</h4><p>进入虚拟Ubuntu，在命令行终端下输入：<br>sudo mkdir /mnt/shared<br>sudo mount -t vboxsf share /mnt/shared<br>其中”share”是之前创建的共享文件夹的名字。OK，现在Ubuntu和主机可以互传文件了。<br>要想自动挂载的话，可以在/etc/fstab中添加一项<br>share /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0</p>\n<h4 id=\"1-5-卸载的话使用下面的命令\"><a href=\"#1-5-卸载的话使用下面的命令\" class=\"headerlink\" title=\"1.5.卸载的话使用下面的命令:\"></a>1.5.卸载的话使用下面的命令:</h4><p>sudo umount -f /mnt/shared</p>\n<h4 id=\"1-6-注意\"><a href=\"#1-6-注意\" class=\"headerlink\" title=\"1.6.注意:\"></a>1.6.<font color=\"red\">注意</font>:</h4><p>共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的名字也是shared的话，在挂载的时候就会出现如下的错误信息：/sbin/mount.vboxsf: mounting failed with the error: Protocol error</p>\n"}],"PostAsset":[{"_id":"source/_posts/2018-03-08-HEXO文档中带文件/avatar.jpg","post":"cjejyqgrg0007d0q8tism60xp","slug":"avatar.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2018-03-09-c1-进程空间,一维数组/1.c","post":"cjejyqgru000jd0q8iswejlos","slug":"1.c","modified":1,"renderable":1},{"_id":"source/_posts/2018-03-09-c1-进程空间,一维数组/1.jpg","post":"cjejyqgru000jd0q8iswejlos","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png","post":"cjejyqgrw000od0q8hzrq9g4h","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png","post":"cjejyqgrw000od0q8hzrq9g4h","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png","slug":"3.png","post":"cjejyqgrw000od0q8hzrq9g4h","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjejyqgrj0009d0q8xjine6im","category_id":"cjejyqgrd0004d0q8zw5cm6xb","_id":"cjejyqgru000kd0q866yxog2s"},{"post_id":"cjejyqgr50001d0q8j89lvbpo","category_id":"cjejyqgrd0004d0q8zw5cm6xb","_id":"cjejyqgrx000pd0q8bg9il95g"},{"post_id":"cjejyqgrm000bd0q84s0obbdm","category_id":"cjejyqgrd0004d0q8zw5cm6xb","_id":"cjejyqgry000qd0q823nidunp"},{"post_id":"cjejyqgrq000gd0q86rvgubog","category_id":"cjejyqgrd0004d0q8zw5cm6xb","_id":"cjejyqgrz000td0q8d50jdc47"},{"post_id":"cjejyqgra0003d0q8jnaulu0q","category_id":"cjejyqgrd0004d0q8zw5cm6xb","_id":"cjejyqgs0000ud0q8x7vhc0om"},{"post_id":"cjejyqgru000jd0q8iswejlos","category_id":"cjejyqgrd0004d0q8zw5cm6xb","_id":"cjejyqgs0000wd0q8efddocqi"},{"post_id":"cjejyqgrw000od0q8hzrq9g4h","category_id":"cjejyqgrd0004d0q8zw5cm6xb","_id":"cjejyqgs0000yd0q80h4jqmtn"},{"post_id":"cjejyqgrg0007d0q8tism60xp","category_id":"cjejyqgrd0004d0q8zw5cm6xb","_id":"cjejyqgs10010d0q829r97cp7"}],"PostTag":[{"post_id":"cjejyqgr50001d0q8j89lvbpo","tag_id":"cjejyqgrf0005d0q843xstwi7","_id":"cjejyqgrp000ed0q82rcyazto"},{"post_id":"cjejyqgrm000bd0q84s0obbdm","tag_id":"cjejyqgrf0005d0q843xstwi7","_id":"cjejyqgrs000hd0q8zcn0jnbo"},{"post_id":"cjejyqgra0003d0q8jnaulu0q","tag_id":"cjejyqgrf0005d0q843xstwi7","_id":"cjejyqgrw000nd0q8yytr1gde"},{"post_id":"cjejyqgrg0007d0q8tism60xp","tag_id":"cjejyqgrf0005d0q843xstwi7","_id":"cjejyqgrz000sd0q8aenu03t2"},{"post_id":"cjejyqgrj0009d0q8xjine6im","tag_id":"cjejyqgry000rd0q8z03h2cyt","_id":"cjejyqgs0000xd0q8b1vm31ij"},{"post_id":"cjejyqgrq000gd0q86rvgubog","tag_id":"cjejyqgs0000vd0q8t8u9cpgn","_id":"cjejyqgs10011d0q848s1epl7"},{"post_id":"cjejyqgru000jd0q8iswejlos","tag_id":"cjejyqgry000rd0q8z03h2cyt","_id":"cjejyqgs10013d0q8b9kyt3w6"},{"post_id":"cjejyqgrw000od0q8hzrq9g4h","tag_id":"cjejyqgs10012d0q8aadb1qmg","_id":"cjejyqgs20016d0q8tvlr2h4k"},{"post_id":"cjejyqgrw000od0q8hzrq9g4h","tag_id":"cjejyqgs20014d0q8zlkxvgxq","_id":"cjejyqgs20017d0q83kbixf0n"},{"post_id":"cjejyqgrw000od0q8hzrq9g4h","tag_id":"cjejyqgs20015d0q8mmpijxrq","_id":"cjejyqgs30018d0q8k4w8b6wp"}],"Tag":[{"name":"工具/插件","_id":"cjejyqgrf0005d0q843xstwi7"},{"name":"c/c++","_id":"cjejyqgry000rd0q8z03h2cyt"},{"name":"csharp/.net","_id":"cjejyqgs0000vd0q8t8u9cpgn"},{"name":"linux","_id":"cjejyqgs10012d0q8aadb1qmg"},{"name":"windows","_id":"cjejyqgs20014d0q8zlkxvgxq"},{"name":"虚拟机","_id":"cjejyqgs20015d0q8mmpijxrq"}]}}